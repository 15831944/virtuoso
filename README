Building Virtuoso Open Source Edition

Virtuoso Open Source Edition
Copyright (C) 1998-2006 OpenLink Software <vos.admin@openlinksw.com>

  * ..  Building Virtuoso Open Source Edition
  * ....  Introduction
  * ....  Package Dependencies
  * ....  Diskspace Requirements
  * ....  Make FAQ
  * ......  Generic build environment
  * ......  AIX 4.x 32-bit
  * ......  AIX 4.x 64-bit
  * ......  AIX 5.x 32-bit
  * ......  AIX 5.x 32-bit
  * ......  Digital Unix/OSF1 V5.0 64-bit
  * ......  HP/UX 11.00 32-bit
  * ......  HP/UX 11.00 64-bit
  * ......  HP/UX 11.23 Itanium 32-bit
  * ......  HP/UX 11.23 Itanium 64-bit
  * ......  Linux 32-bit
  * ......  Linux 64-bit
  * ......  Mac OS X 10.2 and 10.3 PPC 32-bit
  * ......  Mac OS X 10.4 PPC 32-bit
  * ......  Mac OS X 10.4 PPC 64-bit
  * ......  Mac OS X 10.4 Universal 32-bit
  * ......  Solaris 2.x i386 32-bit
  * ......  Solaris 2.10 Opteron 32-bit
  * ......  Solaris 2.10 Opteron 64-bit
  * ......  Solaris 2.8 and above SPARC 32-bit
  * ......  Solaris 2.8 and above SPARC 32-bit
  * ....  Test Suite
  * ....  Installation
  * ....  Getting Started
  * ......  Starting with an Empty Database
  * ......  Starting the Demo Database
  * ....  VAD Packages


Introduction
============

This document explains steps to take after obtaining a Virtuoso source
snapshot or cvs checkout.

These sections explain how to compile, test and install and what
components are produced by the make process and how one can interact
with them.


Package Dependencies
====================

To generate the configure script and all other build files necessary,
please make sure the following packages and recommended versions are
installed on your system.

    Package   Version  From
    autoconf  2.57     http://www.gnu.org/software/autoconf/
    automake  1.6.3    http://www.gnu.org/software/automake/
    libtool   1.5      http://www.gnu.org/software/libtool/
    flex      2.5.4    http://www.gnu.org/software/non-gnu/flex/
    bison     1.35     http://www.gnu.org/software/bison/
    gperf     2.7.2    http://www.gnu.org/software/gperf/
    gawk      3.1.1    http://www.gnu.org/software/gawk/
    m4        1.4.1    http://www.gnu.org/software/m4/
    make      3.79.1   http://www.gnu.org/software/make/
    OpenSSL   0.9.7    http://www.openssl.org/

and any GNU packages required by these. The autogen.sh and configure
scripts check for the presence and right version of some of the required
components.

The above version are the minimum recommended versions of these
packages. Older version of these packages can sometimes be used, but
could cause build problems.

To check the version number of the tools installed on your system,
use one of the following commands:

    $ autoconf --version
    $ automake --version
    $ libtoolize --version
    $ flex --version
    $ bison --version
    $ gperf --version
    $ gawk --version
    $ m4 --version
    $ make --version
    $ openssl version


Diskspace Requirements
======================

The build produces a demo database and Virtuoso application packages
that are quite large. At least 800 MB of free space should be available
in the build file system.

When running `make install', the target file system should have about 460
MB free. By default, the install target directories are under /usr/local/,
but you can specify

    ./configure --prefix=/path/to/dir

instead.

The minimum working configuration consists of the server executable
and config files plus database, no more than a few MB for the server
executable, depending on platform and options.


Make FAQ
========

In the root directory of the checkout perform the following commands:

    ./autogen.sh        # should only be needed in CVS checkout
    ./configure
    make

to produce the default binaries, VAD packages and demo database. This
takes some time, principally due to building and filling the demo
database, rendering the XML documentation into several target formats
and composing various Virtuoso application packages. It takes about 30
minutes on a 2GHz machine.

The default configure does not enable most of the runtime-hosting and
extension features. See the links on the building page for instructions
on how to enable these and what additional software is required.

Some builds require additional C compiler and other environment flags
to be set before running the configure command, specially when building
64-bit versions of the server. If your system is not in this list,
please try to run the configure command without any environment settings.

If your system requires additional flags not listed below, please contact
us at <vos.admin@openlinksw.com>

Generic build environment
-------------------------
    CC=cc
    CFLAGS="-O"
    export CFLAGS CC
    ./configure ...

AIX 4.x 32-bit
-------------------------
    CC=cc_r7
    CFLAGS="-O -q32"
    LDFLAGS="-brtl"
    OBJECT_MODE=32
    export CC CFLAGS LDFLAGS OBJECT_MODE
    ./configure ...

AIX 4.x 64-bit
-------------------------
    CC=cc_r7
    CFLAGS="-O -q64"
    LDFLAGS="-brtl"
    OBJECT_MODE=64
    export CC CFLAGS LDFLAGS OBJECT_MODE
    ./configure ...

AIX 5.x 32-bit
-------------------------
    CC=cc_r
    CFLAGS="-O -q32"
    LDFLAGS="-brtl"
    OBJECT_MODE=32
    export CC CFLAGS LDFLAGS OBJECT_MODE
    ./configure ...

AIX 5.x 32-bit
-------------------------
    CC=cc_r
    CFLAGS="-O -q64"
    LDFLAGS="-brtl"
    OBJECT_MODE=64
    export CC CFLAGS LDFLAGS OBJECT_MODE
    ./configure ...

Digital Unix/OSF1 V5.0 64-bit
-------------------------
    CFLAGS="-O"
    export CFLAGS
    ./configure ...

HP/UX 11.00 32-bit
-------------------------
    CFLAGS="-O -Ae +DA1.1"
    export CFLAGS
    ./configure ...

HP/UX 11.00 64-bit
-------------------------
    CFLAGS="-O -Ae +DA2.0W"
    export CFLAGS
    ./configure ...

HP/UX 11.23 Itanium 32-bit
-------------------------
    CFLAGS="-O -Ae +DD32"
    export CFLAGS
    ./configure ...

HP/UX 11.23 Itanium 64-bit
-------------------------
    CFLAGS="-O -Ae +DD64"
    export CFLAGS
    ./configure ...

Linux 32-bit
-------------------------
    CFLAGS="-O3"
    export CFLAGS
    ./configure ...

Linux 64-bit
-------------------------
    CFLAGS="-O3 -m64"
    export CFLAGS
    ./configure ...

Mac OS X 10.2 and 10.3 PPC 32-bit
-------------------------
    CFLAGS="-O -m32 -mmacosx-version-min=10.2"
    export CFLAGS
    ./configure ...

Mac OS X 10.4 PPC 32-bit
-------------------------
    CFLAGS="-O -m32 -mmacosx-version-min=10.2"
    export CFLAGS
    ./configure ...

Mac OS X 10.4 PPC 64-bit
-------------------------
    CFLAGS="-O -m64 -mmacosx-version-min=10.4"
    export CFLAGS
    ./configure ...

Mac OS X 10.4 Universal 32-bit
-------------------------
    CFLAGS="-O -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch ppc -arch i386 -mmacosx-version-min=10.4"
    export CFLAGS
    ./configure --disable-dependency-tracking ...

Solaris 2.x i386 32-bit
-------------------------
    CC=cc
    CFLAGS="-O"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...

Solaris 2.10 Opteron 32-bit
-------------------------
    CC=cc
    CFLAGS="-O -xtarget=opteron"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...

Solaris 2.10 Opteron 64-bit
-------------------------
    CC=cc
    CFLAGS="-O -xtarget=opteron -xarch=amd64"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...

Solaris 2.8 and above SPARC 32-bit
-------------------------
    CC=cc
    CFLAGS="-O"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...

Solaris 2.8 and above SPARC 32-bit
-------------------------
    CC=cc
    CFLAGS="-O -xtarget=ultra -xarch=v9"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...


Test Suite
==========

Running

    make check

at the root of the build tree will start the automated test suite. This
takes about an hour on a 2GHz machine and requires approximately 1 GB
of free space.


Installation
============

After running configure && make,

    make install

at the root of the build tree copies the files to the locations
specified by the --prefix option to configure. The default of --prefix
is /usr/local/.

These subdirectories are all appended to --prefix, i.e. /usr/local/
by default.

  * share/virtuoso/doc/html
  * share/virtuoso/doc/pdf
  * share/virtuoso/vad - VAD packages BPEL, Conductor, tutorials, documentation
  * var/lib/virtuoso/db - Empty database
  * var/lib/virtuoso/demo - Demo database
  * bin/ - The virtuoso-t, isql, isqlw, virtmail, virtuoso-sample-t, inifile
    executables
  * lib/ - libvirtuoso-t.a libvirtuoso-t.la virtodbc32.a virtodbc32.la
    virtodbc32r.a virtodbc32_r.la virtodbc_r.so wikiv.so plus any plugins that
    may be enabled.
  * lib/virtuoso - hostingsample.a hosting_sample.la hosting_sample.so
    plugin_sample.a plugin_sample.so


Getting Started
===============

Starting with an Empty Database
-------------------------------

After installation, there is a sample virtuoso.ini file in
var/lib/virtuoso/db.  The virtuoso-t executable can be started
in any empty directory containing a virtuoso.ini file. The empty
database and other files will be created at startup according to the
paths and filenames in the ini file. All names are relative to the
starting directory of the server; no special database-creation utility
is needed. The default admin account is called "dba" and its password
is also "dba".

Starting the Demo Database
--------------------------

To start the demo database, you can set the shell PATH environment
variable to include the bin/ directory under the prefix you installed
(ie /usr/local/bin/ by default).

Then cd to var/lib/virtuoso/demo and run

    virtuoso-t -c demo.ini -f &

to start the server in the background. It will not detach from the shell,
so you see the startup messages.

To connect with the command line SQL tool,

    isql 1112 dba dba

gives a SQL> prompt.

Type 

    SQL> use Demo;

to switch to the demo database, containing the Microsoft Northwind sample
tables. The help command of isql gives further instructions.

To use a web admin interface, point the browser to: 

	http://localhost:8890/conductor

To read the documents online: 

	http://localhost:8890/doc/html

To experiment with online tutorials: 

	http://localhost:8890/tutorial


VAD Packages
============

The different VAD packages can be installed via ISQL using the following
command (if the installation packages reside in the filesystem):

    SQL> vad_install ('file/system/path/package-name.vad', 0);

Alternatively, you can copy VAD packages to Virtuoso's DAV repository
and then execute the following command (also from ISQL):

    SQL> vad_install ('webdav/path>/package-name.vad', 1);

at the isql command line. Note that the DirsAllowed? parameter of the
Parameters section of the ini-file must allow access to the directory
where the package file is located.
