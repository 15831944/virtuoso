<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  
  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
  project.
  
  Copyright (C) 1998-2006 OpenLink Software
  
  This project is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; only version 2 of the License, dated June 1991.
  
  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.
  
  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

  : template.sh,v 1.4 2006/04/17 22:58:08 ivan Exp $
-->
<refentry id="fn_dict_list_keys">
  <refmeta>
    <refentrytitle>dict_list_keys</refentrytitle>
    <refmiscinfo>dict</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>dict_list_keys</refname>
    <refpurpose>Returns an array of all keys stored in the given dictionary.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_dict_list_keys">
      <funcprototype id="fproto_dict_list_keys">
        <funcdef>vector <function>dict_list_keys</function></funcdef>
	<paramdef>inout <parameter>dict</parameter> dictionary</paramdef>
	<paramdef>in <parameter>destructive</parameter> any</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_dict_list_keys">
    <title>Description</title>
    <para>The function returns an array of all keys stored in the given dictionary, ignoring dependent parts of key-value pairs.
This is especially useful when dictionary is used to form a set of distinct keys, when dependent parts are fake (typically zeroes).
If the <parameter>destructive</parameter> parameter is nonzero then the function may avoid copying of keys to the resulting array
by moving them out from the dictionary. This is faster but the dictionary will become empty at the end of operation.
The <parameter>destructive</parameter> parameter does not have any effect if the dictionary is used as a value of more than one variable.
Thus it is safe to make this parameter nonzero as soon as the variable passed to the function as <parameter>dict</parameter> is no longer in use after
the function call and there's no need to inspect the whole program to check if other variables may be affected.
</para>
  </refsect1>
  <refsect1 id="params_dict_list_keys">
    <title>Parameters</title>
    <refsect2><title>dict</title>
      <para>The dictionary to scan</para>
    </refsect2>
    <refsect2><title>destructive</title>
      <para>Flag that indicates whether the dictionary can be cleaned during the operation.</para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_dict_list_keys"><title>Return Types</title>
    <para>The function returns a vector.</para>
  </refsect1>
<!--  <refsect1 id="examples_dict_list_keys">
    <title>Examples</title>
    <example id="ex_dict_list_keys"><title></title>
      <para></para>
      <screen><![CDATA[
]]>
</screen>
    </example>
  </refsect1> -->
  <refsect1 id="seealso_dict_list_keys">
    <title>See Also</title>
    <para><link linkend="fn_dict_new"><function>dict_new</function></link></para>
    <para><link linkend="fn_dict_put"><function>dict_put</function></link></para>
    <para><link linkend="fn_dict_get"><function>dict_get</function></link></para>
    <para><link linkend="fn_dict_remove"><function>dict_remove</function></link></para>
    <para><link linkend="fn_dict_duplicate"><function>dict_duplicate</function></link></para>
    <para><link linkend="fn_dict_to_vector"><function>dict_to_vector</function></link></para>
  </refsect1>
</refentry>
