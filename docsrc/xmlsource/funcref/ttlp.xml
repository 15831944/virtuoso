<?xml version="1.0" encoding="ISO-8859-1"?>
<refentry id="fn_ttlp">
  <refmeta>
    <refentrytitle>DB.DBA.TTLP</refentrytitle>
    <refmiscinfo>rdf</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>DB.DBA.TTLP</refname>
    <refpurpose>parses TTL (TURTLE or N3 resource) and places its triples into DB.DBA.RDF_QUAD.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_ttlp">
      <funcprototype id="fproto_ttlp">
        <funcdef><function>DB.DBA.TTLP</function></funcdef>
	<paramdef>in <parameter>strg</parameter> any</paramdef>
	<paramdef>in <parameter>base</parameter> varchar</paramdef>
	<paramdef>in <parameter>graph</parameter> varchar</paramdef>
        <paramdef>in <parameter>flags </parameter> integer</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_ttlp">
    <title>Description</title>
    <para>Parses TTL (TURTLE or N3 resource) and places its triples into DB.DBA.RDF_QUAD.</para>
  </refsect1>
  <refsect1 id="params_ttlp">
    <title>Parameters</title>
    <refsect2><title>strg</title>
      <para>text of the resource</para>
    </refsect2>
    <refsect2><title>base</title>
      <para>base IRI to resolve relative IRIs to absolute</para>
    </refsect2>
    <refsect2><title>graph</title>
      <para>target graph IRI, parsed triples will appear in that graph.</para>
    </refsect2>
    <refsect2><title>flags</title>
      <para>bitmask of flags that permit some sorts of syntax errors in resource, use 0.</para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_ttlp"><title>Return Types</title>
    <para>The return value is not specified and may be changed in future versions.</para>
  </refsect1>
<!--  <refsect1 id="errors_ttlp">
    <title>Errors</title>
    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1>
-->
  <refsect1 id="examples_ttlp">
    <title>Examples</title>
    <example id="ex_ttlp"><title></title>
      <para>For loading a file of any greater length, it is most practical to use the file_to_string_output function.</para>
      <para>It is important the file to be accessible for the Virtuoso server. You need to have set properly the DirsAllowed parameter value in section [Parameters] of the Virtuoso database INI file. For example on Windows it could be: </para>
<screen><![CDATA[
virtuoso.ini file:
[Parameters]
...
DirsAllowed =  .\tmp
...
]]></screen>
      <para>So in the example the file you want to import from, should be in the tmp folder or in its subfolder. Note that this example folder is a subfolder of the Virtuoso Server working directory.</para>
<screen><![CDATA[
SQL> ttlp (file_to_string_output ('.\tmp\data.ttl'), '', 'http://my_graph', 0);
]]></screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_ttlp">
    <title>See Also</title>
    <para><link linkend="fn_rdf_audit_metadata"><function>DB.DBA.RDF_AUDIT_METADATA</function></link></para>
    <para><link linkend="fn_rdf_backup_metadata"><function>DB.DBA.RDF_BACKUP_METADATA</function></link></para>
    <para><link linkend="fn_rdf_load_rdfxml"><function>DB.DBA.RDF_LOAD_RDFXML</function></link></para>
    <para><link linkend="fn_rdf_load_rdfxml_mt"><function>DB.DBA.RDF_LOAD_RDFXML_MT</function></link></para>
    <para><link linkend="fn_ttlp_mt"><function>DB.DBA.TTLP_MT</function></link></para>
  </refsect1>
</refentry>
