<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2006 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--

  declare domain_id, account_id integer;
  declare sid, realm any;
  declare aSession any;
  declare progressID, progressIndex any;

  sid := get_keyword ('sid', params, '');
  realm := get_keyword ('realm', params, '');

  aSession   := ENEWS.WA.session_restore (params);
  domain_id := cast(get_keyword('domain_id', aSession, '0') as integer);
  account_id := cast(get_keyword('user_id', aSession, '0') as integer);
  progressID := cast(get_keyword('id', params, msec_time()) as varchar);

  declare exit handler for sqlstate '*'
  {
    registry_remove ('feed_' || progressID || '_index');
    registry_remove ('feed_' || progressID || '_action');
    return;
  };

  progressIndex := registry_get ('feed_' || progressID || '_index');

  -- dbg_obj_print(get_keyword ('mode', params, ''), progressID, progressIndex);
  -- reset
  if (get_keyword ('mode', params, '') = 'reset')
  {
    registry_remove ('feed_' || progressID || '_index');
    registry_remove ('feed_' || progressID || '_action');
    registry_set ('feed_' || progressID || '_index', '0');

    http_rewrite ();
    http_header ('Content-Type: text/xml\r\n');
    http('<root>');
    http(sprintf('<id>%s</id>', cast (progressID as varchar)));
    http('</root>');

    connection_set('stop_execution', '1');
    return (0);
  }

  -- stop
  if (get_keyword ('mode', params, '') = 'stop')
  {
    registry_set ('feed_' || progressID || '_action', 'stop');

    connection_set('stop_execution', '1');
    return (0);
  }

  -- state
  if (get_keyword ('mode', params, '') = 'state')
  {
    if (not (isinteger(progressIndex) and (progressIndex = 0)))
    {
    http_rewrite ();
    http_header ('Content-Type: text/xml\r\n');
    http('<root>');
      http(sprintf('<index>%s</index>', cast (progressIndex as varchar)));
    http('</root>');
    }

    connection_set('stop_execution','1');
    return (0);
  }

  -- exec
  if (get_keyword ('mode', params, '') = 'init')
  {
    -- flush and continue
    http_flush ();

    declare I, J, N integer;
    declare dataLength, folder_id, mfolder_id integer;
    declare feed_id, folder_name, mfolder_name varchar;
    declare data, rss, title, retrieve, V any;

    retrieve := cast (get_keyword('$_retrieve', params, '1') as integer);
    mfolder_id := cast (get_keyword('$_mfolder_id', params) as integer);
    mfolder_name := trim (get_keyword('$_mfolder_name', params));

    -- test folder names & count subscriptions
    j := length(params);
    vectorbld_init(V);
    for (i := 0; i < j; i := i + 2)
    {
      if (params[i] like 'cb_item%')
        vectorbld_acc(V, params[i+1]);
    }
    vectorbld_final(V);
    dataLength := length(V);

    -- dbg_obj_print('start: ', dataLength, now());
    -- exec subscriptions
    prof_enable(1);
    for (i := 0; i < dataLength; i := i + 1)
    {
      if  (cast(registry_get ('feed_' || progressID || '_action') as varchar) = 'stop')
        goto _stop;

      commit work;
      registry_set('feed_' || progressID || '_index', cast (i as varchar));

      N := V[i];
      data := deserialize (decode_base64 (get_keyword ('$_data_'||N, params)));
      rss := get_keyword ('rss', data, '');
      if (rss <> '')
      {
        for (j := 0; j < length (data); j := j + 1)
          data[j] := ENEWS.WA.wide2utf(data[j]);
        title := get_keyword ('title', data);

          feed_id := ENEWS.WA.channel_create(data);
        if (is_empty_or_null (mfolder_name) and is_empty_or_null (mfolder_id))
        {
          folder_name := trim (get_keyword ('$_fname_' || N, params, get_keyword ('folder', data, '')));
          folder_id := cast (trim (get_keyword ('$_fid_'|| N, params, '')) as integer);
        } else {
          folder_name := mfolder_name;
          folder_id := mfolder_id;
        }
        ENEWS.WA.channel_domain (-1, domain_id, feed_id, ENEWS.WA.wide2utf(title), null, folder_name, folder_id);
        if ((ENEWS.WA.channel_feeds(feed_id) = 0) or retrieve)
          {
          declare continue handler for sqlstate '*'
          {
            goto _next;
          };
              ENEWS.WA.feed_refresh(feed_id);
          }
        }
      _next:;
      }
    registry_set('feed_' || progressID || '_index', cast (dataLength as varchar));
  _stop:;

    prof_enable(0);
    -- update tags
    ENEWS.WA.tags_refresh(domain_id, account_id, 0);

    -- dbg_obj_print('end: ', dataLength, now());

    registry_remove ('feed_' || progressID || '_index');
    registry_remove ('feed_' || progressID || '_action');

    connection_set('stop_execution', '1');
    return (0);
  }
?>
