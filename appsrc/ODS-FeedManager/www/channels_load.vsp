<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2006 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
?>
<?vsp
  declare domain_id, account_id integer;
  declare sid, realm any;
  declare aRequest, aSession any;
  declare process, percentage, started, currentIndex, maxIndex any;

  sid := get_keyword ('sid', params, '');
  realm := get_keyword ('realm', params, '');

  aRequest := ENEWS.WA.validate_request(lines,0);
  aSession := ENEWS.WA.session_restore(aRequest, params, lines);
  domain_id := cast(get_keyword('domain_id', aSession, '0') as integer);
  account_id := cast(get_keyword('user_id', aSession, '0') as integer);

  process := cast(domain_id as varchar) || '_' || cast(account_id as varchar);

  declare exit handler for sqlstate '*' {
    registry_remove ('feed_' || process || '_percentage');
    registry_remove ('feed_' || process || '_currentIndex');
    registry_remove ('feed_' || process || '_maxIndex');
    registry_remove ('feed_' || process || '_started');
    return;
    --dbg_obj_print(__SQL_MESSAGE);
  };

  percentage := registry_get ('feed_' || process || '_percentage');
  currentIndex := registry_get ('feed_' || process || '_currentIndex');
  if (isinteger(currentIndex))
    currentIndex := '';
  maxIndex := registry_get ('feed_' || process || '_maxIndex');
  if (isinteger(maxIndex))
    maxIndex := '';
  started := registry_get ('feed_' || process || '_started');

  -- reset
  if (get_keyword ('mode', params, '') = 'reset') {
    --dbg_obj_print('reset');

    registry_remove ('feed_' || process || '_percentage');
    registry_remove ('feed_' || process || '_currentIndex');
    registry_remove ('feed_' || process || '_maxIndex');
    registry_remove ('feed_' || process || '_started');

    if (not(percentage <> 0
        and cast (percentage as integer) < 100
        and cast (percentage as integer) > 0
        and started <> 0
        and cast (started as datetime ) > dateadd('minute', -120, now())))
    {
      registry_set ('feed_' || process || '_percentage', '0');
      registry_set ('feed_' || process || '_started', datestring (now()));
    }

    http_rewrite ();
    http_header ('Content-Type: text/xml\r\n');
    http(sprintf('<percentage>%s</percentage>', cast (percentage as varchar)));

    connection_set('stop_execution', '1');
    return (0);
  }

  -- status
  if (get_keyword ('mode', params, '') = 'state') {
    --dbg_obj_print('state', percentage);

    http_rewrite ();
    http_header ('Content-Type: text/xml\r\n');
    if (isinteger(percentage) and (percentage = 0))
      percentage := 100;
    http('<root>');
    http(sprintf('<percentage>%s</percentage>', cast (percentage as varchar)));
    http(sprintf('<currentIndex>%s</currentIndex>', cast (currentIndex as varchar)));
    http(sprintf('<maxIndex>%s</maxIndex>', cast (maxIndex as varchar)));
    http('</root>');

    connection_set('stop_execution','1');
    return (0);
  }

  -- exec
  if (get_keyword ('mode', params, '') = 'init') {
    --dbg_obj_print('init', percentage);

    if ( percentage <> 0
         and cast (percentage as integer) < 100
         and cast (percentage as integer) > 0)
    {
      http_rewrite ();
      http_header ('Content-Type: text/html\r\n');
      http(sprintf('<percentage>%s</percentage>', cast (percentage as varchar)));
      http_flush ();

      connection_set ('stop_execution', '1');
      return (0);
    }

    -- flush and continue
    http_flush ();

    declare I, J, N integer;
    declare dataLength, folder_id integer;
    declare feed_id, folder_name varchar;
    declare data, rss, title, R, V any;

    R := cast(get_keyword('$_retrieve', params, '1') as integer);

    -- test folder names & count subscriptions
    j := length(params);
    V := vector();
    dataLength := 0;
    for (i := 0; i < j; i := i + 2) {
      if (params[i] like 'cb_item%') {
        dataLength := dataLength + 1;
        V := vector_concat(V, vector(params[i+1]));
        folder_name := trim(get_keyword(sprintf ('$_folder_name_%d', i), params, ''));
        if (folder_name <> '')
          if (not ENEWS.WA.folder_check_name(folder_name, 1)) {
            registry_set('feed_' || process || '_percentage', '100');
            connection_set ('stop_execution', '1');
            return (0);
          }
      }
    }
    registry_set('feed_' || process || '_maxIndex', cast (dataLength as varchar));

    -- exec subscriptions
    data := vector('rss', null, 'title', null, 'blog', null, 'format', null, 'lang', null, 'type', 'long');
    for (i := 0; i < dataLength; i := i + 1) {
        commit work;

      registry_set('feed_' || process || '_percentage', cast (ceiling (((100.0 / dataLength) * (i + 1))) as varchar));
      registry_set('feed_' || process || '_currentIndex', cast ((i + 1) as varchar));

      N := V[i];

      rss := get_keyword ('$_rss_' || N, params, '');
      if (rss <> '') {
        title   := get_keyword ('$_title_'  || N, params);

        aset(data, 1, rss);
        aset(data, 3, title);
        aset(data, 5, get_keyword ('$_blog_'   || N, params));
        aset(data, 7, get_keyword ('$_format_' || N, params));
        aset(data, 9, get_keyword ('$_lang_'   || N, params));

        --dbg_obj_print(N, now(), rss);
          feed_id := ENEWS.WA.channel_create(data);

        folder_name := trim (get_keyword ('$_folder_name_' || N, params, ''));
        folder_id := cast (trim (get_keyword ('$_folder_id_'|| N, params, '')) as integer);
        ENEWS.WA.channel_domain(domain_id, feed_id, ENEWS.WA.wide2utf(title), null, folder_name, folder_id);
          {
            declare exit handler for sqlstate '*' { goto _next; };
          if ((ENEWS.WA.channel_feeds(feed_id) = 0) and R)
              ENEWS.WA.feed_refresh(feed_id);
          }
        }
      _next:;
      }

    -- update tags
    ENEWS.WA.tags_refresh(domain_id, account_id, 0);

    registry_remove ('feed_' || process || '_percentage');
    registry_remove ('feed_' || process || '_currentIndex');
    registry_remove ('feed_' || process || '_maxIndex');
    registry_remove ('feed_' || process || '_started');
    http_flush(1);

    connection_set('stop_execution', '1');
    return (0);
  }
?>
