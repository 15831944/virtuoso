<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2006 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--

  declare domain_id, account_id integer;
  declare sid, realm any;
  declare aRequest, aSession any;
  declare progressID, progressIndex any;

  sid := get_keyword ('sid', params, '');
  realm := get_keyword ('realm', params, '');

  aRequest := ENEWS.WA.validate_request(lines,0);
  aSession   := ENEWS.WA.session_restore(aRequest, params);
  domain_id := cast(get_keyword('domain_id', aSession, '0') as integer);
  account_id := cast(get_keyword('user_id', aSession, '0') as integer);
  progressID := cast(get_keyword('id', params, msec_time()) as varchar);

  declare exit handler for sqlstate '*' {
    registry_remove ('feed_' || progressID || '_index');
    registry_remove ('feed_' || progressID || '_action');
    return;
  };

  progressIndex := registry_get ('feed_' || progressID || '_index');

  -- dbg_obj_print(get_keyword ('mode', params, ''), progressID, progressIndex);
  -- reset
  if (get_keyword ('mode', params, '') = 'reset') {
    registry_remove ('feed_' || progressID || '_index');
    registry_remove ('feed_' || progressID || '_action');
    registry_set ('feed_' || progressID || '_index', '0');

    http_rewrite ();
    http_header ('Content-Type: text/xml\r\n');
    http('<root>');
    http(sprintf('<id>%s</id>', cast (progressID as varchar)));
    http('</root>');

    connection_set('stop_execution', '1');
    return (0);
  }

  -- stop
  if (get_keyword ('mode', params, '') = 'stop') {
    registry_set ('feed_' || progressID || '_action', 'stop');

    connection_set('stop_execution', '1');
    return (0);
  }

  -- state
  if (get_keyword ('mode', params, '') = 'state') {
    if (not (isinteger(progressIndex) and (progressIndex = 0))) {
    http_rewrite ();
    http_header ('Content-Type: text/xml\r\n');
    http('<root>');
      http(sprintf('<index>%s</index>', cast (progressIndex as varchar)));
    http('</root>');
    }

    connection_set('stop_execution','1');
    return (0);
  }

  -- exec
  if (get_keyword ('mode', params, '') = 'init') {

    -- flush and continue
    http_flush ();

    declare I, J, N integer;
    declare dataLength, folder_id integer;
    declare feed_id, folder_name varchar;
    declare data, rss, title, R, V any;

    R := cast(get_keyword('$_retrieve', params, '1') as integer);

    -- test folder names & count subscriptions
    j := length(params);
    V := vector();
    dataLength := 0;
    for (i := 0; i < j; i := i + 2) {
      if (params[i] like 'cb_item%') {
        dataLength := dataLength + 1;
        V := vector_concat(V, vector(params[i+1]));
      }
    }

    -- dbg_obj_print('start: ', dataLength, now());
    -- exec subscriptions
    data := vector('rss', null, 'title', null, 'home', null, 'format', null, 'lang', null, 'type', 'long');
    for (i := 0; i < dataLength; i := i + 1) {
      if  (cast(registry_get ('feed_' || progressID || '_action') as varchar) = 'stop')
        goto _stop;

      commit work;
      registry_set('feed_' || progressID || '_index', cast ((i + 1) as varchar));

      N := V[i];

      rss := get_keyword ('$_rss_' || N, params, '');
      if (rss <> '') {
        title   := get_keyword ('$_title_'  || N, params);

        aset(data, 1, rss);
        aset(data, 3, title);
        aset(data, 5, get_keyword ('$_home_'   || N, params));
        aset(data, 7, get_keyword ('$_format_' || N, params));
        aset(data, 9, get_keyword ('$_lang_'   || N, params));

          feed_id := ENEWS.WA.channel_create(data);

        folder_name := trim (get_keyword ('$_folder_name_' || N, params, ''));
        folder_id := cast (trim (get_keyword ('$_folder_id_'|| N, params, '')) as integer);
        ENEWS.WA.channel_domain (-1, domain_id, feed_id, ENEWS.WA.wide2utf(title), null, folder_name, folder_id);
        if ((ENEWS.WA.channel_feeds(feed_id) <> 0) or (not R))
          goto _next;
          {
          declare continue handler for sqlstate '*' {
            goto _next;
          };
              ENEWS.WA.feed_refresh(feed_id);
          }
        }
      _next:;
      }
  _stop:;

    -- update tags
    ENEWS.WA.tags_refresh(domain_id, account_id, 0);

    -- dbg_obj_print('end: ', dataLength, now());

    registry_remove ('feed_' || progressID || '_index');
    registry_remove ('feed_' || progressID || '_action');

    connection_set('stop_execution', '1');
    return (0);
  }
?>
