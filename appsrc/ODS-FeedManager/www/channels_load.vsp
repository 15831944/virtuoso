<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2006 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
?>
<?vsp
  declare domain_id, account_id integer;
  declare sid, realm any;
  declare aRequest, aSession any;
  declare process, completed, started any;

  sid := get_keyword ('sid', params, '');
  realm := get_keyword ('realm', params, '');

  aRequest := ENEWS.WA.validate_request(lines,0);
  aSession := ENEWS.WA.session_restore(aRequest, params, lines);
  domain_id := cast(get_keyword('domain_id', aSession, '0') as integer);
  account_id := cast(get_keyword('user_id', aSession, '0') as integer);

  process := cast(domain_id as varchar) || '_' || cast(account_id as varchar);

  declare exit handler for sqlstate '*' {
    registry_remove ('feed_' || process || '_completed');
    registry_remove ('feed_' || process || '_status');
    return;
    --dbg_obj_print(__SQL_MESSAGE);
  };

  completed := registry_get ('feed_' || process || '_completed');
  started := registry_get ('feed_' || process || '_started');

  -- reset
  if (get_keyword ('mode', params, '') = 'reset') {
    --dbg_obj_print('reset');

    registry_remove ('feed_' || process || '_completed');
    registry_remove ('feed_' || process || '_status');

    if (not(completed <> 0
        and cast (completed as integer) < 100
        and cast (completed as integer) > 0
        and started <> 0
        and cast (started as datetime ) > dateadd('minute', -120, now())))
    {
      registry_set ('feed_' || process || '_completed', '0');
      registry_set ('feed_' || process || '_started', datestring (now()));
    }

    http_rewrite ();
    http_header ('Content-Type: text/xml\r\n');
    http(sprintf('<message>%s</message>', cast (completed as varchar)));

    connection_set('stop_execution', '1');
    return (0);
  }

  -- status
  if (get_keyword ('mode', params, '') = 'state') {
    --dbg_obj_print('state', completed);

    http_rewrite ();
    http_header ('Content-Type: text/xml\r\n');
    if (isinteger(completed) and (completed = 0))
      completed := 100;
    http(sprintf('<message>%s</message>', cast (completed as varchar)));

    connection_set('stop_execution','1');
    return (0);
  }

  -- exec
  if (get_keyword ('mode', params, '') = 'init') {
    --dbg_obj_print('init', completed);

    if ( completed <> 0
         and cast (completed as integer) < 100
         and cast (completed as integer) > 0)
    {
      http_rewrite ();
      http_header ('Content-Type: text/html\r\n');
      http(sprintf('<message>%s</message>', cast (completed as varchar)));
      http_flush ();

      connection_set ('stop_execution', '1');
      return (0);
    }

    -- flush and continue
    http_flush ();

    declare I, N integer;
    declare dataIndex, dataLength integer;
    declare folder_id integer;
    declare feed_id, folder_name varchar;
    declare data any;

    -- test folder names
    for (i := 0; i < length(params); i := i + 2) {
      if (params[i] = 'cb_item') {
        N := atoi(params[i+1]);
        folder_name := trim(get_keyword(sprintf ('$_folder_name_%d', i), params, ''));
        if (folder_name <> '')
          if (not ENEWS.WA.folder_check_name(folder_name, 1)) {
            registry_set('feed_' || process || '_completed', '100');
            connection_set ('stop_execution', '1');
            return (0);
          }
      }
    }

    -- count subscriptions
    dataLength := 0;
    for (i := 0; i < length(params); i := i + 2)
      if (params[i] like 'cb_item%')
        dataLength := dataLength + 1;

    -- exec subscriptions
    dataIndex := 0;
    for (i := 0; i < length(params); i := i + 2) {
      if (params[i] like 'cb_item%') {
        commit work;
        dataIndex := dataIndex + 1;
        registry_set('feed_' || process || '_completed', cast (ceiling (((100.0 / dataLength) * dataIndex)) as varchar));

        N := cast(params[i+1] as integer);
        if (get_keyword(sprintf('$_rss_%d', N), params, '') <> '') {
          data := vector('title', get_keyword(sprintf('$_title_%d', N), params, ''),
                         'blog', get_keyword(sprintf('$_blog_%d', N), params, ''),
                         'rss', get_keyword(sprintf('$_rss_%d', N), params, ''),
                         'format', get_keyword(sprintf('$_format_%d', N), params, '')
                        );
          dbg_obj_print(N, get_keyword(sprintf('$_rss_%d', N), params, ''));
          feed_id := ENEWS.WA.channel_create(data);

          folder_name := trim(get_keyword(sprintf ('$_folder_name_%d', N), params, ''));
          folder_id := cast(trim(get_keyword(sprintf ('$_folder_id_%d', N), params, '')) as integer);
          ENEWS.WA.channel_domain(domain_id, feed_id, ENEWS.WA.wide2utf(get_keyword('title', data, '')), null, folder_name, folder_id);
          {
            declare exit handler for sqlstate '*' { goto _next; };
            if (ENEWS.WA.channel_feeds(feed_id) = 0)
              ENEWS.WA.feed_refresh(feed_id);
            ENEWS.WA.tags_refresh(domain_id, account_id, 0);
          }
        }
      _next:;
      }
    }
    registry_remove ('feed_' || process || '_completed');
    registry_remove ('feed_' || process || '_status');
    http_flush(1);

    connection_set('stop_execution', '1');
    return (0);
  }
?>
