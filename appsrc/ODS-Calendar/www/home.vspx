<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
  -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2007 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="sn" decor="template/template.vspx" style="template/template.xsl" fast-render="1" button-anchors="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">

  <v:method name="actionTest" arglist="">
    <![CDATA[
      declare tmp, kind, params any;

      params := self.vc_page.vc_event.ve_params;

      tmp := get_keyword ('id', params, '');
      if (tmp <> '') {
        self.v_id := cast (tmp as integer);
        if (self.v_id <> -1) {
          self.cAction := 'edit';
          if (self.account_role in ('public', 'guest'))
            self.cAction := 'view';
          kind := CAL.WA.event_kind (self.v_id);
          if ((kind = 'event') and (self.cScope in ('tasks', 'notes', 'search')))
            self.cScope := 'events';
          if (kind = 'task')
            self.cScope := 'tasks';
          if (kind = 'note')
            self.cScope := 'notes';
        }
      }

      tmp := get_keyword ('search', params, '');
      if (tmp <> '') {
        self.cScope := 'search';
        self.cSearch := null;
        CAL.WA.xml_set ('keywords', self.cSearch, tmp);
        tmp := get_keyword ('mode', params, 'browse');
        if (tmp = 'advanced')
          CAL.WA.xml_set('mode', self.cSearch, 'advanced');
        self.cAction := tmp;
      }

      tmp := get_keyword ('action', params, '');
      if (tmp <> '')
        self.cAction := tmp;
    ]]>
  </v:method>

  <v:method name="initData" arglist="">
    <![CDATA[
      self.cWeekStarts := CAL.WA.settings_weekStarts (self.settings);
      self.cTimeZone := CAL.WA.settings_timeZone (self.settings);
      self.cTimeFormat := CAL.WA.settings_timeFormat (self.settings);
      self.cDateFormat := CAL.WA.settings_dateFormat (self.settings);
      if (isnull (self.cScope))
        self.cScope := CAL.WA.settings_defaultView (self.settings);
      if (isnull (self.cDay))
        self.cDay := CAL.WA.dt_curdate (self.cTimeZone);
      if (isnull (self.cMonth)) {
        self.cMonth := CAL.WA.dt_BeginOfMonth (self.cDay);
        self.cnMonth := self.cMonth;
      }
      if (isnull (self.cnMonth))
        self.cnMonth := self.cMonth;
      if (self.cScope = 'day') {
        self.cStart := self.cDay;
        self.cEnd := self.cDay;
      }
      if (self.cScope = 'week') {
        self.cStart := cast (CAL.WA.dt_BeginOfWeek (self.cDay, self.cWeekStarts) as date);
        self.cEnd := cast (CAL.WA.dt_EndOfWeek (self.cDay, self.cWeekStarts) as date);
      }
      if (self.cScope = 'month') {
        self.cStart := cast (CAL.WA.dt_BeginOfWeek (CAL.WA.dt_BeginOfMonth (self.cDay), self.cWeekStarts) as date);
        self.cEnd := cast (CAL.WA.dt_EndOfWeek (CAL.WA.dt_EndOfMonth (self.cDay), self.cWeekStarts) as date);
      }
      self.cDays := self.initDays (self.cMonth);
      if (CAL.WA.dt_compare (self.cMonth, self.cnMonth)) {
        self.cnDays := self.cDays;
      } else {
        self.cnDays := self.initDays (self.cnMonth);
      }
    ]]>
  </v:method>

  <v:method name="initDays" arglist="inout cMonth datetime">
    <![CDATA[
      declare N, M, wStart, wCount, mStart, mLastday, dStart integer;
      declare cDays any;

      wStart := CAL.WA.dt_WeekDay (cMonth, self.cWeekStarts);
      mLastday := CAL.WA.dt_LastdayOfMonth (cMonth);
      wCount := 4;
      if (wStart <> 1)
        wCount := wCount + 1;
      if (mLastday - 28 - (7 - wStart) > 0)
        wCount := wCount + 1;
      mStart := 1;
      if (wCount = 6 )
        mStart := 0;
      dStart := mStart * 7 + wStart - 1;

      cDays := make_array (49, 'any');
      M := CAL.WA.dt_LastdayOfMonth (dateadd ('day', -1, cMonth));
      for (N := dStart - 1; N >= 0 ; N := N - 1) {
        cDays[N] := -M;
        M := M - 1;
      }
      M := 1;
      for (N := dStart; N < dStart + mLastday; N := N + 1) {
        cDays[N] := M;
        M := M + 1;
      }
      M := 1;
      for (N := dStart + mLastday; N < 49; N := N + 1) {
        cDays[N] := -M;
        M := M + 1;
      }
      return cDays;
    ]]>
  </v:method>

  <v:method name="showTimeZone" arglist="inout fValue any">
    <![CDATA[
      if (is_empty_or_null (fValue))
         return '';
      return sprintf ('GMT %s%02d:00', case when cast (fValue as integer) < 0 then '-' else '+' end,  abs(cast (fValue as integer)));
    ]]>
  </v:method>

  <v:method name="showEvent" arglist="in e_id integer, in e_event integer, in e_subject varchar, in e_start datetime, in e_end datetime, in e_repeat varchar, in e_repeat_offset integer, in e_reminder integer">
    <![CDATA[
      declare showDelete, S varchar;

      showDelete := '';
      if (self.account_role not in ('public', 'guest')) {
        S := 'null';
        if (not isnull (e_repeat_offset))
          S := cast (e_repeat_offset as varchar);
        showDelete :=  sprintf ('<span id="d_%d" unselectable="on" onclick="eDelete(event, this, %s)">[<span class="EV_delete">X</span>]</span> ', e_id, S);
      }
      if (e_event = 1) {
        http (sprintf ('<div id="e_%d" class="EV" unselectable="on" onclick="eEdit(this)">%s %s%s<span class="EV_subject">%s</span></div>', e_id, showDelete, self.repeatableImage (e_repeat), self.reminderImage (e_reminder), CAL.WA.show_subject (e_subject)));
      } else {
        http (sprintf ('<div id="e_%d" class="EV" unselectable="on" onclick="eEdit(this)">%s <span class="EV_time">%s-%s</span>%s%s<span class="EV_subject">%s</span></span></div>', e_id, showDelete, CAL.WA.dt_timestring (e_start), CAL.WA.dt_timestring (e_end), self.repeatableImage (e_repeat), self.reminderImage (e_reminder), CAL.WA.show_subject (e_subject)));
      }
    ]]>
  </v:method>

  <v:method name="showEventStart" arglist="in e_event integer, in e_time datetime">
    <![CDATA[
      if (not isnull (e_time)) {
        e_time := CAL.WA.event_gmt2user (e_time, self.cTimezone);
      if (e_event = 1) {
        http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s</span>', CAL.WA.dt_datestring (e_time, 'Y.M.D'), CAL.WA.dt_datestring (e_time, self.cDateFormat)));
      } else {
        http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s <span class="EVL_time">%s</span></span>', CAL.WA.dt_datestring (e_time, 'Y.M.D'), CAL.WA.dt_datestring (e_time, self.cDateFormat), CAL.WA.dt_timestring (e_time, self.cTimeFormat)));
      }
      }
    ]]>
  </v:method>

  <v:method name="showEventEnd" arglist="in e_event integer, in e_time datetime">
    <![CDATA[
      if (not isnull (e_time)) {
        e_time := CAL.WA.event_gmt2user (e_time, self.cTimezone);
      if (e_event = 1) {
        http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s</span>', CAL.WA.dt_datestring (e_time, 'Y.M.D'), CAL.WA.dt_datestring (e_time, self.cDateFormat)));
      } else {
        http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration"><span class="EVL_time">%s</span> %s</span>', CAL.WA.dt_datestring (e_time, 'Y.M.D'), CAL.WA.dt_timestring (e_time, self.cTimeFormat), CAL.WA.dt_datestring (e_time, self.cDateFormat)));
      }
      }
    ]]>
  </v:method>

  <v:method name="showEventDuration" arglist="in e_event integer, in e_start datetime, in e_end datetime">
    <![CDATA[
      if (isnull (e_start))
        return self.showEventEnd (e_event, e_end);
      e_start := CAL.WA.event_gmt2user (e_start, self.cTimezone);
      e_end := CAL.WA.event_gmt2user (e_end, self.cTimezone);
      if (CAL.WA.dt_compare (e_start, e_end)) {
        if (e_event = 1) {
          http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s</span>', CAL.WA.dt_datestring (e_start, 'Y.M.D'), CAL.WA.dt_datestring (e_start, self.cDateFormat)));
        } else {
          http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s <span class="EVL_time">%s</span> - <span class="EVL_time">%s</span></span>', CAL.WA.dt_datestring (e_start, 'Y.M.D'), CAL.WA.dt_datestring (e_start, self.cDateFormat), CAL.WA.dt_timestring (e_start, self.cTimeFormat), CAL.WA.dt_timestring (e_end, self.cTimeFormat)));
        }
      } else {
        if (e_event = 1) {
          http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s </span> - <span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s </span>', CAL.WA.dt_datestring (e_start, 'Y.M.D'), CAL.WA.dt_datestring (e_start, self.cDateFormat), CAL.WA.dt_datestring (e_end, 'Y.M.D'), CAL.WA.dt_datestring (e_end, self.cDateFormat)));
        } else {
          http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s <span class="EVL_time">%s</span></span> - <span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s <span class="EVL_time">%s</span>', CAL.WA.dt_datestring (e_start, 'Y.M.D'), CAL.WA.dt_datestring (e_start, self.cDateFormat), CAL.WA.dt_timestring (e_start, self.cTimeFormat), CAL.WA.dt_datestring (e_end, 'Y.M.D'), CAL.WA.dt_datestring (e_end, self.cDateFormat), CAL.WA.dt_timestring (e_end, self.cTimeFormat)));
        }
      }
    ]]>
  </v:method>

  <v:method name="showEventSubject" arglist="in e_id integer, in e_event integer, in e_subject varchar, in e_repeat varchar, in e_reminder varchar">
    <![CDATA[
      http (sprintf ('<span id="e_%d" unselectable="on" onclick="eEdit(this)" class="EVL EVL_subject">%s %s%s</span>', e_id, CAL.WA.show_subject (e_subject), self.repeatableImage (e_repeat), self.reminderImage (e_reminder)));
    ]]>
  </v:method>

  <v:method name="repeatableImage" arglist="in eRepeat any">
    <![CDATA[
      if (is_empty_or_null (eRepeat))
        return '';
      return '<img border="0" width="11" height="11" title="Repeatable" alt="Repeatable" src="image/repeatable.gif"/> ';
    ]]>
  </v:method>

  <v:method name="reminderImage" arglist="in eReminder any">
    <![CDATA[
      if (is_empty_or_null (eReminder))
        return '';
      return '<img border="0" width="11" height="11" title="Reminder" alt="Reminder" src="image/reminder.gif"/> ';
    ]]>
  </v:method>

  <v:method name="calcDate" arglist="in N integer">
    <![CDATA[
      if (self.cDays [N] > 0)
        return cast (dateadd ('day', self.cDays [N] - 1, self.cMonth) as date);
      if ((self.cDays [N] < 0) and (N < 24))
        return cast (dateadd ('day', abs (self.cDays [N]) - 1, dateadd ('month', -1, self.cMonth)) as date);
      if ((self.cDays [N] < 0) and (N > 24))
        return cast (dateadd ('day', abs (self.cDays [N]) - 1, dateadd ('month', 1, self.cMonth)) as date);
    ]]>
  </v:method>

  <v:method name="nCalcDate" arglist="in N integer">
    <![CDATA[
      if (self.cnDays [N] > 0)
        return cast (dateadd ('day', self.cnDays [N] - 1, self.cnMonth) as date);
      if ((self.cnDays [N] < 0) and (N < 24))
        return cast (dateadd ('day', abs (self.cnDays [N]) - 1, dateadd ('month', -1, self.cnMonth)) as date);
      if ((self.cnDays [N] < 0) and (N > 24))
        return cast (dateadd ('day', abs (self.cnDays [N]) - 1, dateadd ('month', 1, self.cnMonth)) as date);
    ]]>
  </v:method>

  <v:method name="repeatParam" arglist="in eRepeat varchar, in cRepeat varchar, in cRepeatParam integer, in cRepeatIndex integer">
    <![CDATA[
      if (eRepeat = cRepeat) {
        if (eRepeat = 'D1') {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
        }
        if (eRepeat = 'W1') {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return bit_and (cast (self.v_repeatParam2 as integer), power (2, cRepeatIndex));
        }
        if (eRepeat = 'M1') {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return self.v_repeatParam2;
        }
        if (eRepeat = 'M2') {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return self.v_repeatParam2;
          if (cRepeatParam = 3)
            return self.v_repeatParam3;
        }
        if (eRepeat = 'Y1') {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return self.v_repeatParam2;
        }
        if (eRepeat = 'Y2') {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return self.v_repeatParam2;
          if (cRepeatParam = 3)
            return self.v_repeatParam3;
        }
      }
      return '';
    ]]>
  </v:method>

  <v:method name="singleObjectName" arglist="in objectsName any">
    <![CDATA[
      if (objectsName = 'events')
        return 'Event';
      if (objectsName = 'tasks')
        return 'Task';
      if (objectsName = 'notes')
        return 'Note';
      return '';
    ]]>
  </v:method>

  <vm:pagetitle>Calendar</vm:pagetitle>
  <vm:pagewrapper>
    <vm:header>
      Calendar
    </vm:header>
    <vm:variables>
      <v:variable persist="0" name="cAction" type="varchar" default="'browse'" />
      <v:variable persist="0" name="cScope" type="varchar" default="null" />
      <v:variable persist="0" name="cSearch" type="any" default="null" />

      <v:variable persist="0" name="cDay" type="date" default="null" />
      <v:variable persist="0" name="cMonth" type="date" default="null" />
      <v:variable persist="0" name="cDays" type="any" default="null" />
      <v:variable persist="0" name="cStart" type="date" default="null" />
      <v:variable persist="0" name="cEnd" type="date" default="null" />

      <v:variable persist="0" name="cnMonth" type="date" default="null" />
      <v:variable persist="0" name="cnDays" type="any" default="null" />

      <v:variable name="cLabels" type="integer" default="1" />
      <v:variable name="cChars" type="integer" default="60" />
      <v:variable name="cWeekStarts" type="varchar" default="'m'" />
      <v:variable name="cTimeZone" type="integer" default="0" />
      <v:variable name="cTimeFormat" type="varchar" default="'e'" />
      <v:variable name="cDateFormat" type="varchar" default="'dd.MM.yyyy'" />

      <v:variable name="icStep" type="varchar" default="''" />
      <v:variable name="icSource" type="any" default="-1" />
      <v:variable name="icType" type="any" default="-1" />

      <v:variable persist="temp" name="on_date" type="integer" default="null" />
      <v:variable persist="temp" name="on_time" type="integer" default="null" />
      <v:variable name="v_id" type="any" default="-1" />
      <v:variable name="v_subject" type="varchar" default="''"/>
      <v:variable name="v_description" type="varchar" default="''"/>
      <v:variable name="v_location" type="varchar" default="''"/>
      <v:variable name="v_event" type="integer" default="0"/>
      <v:variable name="v_eventStart" type="datetime" default="null"/>
      <v:variable name="v_eventStart_date" type="date" default="null"/>
      <v:variable name="v_eventStart_time" type="time" default="null"/>
      <v:variable name="v_eventEnd" type="datetime" default="null"/>
      <v:variable name="v_eventEnd_date" type="date" default="null"/>
      <v:variable name="v_eventEnd_time" type="time" default="null"/>
      <v:variable name="v_tags" type="varchar" default="''"/>
      <v:variable name="v_repeat" type="varchar" default="''"/>
      <v:variable name="v_repeatParam1" type="integer" default="0"/>
      <v:variable name="v_repeatParam2" type="integer" default="0"/>
      <v:variable name="v_repeatParam3" type="integer" default="0"/>
      <v:variable name="v_repeatUntil" type="date" default="null"/>
      <v:variable name="v_reminder" type="integer" default="600"/>

      <v:variable name="v_priority" type="integer" default="3"/>
      <v:variable name="v_complete" type="integer" default="0"/>
      <v:variable name="v_status" type="varchar" default="''"/>

      <v:variable name="v_tabNo" param-name="tabNo" type="varchar" default="1"/>
    </vm:variables>
    <vm:pagebody>
      <v:before-data-bind>
        <![CDATA[
          self.actionTest ();
          self.initData ();
        ]]>
      </v:before-data-bind>
      <?vsp
        if (0)
        {
      ?>
          <v:button name="command" action="simple" value="Submit">
            <v:on-post>
              <![CDATA[
                declare N, cCommand, cParams, kind any;

                cCommand := get_keyword ('select', e.ve_params, '');
                if (cCommand <> '') {
                  if (cCommand = 'create') {
                    self.cAction := 'create';
                    if (get_keyword ('onDate', e.ve_params, '') <> '')
                      self.on_date := cast (get_keyword ('onDate', e.ve_params) as integer);
                    if (get_keyword ('onTime', e.ve_params, '') <> '')
                      self.on_time := cast (get_keyword ('onTime', e.ve_params) as integer);
                  } else {
                    cParams := split_and_decode(cCommand, 0,'\0\0_');
                    if (length (cParams) > 2) {
                      if (cParams[1] = 'month') {
                        if (atoi (cParams[2]) = -1)
                          self.cnMonth := dateadd ('month', -1, self.cnMonth);
                        if (atoi (cParams[2]) = 1)
                          self.cnMonth := dateadd ('month', 1, self.cnMonth);
                        if (atoi (cParams[2]) = 0) {
                          if ((self.cDay < self.cMonth) or (self.cDay > CAL.WA.dt_EndOfMonth (self.cMonth)))
                            if (dayofmonth (self.cDay) > CAL.WA.dt_LastDayOfMonth (dateadd ('month', 1, self.cMonth))) {
                              self.cDay := CAL.WA.dt_LastDayOfMonth (dateadd ('month', 1, self.cMonth));
                            } else {
                              self.cDay := dateadd ('month', 1, self.cDay);
                            }
                          self.cScope := 'month';
                          self.cnMonth := null;
                        }
                      }
                      if (cParams[1] = 'day') {
                        N := atoi (cParams[2]) * 7 + atoi (cParams[3]);
                        self.cDay := self.calcDate (N);
                        self.cMonth := null;
                        if ((cParams[0] = 'd') or ((self.cDay >= self.cStart) and (self.cDay <= self.cEnd)) or (self.cScope = 'events'))
                          self.cScope := 'day';
                      }
                      self.cAction := 'browse';
                      self.initData ();
                    }
                  }
                }
                cCommand := get_keyword ('date', e.ve_params, '');
                if (cCommand <> '') {
                  cParams := split_and_decode(cCommand, 0,'\0\0_');
                  if (length (cParams) > 1) {
                    self.cDay := stringdate (cParams [1]);
                    self.cMonth := null;
                    self.cAction := 'browse';
                    self.cScope := 'day';
                  }
                }

                cCommand := get_keyword ('edit', e.ve_params, '');
                if (cCommand <> '') {
                  cParams := split_and_decode(cCommand, 0,'\0\0_');
                  if (length (cParams) > 1) {
                    self.v_id := cast (cParams [1] as integer);
                    self.cAction := 'edit';
                    if (self.account_role in ('public', 'guest'))
                      self.cAction := 'view';
                    kind := CAL.WA.event_kind (self.v_id);
                    if ((kind = 'event') and (self.cScope in ('tasks', 'notes', 'search')))
                      self.cScope := 'events';
                    if (kind = 'task')
                      self.cScope := 'tasks';
                    if (kind = 'note')
                      self.cScope := 'notes';
                  }
                }

                cCommand := get_keyword ('delete', e.ve_params, '');
                if (cCommand <> '') {
                  cParams := split_and_decode(cCommand, 0,'\0\0_');
                  if (length (cParams) > 1)
                    CAL.WA.event_delete (cast (cParams [1] as integer), self.domain_id, get_keyword ('onOffset', e.ve_params));
                }

                cCommand := get_keyword ('exchange', e.ve_params, '');
                if (cCommand <> '') {
                  if (cCommand = 'import') {
                  self.cAction := cCommand;
                    self.icStep := '1';
                    self.icSource := -1;
                    self.icType := 0;
                    self.v_tags := '';
                  }
                  if (cCommand = 'export') {
                    http_rewrite ();
                    http_request_status ('HTTP/1.1 200 OK');
                    http_header ('Content-Type: application/x-download\r\n');
                    http_header ('Content-Disposition: inline; filename="calendar.ics"\r\n');
                    http (CAL.WA.export_vcal (self.domain_id, self.cTimeZone));
                    http_flush ();
                  }
                }

                self.vc_data_bind(e);
               ]]>
             </v:on-post>
          </v:button>
      <?vsp
        }
      ?>

      <v:template type="simple" enabled="--case when (self.cAction in ('browse', 'advanced')) then 1 else 0 end">
        <v:template type="simple" enabled="--case when (self.cAction = 'advanced') then 1 else 0 end">
          <div class="new-form-body">
            <table cellspacing="0">
              <tr>
                <th width="30%">
                  <v:label for="" value="Space delimited keyword list" />
                </th>
                <td>
                  <v:text name="s_keywords" value="--CAL.WA.xml_get ('keywords', self.cSearch)" xhtml_class="textbox" xhtml_size="60"/>
                </td>
              </tr>
            </table>
          </div>
          <div class="new-form-footer" style="margin: 0;   border-top: 0;">
            <v:button action="simple" value="Search" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.cSearch := null;
                  CAL.WA.xml_set ('keywords', self.cSearch, self.s_keywords.ufl_value);
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            <v:button action="simple" value="Cancel" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.cAction := 'browse';
                  self.vc_data_bind (e);
                ]]>
              </v:on-post>
            </v:button>
          </div>
        </v:template>

        <table cellspacing="0" style="width: 100%;">
          <tr style="height: 18px;">
            <td>
              <v:button action="simple" style="url" value="Day" xhtml_class="-- case when (self.cScope = 'day') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Day">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'day';
                    self.cAction := 'browse';
                    self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Week" xhtml_class="-- case when (self.cScope = 'week') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Week">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'week';
                    self.cAction := 'browse';
                    self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Month" xhtml_class="-- case when (self.cScope = 'month') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Month">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'month';
                    self.cAction := 'browse';
                    self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Events" xhtml_class="-- case when (self.cScope = 'events') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Event List">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'events';
                    self.cAction := 'browse';
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Tasks" xhtml_class="-- case when (self.cScope = 'tasks') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Task List">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'tasks';
                    self.cAction := 'browse';
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Notes" xhtml_class="-- case when (self.cScope = 'notes') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Note List">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'notes';
                    self.cAction := 'browse';
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <vm:if test="not isnull (self.cSearch)">
                <v:button action="simple" style="url" value="Search" xhtml_class="-- case when (self.cScope = 'search') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Search List">
                  <v:on-post>
                    <![CDATA[
                      self.cScope := 'search';
                      self.cAction := CAL.WA.xml_get ('mode', self.cSearch, 'browse');
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              </vm:if>
            </td>
            <vm:if test="self.cScope not in ('events', 'tasks', 'notes', 'search')">
            <td align="right">
              <span class="CE_name">
                <?vsp
                  if (self.cScope = 'day')
                    http (sprintf ('%s %d, %d', monthname (self.cDay), dayofmonth (self.cDay), year (self.cDay)));

                  if (self.cScope = 'week') {
                    if (year (self.cStart) <> year (self.cEnd)) {
                      http (sprintf ('%s %d, %d - %s %d, %d', monthname (self.cStart), dayofmonth (self.cStart), year (self.cStart), monthname (self.cEnd), dayofmonth (self.cEnd), year (self.cEnd)));
                    } else {
                      if (month (self.cStart) <> month (self.cEnd)) {
                        http (sprintf ('%s %d - %s %d, %d', monthname (self.cStart), dayofmonth (self.cStart), monthname (self.cEnd), dayofmonth (self.cEnd), year (self.cEnd)));
                      } else {
                        http (sprintf ('%s %d - %d, %d', monthname (self.cStart), dayofmonth (self.cStart), dayofmonth (self.cEnd), year (self.cEnd)));
                      }
                    }
                  }

                  if (self.cScope = 'month')
                    http (sprintf ('%s %d', monthname (self.cMonth), year (self.cMonth)));

                ?>
              </span>
              <v:button action="simple" style="url" value="<" xhtml_class="calendar_button" xhtml_alt="Previous">
                <v:on-post>
                  <![CDATA[
                    if (self.cScope = 'day')
                      self.cDay := dateadd ('day', -1, self.cDay);
                    if (self.cScope = 'week')
                      self.cDay := dateadd ('day', -7, self.cDay);
                    if (self.cScope = 'month')
                      self.cDay := dateadd ('month', -1, self.cDay);
                      self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value=">" xhtml_class="calendar_button" xhtml_alt="Next">
                <v:on-post>
                  <![CDATA[
                    if (self.cScope = 'day')
                      self.cDay := dateadd ('day', 1, self.cDay);
                    if (self.cScope = 'week')
                      self.cDay := dateadd ('day', 7, self.cDay);
                    if (self.cScope = 'month')
                      if (dayofmonth (self.cDay) > CAL.WA.dt_LastDayOfMonth (dateadd ('month', 1, self.cMonth))) {
                        self.cDay := CAL.WA.dt_LastDayOfMonth (dateadd ('month', 1, self.cMonth));
                      } else {
                        self.cDay := dateadd ('month', 1, self.cDay);
                      }
                      self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Today" xhtml_class="calendar_button" xhtml_alt="Today">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'day';
                    self.cDay := CAL.WA.dt_curdate (self.cTimeZone);
                      self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
            </td>
             </vm:if>
          </tr>
        </table>
        <div class="CE_container">
          <vm:if test="(self.cScope not in ('day', 'week', 'month')) and (self.account_role not in ('public', 'guest'))">
            <vm:if test="(self.cScope <> 'search')">
            <v:button value="--'New ' || self.singleObjectName (self.cScope)" action="simple" xhtml_class="button" xhtml_style="margin-bottom: 5px;">
              <v:on-post>
                <![CDATA[
                  self.cAction := 'create';
          		    self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            </vm:if>
            <v:button value="Delete" action="simple" xhtml_onclick="--'javascript: return confirmAction(\'Are you sure that you want to delete selected items?\', document.F1, \'cb_\', \'No items were selected for deletion.\');'" xhtml_class="button" xhtml_style="margin-bottom: 5px;">
              <v:on-post>
                <![CDATA[
                  declare N integer;

                  for (N := 0; N < length(e.ve_params); N := N + 4)
                    if (e.ve_params[N] = 'cb_item')
                      CAL.WA.event_delete(cast (e.ve_params[N+1] as integer), self.domain_id);

          		    self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
          </vm:if>
          <div id="content" class="CE_main">
            <vm:if test="self.cScope in ('day', 'week', 'month')">
              <table class="CE_table" cellspacing="0">
                <?vsp
                  declare N, M, D, W integer;
                  declare isEof, isFetched, hasEvents integer;
                  declare pHour, pMinute integer;
                  declare dt date;
                  declare S, C varchar;

                  if (self.cScope = 'day') {
                    for (M := 0; M < 48; M := M + 1)
                      if (self.cDays[M] = dayofmonth (self.cDay))
                        goto _break;
                  _break:;
                    declare cr static cursor for
                      select distinct rs.*
                        from CAL.WA.events_forPeriod (rs0, rs1, rs2, rs3)(e_id integer, e_event integer, e_subject varchar, e_start datetime, e_end datetime, e_repeat varchar, e_repeat_offset integer, e_reminder integer) rs
                       where rs0 = self.domain_id
                         and rs1 = self.cDay
                         and rs2 = self.cDay
                         and rs3 = self.cTimeZone
                       order by e_event DESC, e_start;

                    declare e_time, e_id, e_event, e_start, e_end, e_subject, e_repeat, e_repeat_offset, e_reminder any;

                    pHour := 25;
                    isEof := 0;
                    isFetched := 0;
                    hasEvents := 0;
                    e_event := 1;
                    declare continue handler for not found {
                      pHour := 25;
                      isEof := 1;
                    };
                    open cr;

                    while ((not isEof) and (e_event = 1)) {
                      fetch cr next into e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder;
                      if (isEof)
                         goto _skip;
                      CAL.WA.dt_timeDecode (e_start, pHour, pMinute);
                      isFetched := 1;
                      if (e_event = 0)
                         goto _skip;
                      if (hasEvents = 0) {
                        http ('<tr class="CE_row">');
                        http ('<th class="CE_cell CE_cell_time">&nbsp;</th>');
                        http ('<td class="CE_cell">');
                        hasEvents := 1;
                      }
                      self.showEvent (e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder);
                    }
                  _skip:;
                    if (hasEvents = 1) {
                      http ('</td>');
                      http ('</tr>');
                    }

                    for (N := 0; N < 48; N := N + 1) {
                      if ((not isEof) and (not isFetched)) {
                        fetch cr next into e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder;
                        if (isEof)
                          goto _skip2;
                        CAL.WA.dt_timeDecode (e_start, pHour, pMinute);
                        isFetched := 1;
                      }
                    _skip2:;
                      http ('<tr class="CE_row">');
                        if (mod (N, 2) = 0)
                          http (sprintf ('<th class="CE_cell CE_cell_time %s" rowspan="2">%s</th>', case when (N = 46) then 'CE_cell_bottom' else '' end, CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N/2, 0), self.cTimeFormat)));
                        C := '';
                        if (CAL.WA.dt_compare (self.cDay, curdate ()))
                          C := C || ' CE_cell_today';
                        http (sprintf ('<td class="CE_cell_pointer CE_cell CE_cell_odd%s" unselectable="on" onclick="cNewEvent(null, %d)">', C, N*30));
                        hasEvents := 0;
                      _event:;
                        if ((pHour = N/2) and (pMinute = mod (N, 2)*30)) {
                          hasEvents := 1;
                          isFetched := 0;
                          self.showEvent (e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder);
                          if ((not isEof) and (not isFetched)) {
                            fetch cr next into e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder;
                            if (isEof)
                              goto _skip3;
                            CAL.WA.dt_timeDecode (e_start, pHour, pMinute);
                            isFetched := 1;
                            goto _event;
                          }
                        }
                      _skip3:;
                        if (not hasEvents)
                          http ('&nbsp;');
                        http ('</td>');
                      http ('</tr>');
                    }
                    close cr;
                  }

                  if (self.cScope = 'week') {
                    for (N := 0; N < length (self.cDays); N := N + 1) {
                      W := floor (N / 7);
                      D := mod (N, 7);
                      dt := self.calcDate (N);
                      if ((dt >= self.cStart) and (dt <= self.cEnd)) {
                        http ('<tr class="CE_row_week">');
                          C := '';
                          if (mod (N, 7) = 6)
                            C := C || ' CE_cell_bottom';
                          http (sprintf ('<td class="CE_cell CE_cell_week CE_cell_middle%s">', C));
                          C := '';
                          if (self.cDays[N] > 0)
                            C := C || ' C_onmonth';
                          if (self.cDays[N] < 0)
                            C := C || ' C_offmonth';
                          if (D < 5)
                            C := C || ' C_weekday2';
                          if (D >= 5)
                            C := C || ' C_weekend';
                          if (CAL.WA.dt_compare (dt, curdate ()))
                            C := C || ' C_today';
                          http (sprintf ('<div unselectable="on" onclick="cSelect(this)" id="d_day_%d_%d" class="CE_cell_header%s">%s %d</div>', W, D, C, CAL.WA.dt_WeekName (dt, self.cWeekStarts, 0), abs (self.cDays [N])));
                          http ('&nbsp;');
                          http ('</td>');
                          C := '';
                          if (CAL.WA.dt_compare (dt, curdate ()))
                            C := C || ' CE_cell_today';
                          http (sprintf ('<td class="CE_cell CE_cell_pointer%s" unselectable="on" onclick="cNewEvent(%d, -1)">', C, N));
                          hasEvents := 0;
                          for (select distinct rs.*
                                 from CAL.WA.events_forPeriod (rs0, rs1, rs2, rs3)(e_id integer, e_event integer, e_subject varchar, e_start datetime, e_end datetime, e_repeat varchar, e_repeat_offset integer, e_reminder integer) rs
                                where rs0 = self.domain_id
                                  and rs1 = dt
                                  and rs2 = dt
                                  and rs3 = self.cTimeZone
                                order by e_event DESC, e_start) do
                          {
                            hasEvents := 1;
                            self.showEvent (e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder);
                          }
                          if (not hasEvents)
                            http ('&nbsp;');
                          http ('</td>');
                        http ('</tr>');
                      }
                    }
                  }

                  if (self.cScope = 'month') {
                    for (N := 0; N < length (self.cDays); N := N + 1) {
                      W := floor (N / 7);
                      D := mod (N, 7);
                      dt := self.calcDate (N);
                      if ((dt >= self.cStart) and (dt <= self.cEnd)) {
                        if (D = 0)
                          http ('<tr class="CE_row_month">');
                        C := '';
                        if (D < 6)
                          C := C || ' CE_cell_middle';
                        if (CAL.WA.dt_compare (dt, curdate ()))
                          C := C || ' CE_cell_today';
                        http (sprintf ('<td width="%s" class="CE_cell CE_cell_pointer %s" unselectable="on" onclick="cNewEvent(%d, -1)">', '14.2857%', C, N));
                        C := '';
                        if (self.cDays[N] > 0)
                          C := C || ' C_onmonth';
                        if (self.cDays[N] < 0)
                          C := C || ' C_offmonth';
                        if (D < 5)
                          C := C || ' C_weekday2';
                        if (D >= 5)
                          C := C || ' C_weekend';
                        if (CAL.WA.dt_compare (dt, curdate ()))
                          C := C || ' C_today';
                        http (sprintf ('<div unselectable="on" onclick="cSelect(this)" id="d_day_%d_%d" class="CE_cell_header%s">%d</div>', W, D, C, abs (self.cDays [N])));
                        for (select distinct rs.*
                               from CAL.WA.events_forPeriod (rs0, rs1, rs2, rs3)(e_id integer, e_event integer, e_subject varchar, e_start datetime, e_end datetime, e_repeat varchar, e_repeat_offset integer, e_reminder integer) rs
                              where rs0 = self.domain_id
                                and rs1 = dt
                                and rs2 = dt
                                and rs3 = self.cTimeZone
                              order by e_event DESC, e_start) do
                        {
                          self.showEvent (e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder);
                        }
                        http ('</td>');
                        if (D = 6)
                          http ('</tr>');
                      }
                    }
                  }
                ?>
              </table>
            </vm:if>
            <vm:if test="self.cScope = 'events'">
              <v:data-source name="dsrc" expression-type="sql" nrows="0" initial-offset="0">
                <v:before-data-bind>
                  <![CDATA[
                    control.ds_parameters := null;
                    control.ds_sql := sprintf ('select * from CAL.WA.EVENTS where E_DOMAIN_ID = %d and E_KIND = 0 order by E_EVENT_START', self.domain_id);
                  ]]>
                </v:before-data-bind>
              </v:data-source>

              <v:data-set name="ds" data-source="self.dsrc" scrollable="1">

                <v:template name="ds_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                  <table id="events" style="width: 100%; backgrownd-color: #FFF;" cellspacing="0">
                    <thead class="sortHeader">
                      <tr>
                        <vm:if test="self.account_role not in ('public', 'guest')">
                          <th class="checkbox" width="1%">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                          </th>
                        </vm:if>
                        <th width="10%">
                          Duration
                        </th>
                        <th>
                          Subject
                        </th>
                      </tr>
                    </thead>
                  </table>
                </v:template>

                <v:template name="ds_repeat" type="repeat" name-to-remove="" set-to-remove="">

                  <v:template name="ds_browse" type="browse" name-to-remove="table" set-to-remove="both">
                    <table>
                      <tr>
                        <vm:if test="self.account_role not in ('public', 'guest')">
                          <td align="center" valign="top">
                            <input type="checkbox" name="cb_item" value="<?V (control as vspx_row_template).te_column_value('E_ID') ?>" onclick="selectCheck(this, 'cb_item')"/>
                          </td>
                        </vm:if>
                        <td nowrap="nowrap">
                          <?vsp
                            self.showEventDuration ((control as vspx_row_template).te_column_value('E_EVENT'),
                                                    (control as vspx_row_template).te_column_value('E_EVENT_START'),
                                                    (control as vspx_row_template).te_column_value('E_EVENT_END'));
                          ?>
                        </td>
                        <td>
                          <?vsp
                            self.showEventSubject ((control as vspx_row_template).te_column_value('E_ID'),
                                                   (control as vspx_row_template).te_column_value('E_EVENT'),
                                                   (control as vspx_row_template).te_column_value('E_SUBJECT'),
                                                   (control as vspx_row_template).te_column_value('E_REPEAT'),
                                                   (control as vspx_row_template).te_column_value('E_REMINDER'));
                          ?>
                        </td>
                      </tr>
                    </table>
                  </v:template>

                </v:template>

                <v:template name="ds_footer" type="simple" name-to-remove="table" set-to-remove="top">
                  <table>
                  </table>
                </v:template>

              </v:data-set>
            </vm:if>

            <vm:if test="self.cScope = 'tasks'">
              <v:data-source name="ds1rc" expression-type="sql" nrows="0" initial-offset="0">
                <v:before-data-bind>
                  <![CDATA[
                    control.ds_parameters := null;
                    control.ds_sql := sprintf ('select * from CAL.WA.EVENTS where E_DOMAIN_ID = %d and E_KIND = 1 order by E_EVENT_START', self.domain_id);
                  ]]>
                </v:before-data-bind>
              </v:data-source>

              <v:data-set name="ds1" data-source="self.ds1rc" scrollable="1">

                <v:template name="ds1_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                  <table id="events" style="width: 100%; backgrownd-color: #FFF;" cellspacing="0">
                    <thead class="sortHeader">
                      <tr>
                        <vm:if test="self.account_role not in ('public', 'guest')">
                          <th class="checkbox" width="1%">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                          </th>
                        </vm:if>
                        <th width="5%">
                          Start
                        </th>
                        <th width="5%">
                          Due
                        </th>
                        <th>
                          Subject
                        </th>
                        <th width="3%">
                          Status
                        </th>
                        <th width="1%">
                          Updated
                        </th>
                      </tr>
                    </thead>
                  </table>
                </v:template>

                <v:template name="ds1_repeat" type="repeat" name-to-remove="" set-to-remove="">

                  <v:template name="ds1_browse" type="browse" name-to-remove="table" set-to-remove="both">
                    <table>
                      <tr>
                        <vm:if test="self.account_role not in ('public', 'guest')">
                          <td align="center" valign="top">
                            <input type="checkbox" name="cb_item" value="<?V (control as vspx_row_template).te_column_value('E_ID') ?>" onclick="selectCheck(this, 'cb_item')"/>
                          </td>
                        </vm:if>
                        <td nowrap="nowrap">
                          <?vsp
                            self.showEventStart ((control as vspx_row_template).te_column_value('E_EVENT'),
                                                 (control as vspx_row_template).te_column_value('E_EVENT_START'));
                          ?>
                        </td>
                        <td nowrap="nowrap">
                          <?vsp
                            self.showEventEnd ((control as vspx_row_template).te_column_value('E_EVENT'),
                                               (control as vspx_row_template).te_column_value('E_EVENT_END'));
                          ?>
                        </td>
                        <td>
                          <?vsp
                            self.showEventSubject ((control as vspx_row_template).te_column_value('E_ID'),
                                                   (control as vspx_row_template).te_column_value('E_EVENT'),
                                                   (control as vspx_row_template).te_column_value('E_SUBJECT'),
                                                   (control as vspx_row_template).te_column_value('E_REPEAT'),
                                                   (control as vspx_row_template).te_column_value('E_REMINDER'));
                          ?>
                        </td>
                        <td nowrap="nowrap">
                          <v:label value="--(control.vc_parent as vspx_row_template).te_column_value('E_STATUS')" />
                        </td>
                        <td nowrap="nowrap">
                          <v:label value="--CAL.WA.dt_datestring ((control.vc_parent as vspx_row_template).te_column_value('E_UPDATED'), self.cDateFormat)" />
                        </td>
                      </tr>
                    </table>
                  </v:template>

                </v:template>

                <v:template name="ds1_footer" type="simple" name-to-remove="table" set-to-remove="top">
                  <table>
                  </table>
                </v:template>

              </v:data-set>
            </vm:if>

            <vm:if test="self.cScope = 'notes'">
              <v:data-source name="ds2rc" expression-type="sql" nrows="0" initial-offset="0">
                <v:before-data-bind>
                              <![CDATA[
                    control.ds_parameters := null;
                    control.ds_sql := sprintf ('select * from CAL.WA.EVENTS where E_DOMAIN_ID = %d and E_KIND = 2 order by E_EVENT_START', self.domain_id);
                              ]]>
                </v:before-data-bind>
              </v:data-source>

              <v:data-set name="ds2" data-source="self.ds2rc" scrollable="1">

                <v:template name="ds2_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                  <table id="events" style="width: 100%; backgrownd-color: #FFF;" cellspacing="0">
                    <thead class="sortHeader">
                      <tr>
                        <vm:if test="self.account_role not in ('public', 'guest')">
                          <th class="checkbox" width="1%">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                          </th>
                        </vm:if>
                        <th>
                          Subject
                        </th>
                        <th width="1%">
                          Updated
                        </th>
                      </tr>
                    </thead>
                  </table>
                </v:template>

                <v:template name="ds2_repeat" type="repeat" name-to-remove="" set-to-remove="">

                  <v:template name="ds2_browse" type="browse" name-to-remove="table" set-to-remove="both">
                    <table>
                      <tr>
                        <vm:if test="self.account_role not in ('public', 'guest')">
                          <td align="center" valign="top">
                            <input type="checkbox" name="cb_item" value="<?V (control as vspx_row_template).te_column_value('E_ID') ?>" onclick="selectCheck(this, 'cb_item')"/>
                          </td>
                        </vm:if>
                        <td style="padding: 0 2px 0 2px;">
                          <?vsp
                            self.showEventSubject ((control as vspx_row_template).te_column_value('E_ID'),
                                                   (control as vspx_row_template).te_column_value('E_EVENT'),
                                                   (control as vspx_row_template).te_column_value('E_SUBJECT'),
                                                   (control as vspx_row_template).te_column_value('E_REPEAT'),
                                                   (control as vspx_row_template).te_column_value('E_REMINDER'));
                          ?>
                        </td>
                        <td nowrap="nowrap" style="padding: 0 2px 0 2px;">
                          <v:label value="--CAL.WA.dt_datestring ((control.vc_parent as vspx_row_template).te_column_value('E_UPDATED'), self.cDateFormat)" />
                        </td>
                      </tr>
                    </table>
                  </v:template>

                </v:template>

                <v:template name="ds2_footer" type="simple" name-to-remove="table" set-to-remove="top">
                  <table>
                  </table>
                </v:template>

              </v:data-set>
            </vm:if>

            <vm:if test="self.cScope = 'search'">
              <v:data-source name="ds3rc" expression-type="sql" nrows="0" initial-offset="0">
                <v:before-data-bind>
                  <![CDATA[
                    control.ds_parameters := null;
                    control.ds_sql := CAL.WA.search_sql (self.domain_id, self.account_id, self.cSearch);
                  ]]>
                </v:before-data-bind>
              </v:data-source>

              <v:data-set name="ds3" data-source="self.ds3rc" scrollable="1">

                <v:template name="ds3_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                  <table id="events" style="width: 100%; backgrownd-color: #FFF;" cellspacing="0">
                    <thead class="sortHeader">
                      <tr>
                        <vm:if test="self.account_role not in ('public', 'guest')">
                          <th class="checkbox" width="1%">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                          </th>
                        </vm:if>
                        <th width="1%">
                          Type
                        </th>
                        <th>
                          Item
                        </th>
                        <th width="1%">
                          Updated
                        </th>
                      </tr>
                    </thead>
                  </table>
                </v:template>

                <v:template name="ds3_repeat" type="repeat" name-to-remove="" set-to-remove="">

                  <v:template name="ds3_browse" type="browse" name-to-remove="table" set-to-remove="both">
                    <table>
                      <tr>
                        <vm:if test="self.account_role not in ('public', 'guest')">
                          <td align="center" valign="top">
                            <input type="checkbox" name="cb_item" value="<?V (control as vspx_row_template).te_column_value('E_ID') ?>" onclick="selectCheck(this, 'cb_item')"/>
                          </td>
                        </vm:if>
                        <td style="padding: 0 2px 0 2px;">
                          <?vsp
                            declare tmp any;

                            tmp := (control as vspx_row_template).te_column_value('E_KIND');
                            if (tmp = 0)
                              http ('Event');
                            if (tmp = 1)
                              http ('Task');
                            if (tmp = 2)
                              http ('Note');
                          ?>
                        </td>
                        <td style="padding: 0 2px 0 2px;">
                          <?vsp
                            self.showEventDuration ((control as vspx_row_template).te_column_value('E_EVENT'),
                                                    (control as vspx_row_template).te_column_value('E_EVENT_START'),
                                                    (control as vspx_row_template).te_column_value('E_EVENT_END'));
                            if ((control as vspx_row_template).te_column_value('E_KIND') <> 2)
                              http ('&nbsp;');
                            self.showEventSubject ((control as vspx_row_template).te_column_value('E_ID'),
                                                   (control as vspx_row_template).te_column_value('E_EVENT'),
                                                   (control as vspx_row_template).te_column_value('E_SUBJECT'),
                                                   (control as vspx_row_template).te_column_value('E_REPEAT'),
                                                   (control as vspx_row_template).te_column_value('E_REMINDER'));
                          ?>
                        </td>
                        <td nowrap="nowrap" style="padding: 0 2px 0 2px;">
                          <v:label value="--CAL.WA.dt_datestring ((control.vc_parent as vspx_row_template).te_column_value('E_UPDATED'), self.cDateFormat)" />
                        </td>
                      </tr>
                    </table>
                  </v:template>

                </v:template>

                <v:template name="ds3_footer" type="simple" name-to-remove="table" set-to-remove="top">
                  <table>
                  </table>
                </v:template>

              </v:data-set>
            </vm:if>
              <script type="text/javascript">
                <![CDATA[
                  coloriseTable('events');
                ]]>
              </script>
          </div>
        </div>
      </v:template>

      <vm:if test="self.cAction in ('create', 'edit', 'view')">
        <v:text name="timeZone" xhtml_id="timeZone" type="hidden" value="--self.cTimeZone" />
        <v:text name="timeFormat" xhtml_id="timeFormat" type="hidden" value="--self.cTimeFormat" />
        <v:text name="dateFormat" xhtml_id="dateFormat" type="hidden" value="--self.cDateFormat" />
      </vm:if>

      <v:template type="simple" enabled="--case when ((self.cScope not in ('tasks', 'notes')) and (self.cAction in ('create', 'edit', 'view'))) then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            declare params any;
            params := self.vc_page.vc_event.ve_params;

            if (isnull (get_keyword ('e_subject', params))) {
            declare exit handler for not found goto _end;

              if (self.cAction in ('edit', 'view')) {
                declare tmp any;

                select E_SUBJECT,
                       E_DESCRIPTION,
                       E_LOCATION,
                       E_TAGS,
                       E_EVENT,
                       CAL.WA.event_gmt2user (E_EVENT_START, self.cTimezone),
                       CAL.WA.event_gmt2user (E_EVENT_END, self.cTimezone),
                       E_REPEAT,
                       E_REPEAT_PARAM1,
                       E_REPEAT_PARAM2,
                       E_REPEAT_PARAM3,
                       E_REPEAT_UNTIL,
                       E_REMINDER
                  into self.v_subject,
                       self.v_description,
                       self.v_location,
                       self.v_tags,
                       self.v_event,
                       self.v_eventStart,
                       self.v_eventEnd,
                       self.v_repeat,
                       self.v_repeatParam1,
                       self.v_repeatParam2,
                       self.v_repeatParam3,
                       self.v_repeatUntil,
                       self.v_reminder
                  from CAL.WA.EVENTS
                 where E_ID = self.v_id;

                 return;
              }
            _end:;

                declare pYear, pMonth, pDay, pHour, pMinute integer;

                self.v_id := -1;
                self.v_subject := '';
                self.v_description := '';
                self.v_location := '';
                self.v_tags := '';
                self.v_event := 0;
              if (isnull (self.on_date)) {
                CAL.WA.dt_dateDecode (self.cDay, pYear, pMonth, pDay);
              } else {
                CAL.WA.dt_dateDecode (self.calcDate (self.on_date), pYear, pMonth, pDay);
              }
              if (isnull (self.on_time)) {
                CAL.WA.dt_timeDecode (CAL.WA.dt_curtime (self.cTimeZone), pHour, pMinute);
              } else {
                if (self.on_time = -1) {
                  self.v_event := 1;
                  pHour := 12;
                  pMinute := 0;
                } else {
                  pHour := self.on_time / 60;
                  pMinute := mod (self.on_time, 60);
                }
              }
                self.v_eventStart := CAL.WA.dt_encode (pYear, pMonth, pDay, pHour, pMinute);
                self.v_eventEnd := dateadd ('hour', 1, self.v_eventStart);
                self.v_repeat := '';
                self.v_repeatParam1 := 0;
                self.v_repeatParam2 := 0;
                self.v_repeatParam3 := 0;
                self.v_repeatUntil := null;
                self.v_reminder := 600;
              }
          ]]>
        </v:before-data-bind>
        <div class="new-form-header">
          <v:label format="%s" value="--initcap (self.cAction) || ' event'"/>
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th width="30%">
                <v:label for="e_subject" value="Subject"/>
              </th>
              <td>
                <v:text name="e_subject" null-value="''" value="--CAL.WA.utf2wide (self.v_subject)" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
              <th valign="top">
                <v:label for="e_eventEndDate" value="Duration"/>
              </th>
              <td>
                <table>
                  <tr>
                    <td width="1%">
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_event = 1)
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_event" id="e_event_0" value="1" %s  onchange="javascript: shCell(\'e_eventStartTime\'); shCell(\'e_eventEndTime\');"/>', S));
                      ?>
                    </td>
                    <td nowrap="nowrap" width="1%" colspan="2">
                      <xsl:call-template name="nbsp"/><vm:label for="e_event_0" value="--'All day event'" />
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_event = 0)
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_event" id="e_event_1" value="0" %s onchange="javascript: shCell(\'e_eventStartTime\'); shCell(\'e_eventEndTime\');"/>', S));
                      ?>
                    </td>
                    <td  width="1%" align="right">
                      <vm:label for="e_event_1" value="--'From'" />
                    </td>
                    <td>
                      <v:text name="e_eventStartDate" xhtml_id="e_eventStartDate" null-value="--''" value="--CAL.WA.dt_datestring (self.v_eventStart, self.cDateFormat)" xhtml_class="textbox" xhtml_size="10"/>
                      <a href="#" name="e_eventStartDate_select" id="e_eventStartDate_select" onclick="cPopup.select(document.forms['F1'].e_eventStartDate, 'e_eventStartDate_select', '<?V self.cDateFormat ?>'); return false;">
                        <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                      </a>
                      <v:select-list name="e_eventStartTime" xhtml_id="e_eventStartTime" xhtml_style="--case when self.v_event = 0 then '' else 'display: none;' end">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (48, 'any');
                            for (N := 0; N < 24; N := N + 1) {
                              x[2*N]   := CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N, 0), self.cTimeFormat);
                              x[2*N+1] := CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N, 30), self.cTimeFormat);
                            }
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := CAL.WA.dt_timestring (CAL.WA.dt_timeCeiling (self.v_eventStart, 30), self.cTimeFormat);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                    </td>
                  </tr>
                  <tr>
                    <td />
                    <td  width="1%" align="right">
                      <vm:label for="e_event_1" value="--'To'" />
                    </td>
                    <td>
                      <v:text name="e_eventEndDate" xhtml_id="e_eventEndDate" null-value="--''" value="--CAL.WA.dt_datestring (self.v_eventEnd, self.cDateFormat)" xhtml_class="textbox" xhtml_size="10"/>
                      <a href="#" name="e_eventEndDate_select" id="e_eventEndDate_select" onclick="cPopup.select(document.forms['F1'].e_eventEndDate, 'e_eventEndDate_select', '<?V self.cDateFormat ?>'); return false;">
                        <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                      </a>
                      <v:select-list name="e_eventEndTime" xhtml_id="e_eventEndTime" xhtml_style="--case when self.v_event = 0 then '' else 'display: none;' end">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (48, 'any');
                            for (N := 0; N < 24; N := N + 1) {
                              x[2*N]   := CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N, 0), self.cTimeFormat);
                              x[2*N+1] := CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N, 30), self.cTimeFormat);
                            }
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := CAL.WA.dt_timestring (CAL.WA.dt_timeCeiling (self.v_eventEnd, 30), self.cTimeFormat);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="e_description" value="Description"/>
              </th>
              <td>
                <v:textarea name="e_description" null-value="--''" value="--CAL.WA.utf2wide (self.v_description)" fmt-function="CAL.WA.utf2wide" xhtml_cols="45" xhtml_rows="6"/>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="e_location" value="Location"/>
              </th>
              <td>
                <v:text name="e_location" null-value="''" value="--CAL.WA.utf2wide (self.v_location)" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
              <th valign="top">
                <v:label for="e_repeat" value="Repeats"/>
              </th>
              <td>
                <table>
                  <tr>
                    <td />
                    <td>
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_repeat = '')
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_0" value="" %s />', S));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_0" value="--'No repeat'" />
                    </td>
                  </tr>
                  <tr>
                    <td width="1%" rowspan="2" valign="top">
                      Dayly
                    </td>
                    <td>
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_repeat = 'D1')
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_1" value="D1" %s />', S));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_1" value="--'Every'" />
                      <v:text name="e_repeat_param1_D1" null-value="''" value="--self.repeatParam (self.v_repeat, 'D1', 1, null);" xhtml_class="textbox" xhtml_size="1"/> day(s)
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_repeat = 'D2')
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_2" value="D2" %s />', S));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_2" value="--'Every weekday (Monday-Friday)'" />
                    </td>
                  </tr>
                  <tr>
                    <td>
                      Weekly
                    </td>
                    <td>
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_repeat = 'W1')
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_3" value="W1" %s />', S));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_3" value="--'Every'" />
                      <v:text name="e_repeat_param1_W1" null-value="''" value="--self.repeatParam (self.v_repeat, 'W1', 1, null);" xhtml_class="textbox" xhtml_size="1"/> week(s) on
                      <?vsp
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_0"/> M', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 0)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_1"/> T', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 1)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_2"/> W', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 2)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_3"/> T', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 3)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_4"/> F', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 4)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_5"/> S', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 5)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_6"/> S', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 6)) then '' else 'checked="checked"' end));
                      ?>
                    </td>
                  </tr>
                  <tr>
                    <td rowspan="2" valign="top">
                      Monthly
                    </td>
                    <td>
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_repeat = 'M1')
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_4" value="M1" %s />', S));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_4" value="--'Every'" />
                      <v:select-list name="e_repeat_param1_M1">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (31, 'any');
                            for (N := 0; N < 31; N := N + 1)
                              x[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M1', 1, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      day of every
                      <v:select-list name="e_repeat_param2_M1">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (12, 'any');
                            for (N := 0; N < 12; N := N + 1)
                              x[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M1', 2, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      month(s)
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_repeat = 'M2')
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_5" value="M2" %s />', S));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_5" value="--'The'" />
                      <v:select-list name="e_repeat_param1_M2">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (5, 'any');
                            x[0] := 'first';
                            x[1] := 'second';
                            x[2] := 'third';
                            x[3] := 'fourth';
                            x[4] := 'last';
                            y := make_array (5, 'any');
                            for (N := 0; N < 5; N := N + 1)
                              y[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M2', 1, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      <v:select-list name="e_repeat_param2_M2">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (10, 'any');
                            x[0] := 'Day';
                            x[1] := 'Weekday';
                            x[2] := 'Weekend';
                            x[3] := 'Monday';
                            x[4] := 'Tuesday';
                            x[5] := 'Wednesday';
                            x[6] := 'Thursday';
                            x[7] := 'Friday';
                            x[8] := 'Saturday.';
                            x[9] := 'Sunday.';
                            y:= make_array (10, 'any');
                            y[0] := '10';
                            y[1] := '11';
                            y[2] := '12';
                            y[3] := '1';
                            y[4] := '2';
                            y[5] := '3';
                            y[6] := '4';
                            y[7] := '5';
                            y[8] := '6';
                            y[9] := '7';
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M2', 2, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      of every
                      <v:select-list name="e_repeat_param3_M2">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (12, 'any');
                            for (N := 0; N < 12; N := N + 1)
                              x[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M2', 3, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      month(s)
                   </td>
                  </tr>
                  <tr>
                    <td rowspan="2" valign="top">
                      Yearly
                    </td>
                    <td>
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_repeat = 'Y1')
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_6" value="Y1" %s />', S));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_6" value="--'Every'" />
                      <v:select-list name="e_repeat_param1_Y1">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (12, 'any');
                            x[0] := 'January';
                            x[1] := 'February';
                            x[2] := 'March';
                            x[3] := 'April';
                            x[4] := 'May';
                            x[5] := 'June';
                            x[6] := 'July';
                            x[7] := 'August';
                            x[8] := 'September';
                            x[9] := 'October';
                            x[10]:= 'November';
                            x[11]:= 'December';
                            y:= make_array (12, 'any');
                            for (N := 0; N < 12; N := N + 1)
                              y[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y1', 1, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      <v:select-list name="e_repeat_param2_Y1">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (31, 'any');
                            for (N := 0; N < 31; N := N + 1)
                              x[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y1', 2, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <?vsp
                        declare S varchar;

                        S := '';
                        if (self.v_repeat = 'Y2')
                          S := 'checked="checked"';
                        http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_7" value="Y2" %s />', S));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_7" value="--'The'" />
                      <v:select-list name="e_repeat_param1_Y2">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (5, 'any');
                            x[0] := 'first';
                            x[1] := 'second';
                            x[2] := 'third';
                            x[3] := 'fourth';
                            x[4] := 'last';
                            y := make_array (5, 'any');
                            for (N := 0; N < 5; N := N + 1)
                              y[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y2', 1, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      <v:select-list name="e_repeat_param2_Y2">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (10, 'any');
                            x[0] := 'Day';
                            x[1] := 'Weekday';
                            x[2] := 'Weekend';
                            x[3] := 'Monday';
                            x[4] := 'Tuesday';
                            x[5] := 'Wednesday';
                            x[6] := 'Thursday';
                            x[7] := 'Friday';
                            x[8] := 'Saturday';
                            x[9] := 'Sunday';
                            y:= make_array (10, 'any');
                            y[0] := '10';
                            y[1] := '11';
                            y[2] := '12';
                            y[3] := '1';
                            y[4] := '2';
                            y[5] := '3';
                            y[6] := '4';
                            y[7] := '5';
                            y[8] := '6';
                            y[9] := '7';
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y2', 2, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      of
                      <v:select-list name="e_repeat_param3_Y2">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (12, 'any');
                            x[0] := 'January';
                            x[1] := 'February';
                            x[2] := 'March';
                            x[3] := 'April';
                            x[4] := 'May';
                            x[5] := 'June';
                            x[6] := 'July';
                            x[7] := 'August';
                            x[8] := 'September';
                            x[9] := 'October';
                            x[10]:= 'November';
                            x[11]:= 'December';
                            y:= make_array (12, 'any');
                            for (N := 0; N < 12; N := N + 1)
                              y[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y2', 3, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th valign="top" rowspan="2">
                <v:label for="e_repeat_range" value="Repeats range"/>
              </th>
              <td>
                <?vsp
                  declare S varchar;

                  S := '';
                  if (isnull (self.v_repeatUntil))
                    S := 'checked="checked"';
                  http(sprintf('<input type="radio" name="e_repeatUntilKind" id="e_repeatUntilKind_0" value="0" %s />', S));
                ?>
                <xsl:call-template name="nbsp"/>
                <vm:label for="e_repeatUntilKind_0" value="--'No end date'" />
              </td>
            </tr>
            <tr>
              <td>
                <?vsp
                  declare S varchar;

                  S := '';
                  if (not isnull (self.v_repeatUntil))
                    S := 'checked="checked"';
                  http(sprintf('<input type="radio" name="e_repeatUntilKind" id="e_repeatUntilKind_1" value="1" %s />', S));
                ?>
                <xsl:call-template name="nbsp"/>
                <vm:label for="e_repeatUntilKind_1" value="--'Until'" />
                <xsl:call-template name="nbsp"/>
                <v:text name="e_repeatUntil" xhtml_id="e_repeatUntil" null-value="--''" value="--CAL.WA.dt_datestring (self.v_repeatUntil, self.cDateFormat)" xhtml_class="textbox" xhtml_size="10"/>
                <a href="#" name="e_repeatUntil_select" id="e_repeatUntil_select" onclick="cPopup.select(document.forms['F1'].e_repeatUntil, 'e_repeatUntil_select', '<?V self.cDateFormat ?>'); return false;">
                  <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                </a>
              </td>
            </tr>
            <tr>
              <th>
                <vm:label for="e_reminder" value="--'Reminder'" />
              </th>
              <td>
                <v:select-list name="e_reminder">
                  <v:on-init>
                    <![CDATA[
                      declare N integer;
                      declare x, y any;

                      x := make_array (14, 'any');
                      x[0] := 'No remainder';
                      x[1] := '5 minutes';
                      x[2] := '10 minutes';
                      x[3] := '15 minutes';
                      x[4] := '20 minutes';
                      x[5] := '25 minutes';
                      x[6] := '30 minutes';
                      x[7] := '45 minutes';
                      x[8] := '1 hour';
                      x[9] := '2 hours';
                      x[10]:= '3 hours';
                      x[11]:= '1 day';
                      x[12]:= '2 days';
                      x[13]:= '1 week';
                      y:= make_array (14, 'any');
                      y[0] := '-1';
                      y[1] := '300';
                      y[2] := '600';
                      y[3] := '900';
                      y[4] := '1200';
                      y[5] := '1500';
                      y[6] := '1800';
                      y[7] := '2700';
                      y[8] := '3600';
                      y[9] := '7200';
                      y[10]:= '10800';
                      y[11]:= '86400';
                      y[12]:= '172800';
                      y[13]:= '604800';
                      control.vsl_item_values := y;
                      control.vsl_items := x;
                      control.ufl_value := '';
                    ]]>
                  </v:on-init>
                  <v:before-data-bind>
                    <![CDATA[
                      control.ufl_value := self.v_reminder;
                    ]]>
                  </v:before-data-bind>
                </v:select-list>
              </td>
            </tr>
          </table>
        </div>
        <div class="new-form-footer">
          <v:button action="simple" value="--case when (self.cAction = 'create') then 'Create' else 'Update' end" enabled="--case when (self.cAction in ('create', 'edit')) then 1 else 0 end" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                declare N any;
                declare params, sd, ed any;

                declare exit handler for SQLSTATE '*' {
                  if (__SQL_STATE = 'TEST') {
                    self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
                    self.vc_is_valid := 0;
                    return;
                  }
                  resignal;
                };

                params := self.vc_page.vc_event.ve_params;

                self.v_subject := trim (self.e_subject.ufl_value);
                self.v_location := trim (self.e_location.ufl_value);
                self.v_description := trim (self.e_description.ufl_value);

                CAL.WA.test (self.v_subject, vector('name', 'Subject', 'class', 'varchar', 'minLength', 0, 'maxLength', 255));
                CAL.WA.test (self.v_location, vector('name', 'Location', 'class', 'varchar', 'minLength', 0, 'maxLength', 255));

                -- event
                declare pDate date;
                declare pTime time;

                self.v_event := cast (get_keyword ('e_event', params, '0') as integer);
                pDate := CAL.WA.test (trim (self.e_eventStartDate.ufl_value), vector('name', 'Event start date', 'class', 'date-'||self.cDateFormat));
                if (self.v_event = 0) {
                  pTime := CAL.WA.dt_stringtime (self.e_eventStartTime.ufl_value);
                } else {
                  pTime := CAL.WA.dt_timeEncode (12, 0);
                }
                self.v_eventStart := CAL.WA.dt_join (pDate, pTime);
                pDate := CAL.WA.test (trim (self.e_eventEndDate.ufl_value), vector('name', 'Event end date', 'class', 'date-'||self.cDateFormat));
                if (self.v_event = 0) {
                  pTime := CAL.WA.dt_stringtime (self.e_eventEndTime.ufl_value);
                } else {
                  pTime := CAL.WA.dt_timeEncode (12, 0);
                }
                self.v_eventEnd := CAL.WA.dt_join (pDate, pTime);
                if (self.v_eventEnd < self.v_eventStart)
                  signal ('TEST', '''End date'' value should be greater then ''Start date'' value!<>');

                -- repeat
                self.v_repeat := trim (get_keyword ('e_repeat', params, ''));
                self.v_repeatParam1 := 0;
                self.v_repeatParam2 := 0;
                self.v_repeatParam3 := 0;
                if (self.v_repeat = 'D1') {
                  self.v_repeatParam1 := self.e_repeat_param1_D1.ufl_value;
                }
                if (self.v_repeat = 'W1') {
                  self.v_repeatParam1 := self.e_repeat_param1_W1.ufl_value;
                  self.v_repeatParam2 := 0;
                  for (N := 0; N < 7; N := N + 1)
                    if (cast (get_keyword ('e_repeat_param2_W1_' || cast (N as varchar), params, '0') as integer))
                      self.v_repeatParam2 := bit_or (self.v_repeatParam2, power (2, N));
                }
                if (self.v_repeat = 'M1') {
                  self.v_repeatParam1 := self.e_repeat_param1_M1.ufl_value;
                  self.v_repeatParam2 := self.e_repeat_param2_M1.ufl_value;
                }
                if (self.v_repeat = 'M2') {
                  self.v_repeatParam1 := self.e_repeat_param1_M2.ufl_value;
                  self.v_repeatParam2 := self.e_repeat_param2_M2.ufl_value;
                  self.v_repeatParam3 := self.e_repeat_param3_M2.ufl_value;
                }
                if (self.v_repeat = 'Y1') {
                  self.v_repeatParam1 := self.e_repeat_param1_Y1.ufl_value;
                  self.v_repeatParam2 := self.e_repeat_param2_Y1.ufl_value;
                }
                if (self.v_repeat = 'Y2') {
                  self.v_repeatParam1 := self.e_repeat_param1_Y2.ufl_value;
                  self.v_repeatParam2 := self.e_repeat_param2_Y2.ufl_value;
                  self.v_repeatParam3 := self.e_repeat_param3_Y2.ufl_value;
                }

                -- range
                if (self.v_repeat = '') {
                  self.v_repeatUntil := null;
                } else {
                  if (cast (get_keyword ('e_repeatUntilKind', params, '0') as integer) = 1) {
                    self.v_repeatUntil := CAL.WA.test (trim (self.e_repeatUntil.ufl_value), vector('name', 'Range until date', 'class', 'date-'||self.cDateFormat));
                  } else {
                    self.v_repeatUntil := null;
                  }
                }

                -- reminder
                self.v_reminder := trim (self.e_reminder.ufl_value);

                CAL.WA.event_update (
                  self.v_id,
                  self.domain_id,
                  self.v_subject,
                  self.v_description,
                  self.v_location,
                  self.v_tags,
                  self.v_event,
                  CAL.WA.event_user2gmt (self.v_eventStart, self.cTimezone),
                  CAL.WA.event_user2gmt (self.v_eventEnd, self.cTimezone),
                  self.v_repeat,
                  self.v_repeatParam1,
                  self.v_repeatParam2,
                  self.v_repeatParam3,
                  self.v_repeatUntil,
                  self.v_reminder
                );

                if (self.cScope in ('tasks', 'notes'))
                  self.cScope := 'events';

                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
          <v:button action="simple" value="Cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
      </v:template>

      <v:template type="simple" enabled="--case when ((self.cScope = 'tasks') and (self.cAction in ('create', 'edit', 'view'))) then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            if (isnull (get_keyword ('t_subject', self.vc_page.vc_event.ve_params))) {
              declare exit handler for not found goto _end;

              if (self.cAction in ('edit', 'view')) {
                declare tmp any;

                select E_SUBJECT,
                       E_DESCRIPTION,
                       E_TAGS,
                       CAL.WA.event_gmt2user (E_EVENT_START, self.cTimezone),
                       CAL.WA.event_gmt2user (E_EVENT_END, self.cTimezone),
                       E_PRIORITY,
                       E_STATUS,
                       E_COMPLETE
                  into self.v_subject,
                       self.v_description,
                       self.v_tags,
                       self.v_eventStart,
                       self.v_eventEnd,
                       self.v_priority,
                       self.v_status,
                       self.v_complete
                  from CAL.WA.EVENTS
                 where E_ID = self.v_id;

                 return;
              }
            _end:;

              self.v_id := -1;
              self.v_subject := '';
              self.v_description := '';
              self.v_tags := '';
              self.v_eventStart := null;
              self.v_eventEnd := self.cDay;
              self.v_priority := 3;
              self.v_status := '';
              self.v_complete := 0;
            }
          ]]>
        </v:before-data-bind>
        <div class="new-form-header">
          <v:label format="%s" value="--initcap (self.cAction) || ' task'"/>
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th width="30%">
                <v:label for="t_subject" value="Subject"/>
              </th>
              <td>
                <v:text name="t_subject" null-value="''" value="--CAL.WA.utf2wide (self.v_subject)" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_eventEndDate" value="Start Date"/>
              </th>
              <td>
                <v:text name="t_eventStartDate" xhtml_id="t_eventStartDate" null-value="--''" value="--CAL.WA.dt_datestring (self.v_eventStart, self.cDateFormat)" xhtml_class="textbox" xhtml_size="10"/>
                <a href="#" name="t_eventStartDatt_select" id="t_eventStartDatt_select" onclick="cPopup.select(document.forms['F1'].t_eventStartDate, 't_eventStartDatt_select', '<?V self.cDateFormat ?>'); return false;">
                  <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                </a>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_eventEndDate" value="Due Date"/>
              </th>
              <td>
                <v:text name="t_eventEndDate" xhtml_id="t_eventEndDate" null-value="--''" value="--CAL.WA.dt_datestring (self.v_eventEnd, self.cDateFormat)" xhtml_class="textbox" xhtml_size="10"/>
                <a href="#" name="t_eventEndDatt_select" id="t_eventEndDatt_select" onclick="cPopup.select(document.forms['F1'].t_eventEndDate, 't_eventEndDatt_select', '<?V self.cDateFormat ?>'); return false;">
                  <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                </a>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_priority" value="Priority"/>
              </th>
              <td>
                <v:select-list name="t_priority">
                  <v:on-init>
                    <![CDATA[
                      declare N integer;
                      declare x, y any;

                      x := make_array (5, 'any');
                      x[0] := 'Highest';
                      x[1] := 'High';
                      x[2] := 'Normal';
                      x[3] := 'Low';
                      x[4] := 'Lowest';
                      y := make_array (5, 'any');
                      for (N := 0; N < 5; N := N + 1)
                        y[N] := cast ((N+1) as varchar);
                      control.vsl_item_values := y;
                      control.vsl_items := x;
                      control.ufl_value := '3';
                    ]]>
                  </v:on-init>
                  <v:before-data-bind>
                    <![CDATA[
                      control.ufl_value := self.v_priority;
                    ]]>
                  </v:before-data-bind>
                </v:select-list>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_status" value="Status"/>
              </th>
              <td>
                <v:select-list name="t_status">
                  <v:on-init>
                    <![CDATA[
                      declare x any;

                      x := make_array (5, 'any');
                      x[0] := 'Not Started';
                      x[1] := 'In Progress';
                      x[2] := 'Completed';
                      x[3] := 'Waiting.';
                      x[4] := 'Deferred';
                      control.vsl_item_values := x;
                      control.vsl_items := x;
                      control.ufl_value := '';
                    ]]>
                  </v:on-init>
                  <v:before-data-bind>
                    <![CDATA[
                      control.ufl_value := self.v_status;
                    ]]>
                  </v:before-data-bind>
                </v:select-list>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_complete" value="% Complete"/>
              </th>
              <td>
                <v:select-list name="t_complete">
                  <v:on-init>
                    <![CDATA[
                      declare x any;

                      x := make_array (5, 'any');
                      x[0] := '0';
                      x[1] := '25';
                      x[2] := '50';
                      x[3] := '75';
                      x[4] := '100';
                      control.vsl_item_values := x;
                      control.vsl_items := x;
                      control.ufl_value := '0';
                    ]]>
                  </v:on-init>
                  <v:before-data-bind>
                    <![CDATA[
                      control.ufl_value := self.v_complete;
                    ]]>
                  </v:before-data-bind>
                </v:select-list>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_description" value="Description"/>
              </th>
              <td>
                <v:textarea name="t_description" null-value="--''" value="--CAL.WA.utf2wide (self.v_description)" fmt-function="CAL.WA.utf2wide" xhtml_cols="45" xhtml_rows="6"/>
              </td>
            </tr>
          </table>
        </div>
        <div class="new-form-footer">
          <v:button action="simple" value="--case when (self.cAction = 'create') then 'Create' else 'Update' end" enabled="--case when (self.cAction in ('create', 'edit')) then 1 else 0 end" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                declare exit handler for SQLSTATE '*' {
                  if (__SQL_STATE = 'TEST') {
                    self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
                    self.vc_is_valid := 0;
                    return;
                  }
                  resignal;
                };

                self.v_subject := trim (self.t_subject.ufl_value);
                self.v_description := trim (self.t_description.ufl_value);
                self.v_priority := cast (self.t_priority.ufl_value as integer);
                self.v_status := self.t_status.ufl_value;
                self.v_complete := cast (self.t_complete.ufl_value as integer);

                CAL.WA.test (self.v_subject, vector('name', 'Subject', 'class', 'varchar', 'minLength', 1, 'maxLength', 255));

                self.v_eventStart := CAL.WA.test (trim (self.t_eventStartDate.ufl_value), vector('name', 'Task start date', 'class', 'date-'||self.cDateFormat));
                self.v_eventEnd := CAL.WA.test (trim (self.t_eventEndDate.ufl_value), vector('name', 'Task due date', 'class', 'date-'||self.cDateFormat, 'canEmpty', 0));
                if (self.v_eventStart = '')
                  self.v_eventStart := null;
                if (self.v_eventEnd < self.v_eventStart)
                  signal ('TEST', '''Due date'' value should be greater then ''Start date'' value!<>');

                CAL.WA.task_update (
                  self.v_id,
                  self.domain_id,
                  self.v_subject,
                  self.v_description,
                  self.v_tags,
                  CAL.WA.event_user2gmt (self.v_eventStart, self.cTimezone),
                  CAL.WA.event_user2gmt (self.v_eventEnd, self.cTimezone),
                  self.v_priority,
                  self.v_status,
                  self.v_complete
                );

                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
          <v:button action="simple" value="Cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
      </v:template>

      <v:template type="simple" enabled="--case when ((self.cScope = 'notes') and (self.cAction in ('create', 'edit', 'view'))) then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            if (isnull (get_keyword ('n_subject', self.vc_page.vc_event.ve_params))) {
              declare exit handler for not found goto _end;

              if (self.cAction in ('edit', 'view')) {
                declare tmp any;

                select E_SUBJECT,
                       E_DESCRIPTION,
                       E_TAGS
                  into self.v_subject,
                       self.v_description,
                       self.v_tags
                  from CAL.WA.EVENTS
                 where E_ID = self.v_id;

                 return;
              }
            _end:;

              self.cAction := 'create';
              self.v_id := -1;
              self.v_subject := '';
              self.v_description := '';
              self.v_tags := '';
            }
          ]]>
        </v:before-data-bind>
        <div class="new-form-header">
          <v:label format="%s" value="--initcap (self.cAction) || ' note'"/>
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th width="30%">
                <v:label for="n_subject" value="Subject"/>
              </th>
              <td>
                <v:text name="n_subject" null-value="''" value="--CAL.WA.utf2wide (self.v_subject)" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="n_description" value="Description"/>
              </th>
              <td>
                <v:textarea name="n_description" null-value="--''" value="--CAL.WA.utf2wide (self.v_description)" fmt-function="CAL.WA.utf2wide" xhtml_cols="45" xhtml_rows="6"/>
              </td>
            </tr>
          </table>
        </div>
        <div class="new-form-footer">
          <v:button action="simple" value="--case when (self.cAction = 'create') then 'Create' else 'Update' end" enabled="--case when (self.cAction in ('create', 'edit')) then 1 else 0 end" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                declare exit handler for SQLSTATE '*' {
                  if (__SQL_STATE = 'TEST') {
                    self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
                    self.vc_is_valid := 0;
                    return;
                  }
                  resignal;
                };

                self.v_subject := trim (self.n_subject.ufl_value);
                self.v_description := trim (self.n_description.ufl_value);

                CAL.WA.test (self.v_subject, vector('name', 'Subject', 'class', 'varchar', 'minLength', 1, 'maxLength', 255));

                CAL.WA.note_update (
                  self.v_id,
                  self.domain_id,
                  self.v_subject,
                  self.v_description,
                  self.v_tags
                );

                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
          <v:button action="simple" value="Cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
      </v:template>

      <v:template type="simple" enabled="--case when (self.cAction = 'import') then 1 else 0 end">
        <v:template type="simple" enabled="-- case when (self.icStep = '1') then 1 else 0 end">
        <div class="new-form-header">
            <v:label format="%s" value="Import: Select source type" />
        </div>

        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
                <th rowspan="3" valign="middle" width="45%">
                  <v:label for="i_file" value="Source type" />
              </th>
                <td nowrap="nowarap">
                  <v:radio-button name="icSource_0" xhtml_id="icSource_0" group-name="icSource" value="0">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(lte(self.icSource, 0), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                  <xsl:call-template name="nbsp" />
                  <b><vm:label for="icSource_0" value="--'File'" /></b>
                </td>
              </tr>
              <tr>
                <td nowrap="nowarap">
                  <v:radio-button name="icSource_1" xhtml_id="icSource_1" group-name="icSource" value="1">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(equ(self.icSource, 1), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                  <xsl:call-template name="nbsp" />
                  <b><vm:label for="icSource_1" value="--'WebDAV'" /></b>
                </td>
              </tr>
              <tr>
                <td nowrap="nowarap">
                  <v:radio-button name="icSource_2" xhtml_id="icSource_2" group-name="icSource" value="2">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(equ(self.icSource, 2), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                  <xsl:call-template name="nbsp" />
                  <b><vm:label for="icSource_2" value="--'URI'" /></b>
              </td>
            </tr>
          </table>
        </div>

        <div class="new-form-footer">
            <v:button action="simple" value="Next" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.icStep := '2';
                  if (self.icSource_0.ufl_selected) {
                    self.icSource := 0;
                  } else if (self.icSource_1.ufl_selected) {
                    self.icSource := 1;
                  } else if (self.icSource_2.ufl_selected) {
                    self.icSource := 2;
                  }
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
          <v:button action="simple" value="Cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
      </v:template>

        <v:template type="simple" enabled="-- case when (self.icStep = '2') then 1 else 0 end">
        <div class="new-form-header">
            <v:label format="%s" value="Import: Select content type" />
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
              <vm:if test="self.icSource = 0">
                <tr>
                  <th width="30%">
                    Select file
                  </th>
                  <td>
                    <input type="file" name="f_file" size="40" />
                  </td>
                </tr>
              </vm:if>
              <vm:if test="self.icSource = 1">
                <tr>
                  <th width="30%">
                    Select WebDAV file
                  </th>
                  <td>
                    <v:text name="f_dav" value="--''" xhtml_size="40" />
                    <v:browse-button value="Browse..." selector="popup_browser.vspx" child-window-options="scrollbars=auto, resizable=yes, menubar=no, height=600, width=800"  browser-options="--sprintf('list_type=details&amp;path=%s&amp;browse_type=res&amp;style_css=css/dav.css&amp;w_title=DAV Browser&amp;title=DAV Browser&amp;lang=en&amp;retname=f_dav', AB.WA.dav_home(self.account_id))">
                      <v:field name="f_dav" />
                    </v:browse-button>
                  </td>
                </tr>
              </vm:if>
              <vm:if test="self.icSource = 2">
            <tr>
              <th width="30%">
                    Select URI
                  </th>
                  <td>
                    <v:text name="f_uri" value="--''" xhtml_size="40" />
                  </td>
                </tr>
              </vm:if>
              <tr>
                <th>
                  <v:label for="i_tags" value="Comma Delimited Tags" />
                </th>
                <td>
                  <v:text name="i_tags" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60" />
                </td>
              </tr>
              <tr>
                <th>
                  My Tags
              </th>
              <td>
                  <?vsp
                    declare _done integer;

                    _done := 0;
                    for (select T_TAG from AB.WA.TAGS where T_DOMAIN_ID = self.domain_id and T_COUNT > 0 and T_TAG <> '' order by T_TAG) do {
                      http (sprintf ('<a href="#" onclick="javascript: addTag(\'%s\', \'i_tags\');"><i>%s</i></a> ', T_TAG, T_TAG));
                      _done := 1;
                    }
                    if (not _done)
                      http ('no tags');
                  ?>
              </td>
            </tr>
          </table>
        </div>

        <div class="new-form-footer">
            <v:button action="simple" value="Back" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.icStep := '1';
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            <v:button action="simple" value="Import" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  declare tmp, content any;

                  declare exit handler for SQLSTATE '*' {
                    if (__SQL_STATE = 'TEST') {
                      self.vc_error_message := AB.WA.test_clear (__SQL_MESSAGE);
                      self.vc_is_valid := 0;
                      return;
                    }
                    resignal;
                  };

                  if (self.icSource = 0) {
                    content := trim(get_keyword ('f_file', self.vc_page.vc_event.ve_params, ''));
                    if (is_empty_or_null (content)) {
                      self.vc_error_message := 'Please select file from your local file system!';
                      self.vc_is_valid := 0;
                      return;
                    }

                  } else if (self.icSource = 1) {
                    self.f_dav.ufl_value := trim(self.f_dav.ufl_value);
                    if (self.f_dav.ufl_value not like (AB.WA.dav_home (self.account_id) || '%')) {
                      self.vc_error_message := sprintf('Please select file from your WebDAV home directory ''%s''!', AB.WA.dav_home (self.account_id));
                      self.vc_is_valid := 0;
                      return;
                    }
                    content := AB.WA.dav_content (AB.WA.host_url () || self.f_dav.ufl_value);
                    if (isnull(content)) {
                      self.vc_error_message := 'Bad import source!';
                      self.vc_is_valid := 0;
                      return;
                    }

                  } else if (self.icSource = 2) {
                    self.f_uri.ufl_value := trim(self.f_uri.ufl_value);
                    if (is_empty_or_null (self.f_uri.ufl_value)) {
                      self.vc_error_message := 'Please select correct URI address!';
                      self.vc_is_valid := 0;
                      return;
                    }
                    content := AB.WA.dav_content (self.f_uri.ufl_value);
                    if (isnull(content)) {
                      self.vc_error_message := 'Bad URI source!';
                      self.vc_is_valid := 0;
                      return;
                    }
                  }

                  -- test tags value
                  self.v_tags := trim (self.i_tags.ufl_value);
                  AB.WA.test (self.v_tags, vector ('name', 'Tags', 'class', 'tags'));
                  tmp := AB.WA.tags2vector (self.v_tags);
                  tmp := AB.WA.vector_unique (tmp);
                  self.v_tags := AB.WA.vector2tags (tmp);

                  -- vCard
                  if (self.icType = 0)
                    CAL.WA.import_vcal (self.domain_id, content, self.v_tags);

                  self.cAction := 'browse';
                  self.vc_data_bind(e);
                 ]]>
               </v:on-post>
            </v:button>
          <v:button action="simple" value="Cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
      </v:template>
      </v:template>

      <v:template type="simple" enabled="--case when (self.cAction = 'settings') then 1 else 0 end">
        <v:text name="tabNo" xhtml_id="tabNo" type="hidden" value="--self.v_tabNo" />
        <div class="new-form-header">
          Preferences
        </div>
        <div id="c1">
          <div class="tabs">
            <vm:tabCaption tab="1" tabs="2" caption="General"/>&nbsp;
            <vm:tabCaption tab="2" tabs="2" caption="Calendar"/>&nbsp;
          </div>
          <div class="contents">
            <div id="1" class="tabContent" style="display: none;">
              <table class="form-body" cellspacing="0">
                <tr>
                  <th width="30%">
                    <v:label for="s_chars" value="Contact name display"/>
                  </th>
                  <td>
                    <?vsp
                      declare S varchar;

                      S := '';
                      if (CAL.WA.settings_chars (self.settings) = 0)
                        S := 'checked="checked"';
                      http(sprintf('<input type="radio" name="s_chars" id="s_chars_0" value="0" %s />', S));
                    ?>
                    <xsl:call-template name="nbsp"/><vm:label for="s_chars_0" value="--'show everything'" />
                  </td>
                </tr>
                <tr>
                  <th />
                  <td>
                    <?vsp
                      declare S varchar;

                      S := '';
                      if (CAL.WA.settings_chars (self.settings) <> 0)
                        S := 'checked="checked"';
                      http(sprintf('<input type="radio" name="s_chars" id="s_chars_1" value="1" %s />', S));
                    ?>
                    <xsl:call-template name="nbsp"/><vm:label for="s_chars_1" value="--'show no more than'" /><xsl:call-template name="nbsp"/>
                    <v:text name="s_chars" null-value="--''" value="--get_keyword('chars', self.settings, '60')" xhtml_size="3"/>
                    <xsl:call-template name="nbsp"/><vm:label for="s_chars_1" value="--'characters'" /><xsl:call-template name="nbsp"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="s_rows" value="Rows per page"/>
                  </th>
                  <td>
                    <v:text name="s_rows" value="--CAL.WA.settings_rows (self.settings)" xhtml_size="3"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    Atom File Version
                  </th>
                  <td>
                    <v:select-list name="s_atomVersion">
                      <v:item value="0.3" name="0.3"/>
                      <v:item value="1.0" name="1.0"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_atomVersion (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
              </table>
            </div>
            <div id="2" class="tabContent" style="display: none;">
              <table class="form-body" cellspacing="0">
                <tr>
                  <th width="30%">
                    Default view
                  </th>
                  <td>
                    <v:select-list name="s_defaultView">
                      <v:item value="day" name="Day"/>
                      <v:item value="week" name="Week"/>
                      <v:item value="month" name="Month"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_defaultView (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    Week starts on
                  </th>
                  <td>
                    <v:select-list name="s_weekStarts">
                      <v:item value="m" name="Monday"/>
                      <v:item value="s" name="Sunday"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_weekStarts (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    Time format
                  </th>
                  <td>
                    <v:select-list name="s_timeFormat">
                      <v:item value="e" name="13:00"/>
                      <v:item value="u" name="01:00 pm"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_timeFormat (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    Date format
                  </th>
                  <td>
                    <v:select-list name="s_dateFormat">
                      <v:item value="dd.MM.yyyy" name="31.12.2007"/>
                      <v:item value="MM/dd/yyyy" name="12/31/2007"/>
                      <v:item value="yyyy/MM/dd" name="2007/12/31"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_dateFormat (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    Current timezone
                  </th>
                  <td>
                    <v:select-list name="s_timeZone">
                      <v:on-init>
                        <![CDATA[
                          declare i, j integer;
                          declare x, y any;

                          x := make_array (25, 'any');
                          y := make_array (25, 'any');
                          i := -12;
                          j := 0;
                          while (i <= 12) {
                            x[j] := cast (i*60 as varchar);
                            y[j] := self.showTimeZone (i);
                            i := i + 1;
                            j := j + 1;
                          }
                          control.vsl_item_values := x;
                          control.vsl_items := y;
                          control.ufl_value := '0';
                        ]]>
                      </v:on-init>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_timeZone (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
              </table>
            </div>
          </div>
        </div>
        <div class="new-form-footer">
          <v:button action="simple" value="Save" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                declare rows, chars any;

                declare exit handler for SQLSTATE '*' {
                  if (__SQL_STATE = 'TEST') {
                    self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
                    self.vc_is_valid := 0;
                    return;
                  }
                  resignal;
                };

                rows := trim(self.s_rows.ufl_value);
                chars := trim(self.s_chars.ufl_value);
                if (get_keyword ('s_chars', self.vc_page.vc_event.ve_params, '-1') = '0')
                  chars := '0';

                CAL.WA.test(rows, vector('name', 'Rows per page', 'class', 'integer', 'type', 'integer', 'minValue', 5, 'maxValue', 1000));
                CAL.WA.test(chars, vector('name', 'Max name length', 'class', 'integer', 'type', 'integer', 'minValue', 0, 'maxValue', 255));

                self.settings := CAL.WA.set_keyword ('chars', self.settings, cast(cast(chars as integer) as varchar));
                self.settings := CAL.WA.set_keyword ('rows', self.settings, cast(cast(rows as integer) as varchar));
                self.settings := CAL.WA.set_keyword ('atomVersion', self.settings, self.s_atomVersion.ufl_value);
                self.settings := CAL.WA.set_keyword ('defaultView', self.settings, self.s_defaultView.ufl_value);
                self.settings := CAL.WA.set_keyword ('weekStarts', self.settings, self.s_weekStarts.ufl_value);
                self.settings := CAL.WA.set_keyword ('timeFormat', self.settings, self.s_timeFormat.ufl_value);
                self.settings := CAL.WA.set_keyword ('dateFormat', self.settings, self.s_dateFormat.ufl_value);
                self.settings := CAL.WA.set_keyword ('timeZone', self.settings, self.s_timeZone.ufl_value);

                insert replacing CAL.WA.SETTINGS (S_ACCOUNT_ID, S_DATA)
                  values(self.account_id, serialize (self.settings));
                commit work;

                CAL.WA.domain_gems_create (self.domain_id, self.account_id);

                self.initData ();
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
          <v:button action="simple" value="Cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
        <script>
          <![CDATA[
            initTab(2, 1);
          ]]>
        </script>
      </v:template>
      <div id="cDiv" style="position: absolute; visibility: hidden; background-color: white; z-index: 10;">
      </div>
      <vm:if test="self.cScope in ('day', 'week', 'month')">
        <div id="deleteDiv">
          Are you sure that you want to delete selected item?
      	</div>
        <div id="deleteDiv2">
          Do you want to delete all occurrences of the repeatble item, or just this one?<br /><br />
          <input type="radio" name="e_delete" id="e_delete_0" value="0" checked="checked" style="margin-left: 110px;" /><label for="e_delete_0">Delete this occurrence</label><br />
          <input type="radio" name="e_delete" id="e_delete_1" value="1" style="margin-left: 110px;" /><label for="e_delete_1">Delete the series</label><br />
        </div>
        <script type="text/javascript">
          <![CDATA[
          	var deleteDialog = new OAT.Dialog("Confirm delete", "deleteDiv", {width:400, modal:1});
          	var deleteDialog2 = new OAT.Dialog("Confirm delete", "deleteDiv2", {width:400, modal:1});
          ]]>
        </script>
      </vm:if>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
