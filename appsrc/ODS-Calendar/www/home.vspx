<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
  -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2007 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="calendar" decor="template/template.vspx" style="template/template.xsl" fast-render="1" button-anchors="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  <v:method name="sortColumn" arglist="in titleName varchar, in columnName varchar, in fieldName varchar, in dsOrder varchar, in dsDirection varchar">
    <![CDATA[
      declare altStr, directionStr, imageStr varchar;

      if (dsOrder = columnName and dsDirection = 'desc')
      {
        directionStr := 'Ascending';
        imageStr := '&nbsp;<img src="image/d.gif" border="0" alt="Down"/>';
      } else if (dsOrder = columnName and dsDirection = 'asc') {
        directionStr := 'Descending';
        imageStr := '&nbsp;<img src="image/u.gif" border="0" alt="Up"/>';
      } else {
        directionStr := 'Ascending';
        imageStr := '&nbsp;&nbsp;';
      }
      altStr := sprintf ('Sort Rows on %s in %s Order', titleName, directionStr);
      http (sprintf ('<a href="#" onclick="javascript: myPost (''F1'', ''%s'', ''%s''); return false;" alt="%s" title="%s">%s%s</a>', fieldName, columnName, altStr, altStr, titleName, imageStr));
    ]]>
  </v:method>

  <v:method name="sortChange" arglist="in columnName varchar, in dsOrder varchar, in dsDirection varchar, inout ds vspx_data_set">
    <![CDATA[
      if (is_empty_or_null (columnName))
        return;

      ds.vc_reset ();
      if (udt_get (self, dsOrder) = columnName)
      {
        udt_set (self, dsDirection, either (equ (udt_get (self, dsDirection), 'asc'), 'desc', 'asc'));
      } else {
        udt_set (self, dsDirection, 'asc');
      }
      udt_set (self, dsOrder, columnName);
    ]]>
  </v:method>

  <v:method name="actionTest" arglist="">
    <![CDATA[
      declare tmp, kind, params, permissions any;

      params := self.vc_page.vc_event.ve_params;

      tmp := get_keyword ('id', params, '');
      if (tmp <> '')
      {
        self.v_id := cast (tmp as integer);
        if (self.v_id <> -1)
        {
          permissions := CAL.WA.event_permissions (self.v_id, self.domain_id, self.access_role);
          if (permissions = 'W')
          {
          self.cAction := 'edit';
          }
          else if (permissions = 'R')
          {
            self.cAction := 'view';
          }
          kind := CAL.WA.event_kind (self.v_id);
          if ((kind = 'event') and (self.cScope in ('tasks', 'search')))
            self.cScope := 'events';
          if (kind = 'task')
            self.cScope := 'tasks';
        }
      }

      tmp := get_keyword ('search', params, '');
      if (tmp <> '')
      {
        self.cScope := 'search';
        self.cSearch := null;
        CAL.WA.xml_set ('keywords', self.cSearch, tmp);
        tmp := get_keyword ('mode', params, 'browse');
        if (tmp = 'advanced')
          CAL.WA.xml_set('mode', self.cSearch, 'advanced');
        self.cAction := tmp;
      }

      tmp := get_keyword ('action', params, '');
      if (tmp <> '')
        self.cAction := tmp;
    ]]>
  </v:method>

  <v:method name="initData" arglist="">
    <![CDATA[
      self.cShowTasks := CAL.WA.settings_showTasks (self.settings);
      self.cPrivacy := case when CAL.WA.access_is_write (self.access_role) then 0 else 1 end;
      if (isnull (self.cScope))
        self.cScope := CAL.WA.settings_defaultView (self.settings);
      if (isnull (self.cDay))
        self.cDay := CAL.WA.dt_curdate (self.cTimeZone);
      if (isnull (self.cMonth))
      {
        self.cMonth := CAL.WA.dt_BeginOfMonth (self.cDay);
        self.cnMonth := self.cMonth;
      }
      if (isnull (self.cnMonth))
        self.cnMonth := self.cMonth;
      if (self.cScope = 'day')
      {
        self.cStart := self.cDay;
        self.cEnd := self.cDay;
      }
      if (self.cScope = 'week')
      {
        self.cStart := cast (CAL.WA.dt_BeginOfWeek (self.cDay, self.cWeekStarts) as date);
        self.cEnd := cast (CAL.WA.dt_EndOfWeek (self.cDay, self.cWeekStarts) as date);
      }
      if (self.cScope = 'month')
      {
        self.cStart := cast (CAL.WA.dt_BeginOfWeek (CAL.WA.dt_BeginOfMonth (self.cDay), self.cWeekStarts) as date);
        self.cEnd := cast (CAL.WA.dt_EndOfWeek (CAL.WA.dt_EndOfMonth (self.cDay), self.cWeekStarts) as date);
      }
      self.cDays := self.initDays (self.cMonth);
      if (CAL.WA.dt_compare (self.cMonth, self.cnMonth))
      {
        self.cnDays := self.cDays;
      } else {
        self.cnDays := self.initDays (self.cnMonth);
      }
    ]]>
  </v:method>

  <v:method name="initDays" arglist="inout cMonth datetime">
    <![CDATA[
      declare N, M, wStart, wCount, mStart, mLastday, dStart integer;
      declare cDays any;

      wStart := CAL.WA.dt_WeekDay (cMonth, self.cWeekStarts);
      mLastday := CAL.WA.dt_LastdayOfMonth (cMonth);
      wCount := 4;
      if (wStart <> 1)
        wCount := wCount + 1;
      if (mLastday - 28 - (7 - wStart) > 0)
        wCount := wCount + 1;
      mStart := 1;
      if (wCount = 6 )
        mStart := 0;
      dStart := mStart * 7 + wStart - 1;

      cDays := make_array (49, 'any');
      M := CAL.WA.dt_LastdayOfMonth (dateadd ('day', -1, cMonth));
      for (N := dStart - 1; N >= 0 ; N := N - 1)
      {
        cDays[N] := -M;
        M := M - 1;
      }
      M := 1;
      for (N := dStart; N < dStart + mLastday; N := N + 1)
      {
        cDays[N] := M;
        M := M + 1;
      }
      M := 1;
      for (N := dStart + mLastday; N < 49; N := N + 1)
      {
        cDays[N] := -M;
        M := M + 1;
      }
      return cDays;
    ]]>
  </v:method>

  <v:method name="showTimeZone" arglist="inout fValue any">
    <![CDATA[
      if (is_empty_or_null (fValue))
         return '';
      return sprintf ('GMT %s%02d:00', case when cast (fValue as integer) < 0 then '-' else '+' end,  abs(cast (fValue as integer)));
    ]]>
  </v:method>

  <v:method name="showEvent" arglist="in _id integer, in e_event integer, in e_subject varchar, in e_start datetime, in e_end datetime, in e_repeat varchar, in e_repeat_offset integer, in e_reminder integer, in e_continue varchar">
    <![CDATA[
      declare domain_id integer;
      declare showDelete, showAnnotate, color, S, T varchar;

        S := 'null';
        if (not isnull (e_repeat_offset))
          S := cast (e_repeat_offset as varchar);
      color := self.showEventColor (_id);
      showDelete := '';
      showAnnotate := '';
      if (CAL.WA.event_permissions (_id, self.domain_id, self.access_role) = 'W')
      {
        showDelete :=  sprintf ('<span id="d_%d_%s" onclick="eDelete(event, this, %s)">[<span class="EV_delete">X</span>]</span> ', _id, S, S);
        showAnnotate := sprintf ('<img border="0" width="11" height="11" title="Annotate" alt="Annotate" src="image/ann_16.gif" onclick="eAnnotea (event, %d, %d, %d);" /> ', _id, self.domain_id, self.account_id);
      }
      domain_id := (select E_DOMAIN_ID from CAL.WA.EVENTS where E_ID = _id);  
      if (e_event = 1) {
        T := sprintf ('<div id="e_%d_%s" class="EV %s" %s onclick="eEdit(this)" about="%U">%s%s%s<span class="EV_subject">%s%s%V</span> %s</div>', _id, S, 'app', color, SIOC..calendar_event_iri (domain_id, _id), e_continue, showDelete, showAnnotate, self.repeatableImage (e_repeat), self.reminderImage (e_reminder), CAL.WA.show_subject (e_subject), self.permaLink (domain_id, _id));
      } else {
        T := sprintf ('<div id="e_%d_%s" class="EV %s" %s onclick="eEdit(this)" about="%U">%s%s%s<span class="EV_time">%s-%s</span><span class="EV_subject">%s%s%V</span> %s</div>', _id, S, 'app', color, SIOC..calendar_event_iri (domain_id, _id), e_continue, showDelete, showAnnotate, CAL.WA.dt_timestring (e_start), CAL.WA.dt_timestring (e_end), self.repeatableImage (e_repeat), self.reminderImage (e_reminder), CAL.WA.show_subject (e_subject), self.permaLink (domain_id, _id));
      }
      return T;
    ]]>
  </v:method>

  <v:method name="showEventColor" arglist="in _id integer">
    <![CDATA[
      return sprintf ('style="background-color: %s;"', CAL.WA.event_color (_id, self.domain_id));
    ]]>
  </v:method>

  <v:method name="showEventStart" arglist="in e_event integer, in e_time datetime">
    <![CDATA[
      if (not isnull (e_time))
      {
        e_time := CAL.WA.event_gmt2user (e_time, self.cTimezone);
        if (e_event = 1)
        {
        http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s</span>', CAL.WA.dt_datestring (e_time, 'Y.M.D'), CAL.WA.dt_datestring (e_time, self.cDateFormat)));
      } else {
        http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s <span class="EVL_time">%s</span></span>', CAL.WA.dt_datestring (e_time, 'Y.M.D'), CAL.WA.dt_datestring (e_time, self.cDateFormat), CAL.WA.dt_timestring (e_time, self.cTimeFormat)));
      }
      }
    ]]>
  </v:method>

  <v:method name="showEventEnd" arglist="in e_event integer, in e_time datetime">
    <![CDATA[
      if (not isnull (e_time))
      {
        e_time := CAL.WA.event_gmt2user (e_time, self.cTimezone);
        if (e_event = 1)
        {
        http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s</span>', CAL.WA.dt_datestring (e_time, 'Y.M.D'), CAL.WA.dt_datestring (e_time, self.cDateFormat)));
      } else {
        http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration"><span class="EVL_time">%s</span> %s</span>', CAL.WA.dt_datestring (e_time, 'Y.M.D'), CAL.WA.dt_timestring (e_time, self.cTimeFormat), CAL.WA.dt_datestring (e_time, self.cDateFormat)));
      }
      }
    ]]>
  </v:method>

  <v:method name="showEventDuration" arglist="in e_event integer, in e_start datetime, in e_end datetime">
    <![CDATA[
      if (isnull (e_start))
        return self.showEventEnd (e_event, e_end);
      e_start := CAL.WA.event_gmt2user (e_start, self.cTimezone);
      e_end := CAL.WA.event_gmt2user (e_end, self.cTimezone);
      if (CAL.WA.dt_compare (e_start, e_end))
      {
        if (e_event = 1)
        {
          http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s</span>', CAL.WA.dt_datestring (e_start, 'Y.M.D'), CAL.WA.dt_datestring (e_start, self.cDateFormat)));
        } else {
          http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s <span class="EVL_time">%s</span> - <span class="EVL_time">%s</span></span>', CAL.WA.dt_datestring (e_start, 'Y.M.D'), CAL.WA.dt_datestring (e_start, self.cDateFormat), CAL.WA.dt_timestring (e_start, self.cTimeFormat), CAL.WA.dt_timestring (e_end, self.cTimeFormat)));
        }
      } else {
        if (e_event = 1)
        {
          http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s </span> - <span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s </span>', CAL.WA.dt_datestring (e_start, 'Y.M.D'), CAL.WA.dt_datestring (e_start, self.cDateFormat), CAL.WA.dt_datestring (e_end, 'Y.M.D'), CAL.WA.dt_datestring (e_end, self.cDateFormat)));
        } else {
          http (sprintf ('<span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s <span class="EVL_time">%s</span></span> - <span id="dt_%s" unselectable="on" onclick="eDate(this)" class="EVL EVL_duration">%s <span class="EVL_time">%s</span></span>', CAL.WA.dt_datestring (e_start, 'Y.M.D'), CAL.WA.dt_datestring (e_start, self.cDateFormat), CAL.WA.dt_timestring (e_start, self.cTimeFormat), CAL.WA.dt_datestring (e_end, 'Y.M.D'), CAL.WA.dt_datestring (e_end, self.cDateFormat), CAL.WA.dt_timestring (e_end, self.cTimeFormat)));
        }
      }
    ]]>
  </v:method>

  <v:method name="showEventSubject" arglist="in _id integer, in e_event integer, in e_subject varchar, in e_repeat varchar, in e_reminder varchar, in e_attendees integer">
    <![CDATA[
      declare domain_id integer;
      
      domain_id := (select E_DOMAIN_ID from CAL.WA.EVENTS where E_ID = _id);  
      http (sprintf ('<a id="e_%d" href="javascript: eEdit(\'e_%d\');" class="EVL EVL_subject %s" about="%U" style="text-decoration: none;"> %s%s%s%V</a> %s', _id, _id, 'app', SIOC..calendar_event_iri(domain_id, _id), self.repeatableImage (e_repeat), self.reminderImage (e_reminder), self.attendeesImage (e_attendees), CAL.WA.show_subject (e_subject), self.permaLink (domain_id, _id)));
    ]]>
  </v:method>

  <v:method name="showContinue" arglist="in dt datetime, in e_event integer, in e_start datetime, in e_end datetime">
    <![CDATA[
      declare S varchar;

      S := '';
      if (e_event = 1)
      {
        if (CAL.WA.dt_dateClear (e_start) < CAL.WA.dt_dateClear (dt))
          S := '<img src="image/tr_close2.gif" border="0" />';
        if (CAL.WA.dt_dateClear (e_end) > CAL.WA.dt_dateClear (dt))
        {
          if (S <> '')
          {
            S := '... ';
          } else {
            S := '<img src="image/tr_close.gif" border="0" />';
          }
        }
      }
      return S;
    ]]>
  </v:method>

  <v:method name="repeatableImage" arglist="in eRepeat any">
    <![CDATA[
      if (is_empty_or_null (eRepeat))
        return '';
      return '<img border="0" width="11" height="11" title="Repeatable Event" alt="Repeatable Event" src="image/repeatable.gif" /> ';
    ]]>
  </v:method>

  <v:method name="reminderImage" arglist="in eReminder any">
    <![CDATA[
      if (is_empty_or_null (eReminder))
        return '';
      return '<img border="0" width="11" height="11" title="Has Reminder" alt="Has Reminder" src="image/reminder.gif" /> ';
    ]]>
  </v:method>

  <v:method name="attendeesImage" arglist="in eAttendees any">
    <![CDATA[
      if (eAttendees <= 0)
        return '';
      return '<img border="0" width="11" height="11" title="Has Attendees" alt="Has Attendees" src="image/group_16.png" /> ';
    ]]>
  </v:method>

  <v:method name="permaLink" arglist="in domain_id integer, in id integer">
    <![CDATA[
      return sprintf('<a href="%s" title="PermaLink" alt="PermaLink">(<img border="0" width="11" height="11" src="image/link.gif" />)</a>', SIOC..calendar_event_iri(domain_id, id));
    ]]>
  </v:method>

  <v:method name="calcDate" arglist="in N integer">
    <![CDATA[
      if (self.cDays [N] > 0)
        return cast (dateadd ('day', self.cDays [N] - 1, self.cMonth) as date);
      if ((self.cDays [N] < 0) and (N < 24))
        return cast (dateadd ('day', abs (self.cDays [N]) - 1, dateadd ('month', -1, self.cMonth)) as date);
      if ((self.cDays [N] < 0) and (N > 24))
        return cast (dateadd ('day', abs (self.cDays [N]) - 1, dateadd ('month', 1, self.cMonth)) as date);
    ]]>
  </v:method>

  <v:method name="nCalcDate" arglist="in N integer">
    <![CDATA[
      if (self.cnDays [N] > 0)
        return cast (dateadd ('day', self.cnDays [N] - 1, self.cnMonth) as date);
      if ((self.cnDays [N] < 0) and (N < 24))
        return cast (dateadd ('day', abs (self.cnDays [N]) - 1, dateadd ('month', -1, self.cnMonth)) as date);
      if ((self.cnDays [N] < 0) and (N > 24))
        return cast (dateadd ('day', abs (self.cnDays [N]) - 1, dateadd ('month', 1, self.cnMonth)) as date);
    ]]>
  </v:method>

  <v:method name="repeatParam" arglist="in eRepeat varchar, in cRepeat varchar, in cRepeatParam integer, in cRepeatIndex integer">
    <![CDATA[
      if (eRepeat = cRepeat)
      {
        if (eRepeat = 'D1')
        {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
        }
        if (eRepeat = 'W1') {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return bit_and (cast (self.v_repeatParam2 as integer), power (2, cRepeatIndex));
        }
        if (eRepeat = 'M1')
        {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return self.v_repeatParam2;
        }
        if (eRepeat = 'M2')
        {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return self.v_repeatParam2;
          if (cRepeatParam = 3)
            return self.v_repeatParam3;
        }
        if (eRepeat = 'Y1')
        {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return self.v_repeatParam2;
        }
        if (eRepeat = 'Y2')
        {
          if (cRepeatParam = 1)
            return self.v_repeatParam1;
          if (cRepeatParam = 2)
            return self.v_repeatParam2;
          if (cRepeatParam = 3)
            return self.v_repeatParam3;
        }
      }
      return '';
    ]]>
  </v:method>

  <v:method name="singleObjectName" arglist="in objectsName any">
    <![CDATA[
      if (objectsName = 'events')
        return 'Event';
      if (objectsName = 'tasks')
        return 'Task';
      return '';
    ]]>
  </v:method>

  <v:method name="viewField" arglist="inout fValue any">
    <![CDATA[
      if (self.cAction <> 'view')
       return;

         if (is_empty_or_null (fValue))
         {
           http ('&nbsp;');
         } else {
           if (internal_type (fValue) = 211) {
             http (CAL.WA.dt_datestring (fValue, self.cDateFormat));
           } else {
             http (CAL.WA.utf2wide (cast (fValue as varchar)));
           }
         }
    ]]>
  </v:method>

  <v:method name="viewDescription" arglist="inout fValue any">
    <![CDATA[
      if (self.cAction <> 'view')
        return;
         if (is_empty_or_null (fValue))
         {
           http ('&nbsp;');
         } else {
           if (internal_type (fValue) = 211)
           {
             http (CAL.WA.dt_datestring (fValue, self.cDateFormat));
           } else {
             http ('<pre>');
             http (CAL.WA.utf2wide (cast (fValue as varchar)));
             http ('</pre>');
           }
         }
    ]]>
  </v:method>

  <v:method name="arrays4Reminder" arglist="inout x any, inout y any">
    <![CDATA[
      x := make_array (14, 'any');
      x[0] := 'No reminder';
      x[1] := '5 minutes';
      x[2] := '10 minutes';
      x[3] := '15 minutes';
      x[4] := '20 minutes';
      x[5] := '25 minutes';
      x[6] := '30 minutes';
      x[7] := '45 minutes';
      x[8] := '1 hour';
      x[9] := '2 hours';
      x[10]:= '3 hours';
      x[11]:= '1 day';
      x[12]:= '2 days';
      x[13]:= '1 week';
      y:= make_array (14, 'any');
      y[0] := '-1';
      y[1] := '300';
      y[2] := '600';
      y[3] := '900';
      y[4] := '1200';
      y[5] := '1500';
      y[6] := '1800';
      y[7] := '2700';
      y[8] := '3600';
      y[9] := '7200';
      y[10]:= '10800';
      y[11]:= '86400';
      y[12]:= '172800';
      y[13]:= '604800';
    ]]>
  </v:method>

  <v:method name="initNewEvent" arglist="">
    <![CDATA[
      declare pYear, pMonth, pDay, pHour, pMinute integer;

      self.v_id := -1;
      self.v_subject := '';
      self.v_description := '';
      self.v_location := '';
      self.v_privacy := CAL.WA.domain_is_public (self.domain_id);
      self.v_attendees := '';
      self.v_attendees_count := 0;
      self.v_tags := '';
      self.v_event := 0;
      if (isnull (self.on_date))
      {
        CAL.WA.dt_dateDecode (self.cDay, pYear, pMonth, pDay);
      } else {
        CAL.WA.dt_dateDecode (self.calcDate (self.on_date), pYear, pMonth, pDay);
      }
      if (isnull (self.on_time)) {
        CAL.WA.dt_timeDecode (CAL.WA.dt_curtime (self.cTimeZone), pHour, pMinute);
      } else {
        if (self.on_time = -1)
        {
          self.v_event := 1;
          pHour := 12;
          pMinute := 0;
        } else {
          pHour := self.on_time / 60;
          pMinute := mod (self.on_time, 60);
        }
      }
      self.v_eventStart := CAL.WA.dt_encode (pYear, pMonth, pDay, pHour, pMinute);
      self.v_eventEnd := dateadd ('hour', 1, self.v_eventStart);
      self.v_repeat := '';
      self.v_repeatParam1 := 0;
      self.v_repeatParam2 := 0;
      self.v_repeatParam3 := 0;
      self.v_repeatUntil := null;
      self.v_reminder := 600;
      self.v_notes := '';
    ]]>
  </v:method>

  <v:method name="saveEvent" arglist="">
    <![CDATA[
      declare N integer;
      declare tmp, params, sd, ed any;

      declare exit handler for SQLSTATE '*'
      {
        if (__SQL_STATE = 'TEST')
        {
          self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
          self.vc_is_valid := 0;
          return;
        }
        resignal;
      };

      params := self.vc_page.vc_event.ve_params;

      self.v_subject := trim (self.e_subject.ufl_value);
      self.v_location := trim (self.e_location.ufl_value);
      self.v_description := trim (self.e_description.ufl_value);
      self.v_attendees := trim (self.e_attendees.ufl_value);
      if ((self.cAction = 'create') or (CAL.WA.event_permissions (self.v_id, self.domain_id, self.access_role) = 'W'))
      self.v_privacy := cast (self.e_privacy.ufl_value as integer);
      self.v_tags := trim (self.e_tags.ufl_value);
      self.v_notes := trim (get_keyword ('e_notes', params, ''));

      CAL.WA.test (self.v_subject, vector('name', 'Name', 'class', 'varchar', 'minLength', 0, 'maxLength', 255));
      CAL.WA.test (self.v_location, vector('name', 'Location', 'class', 'varchar', 'minLength', 0, 'maxLength', 255));
      CAL.WA.test (self.v_tags, vector ('name', 'Tags', 'class', 'tags'));
      tmp := CAL.WA.tags2vector (self.v_tags);
      tmp := CAL.WA.vector_unique (tmp);
      self.v_tags := CAL.WA.vector2tags (tmp);

      -- event
      declare pDate date;
      declare pTime time;

      self.v_event := cast (get_keyword ('e_event', params, '0') as integer);
      pDate := CAL.WA.test (trim (self.e_eventStartDate.ufl_value), vector('name', 'Event start date', 'class', 'date-'||self.cDateFormat));
      if (self.v_event = 0)
      {
        pTime := CAL.WA.dt_stringtime (self.e_eventStartTime.ufl_value);
      } else {
        pTime := CAL.WA.dt_timeEncode (12, 0);
      }
      self.v_eventStart := CAL.WA.dt_join (pDate, pTime);
      pDate := CAL.WA.test (trim (self.e_eventEndDate.ufl_value), vector('name', 'Event end date', 'class', 'date-'||self.cDateFormat));
      if (self.v_event = 0)
      {
        pTime := CAL.WA.dt_stringtime (self.e_eventEndTime.ufl_value);
      } else {
        pTime := CAL.WA.dt_timeEncode (12, 0);
      }
      self.v_eventEnd := CAL.WA.dt_join (pDate, pTime);
      if (self.v_eventEnd < self.v_eventStart)
        signal ('TEST', '''End date'' value should be greater then ''Start date'' value!<>');

      -- repeat
      self.v_repeat := trim (get_keyword ('e_repeat', params, ''));
      self.v_repeatParam1 := 0;
      self.v_repeatParam2 := 0;
      self.v_repeatParam3 := 0;
      if (self.v_repeat = 'D1')
      {
        self.v_repeatParam1 := self.e_repeat_param1_D1.ufl_value;
        self.v_repeatParam1 := CAL.WA.test (self.v_repeatParam1, vector('name', 'Day(s)', 'class', 'integer', 'minValue', 1));
      }
      if (self.v_repeat = 'W1')
      {
        self.v_repeatParam1 := self.e_repeat_param1_W1.ufl_value;
        self.v_repeatParam1 := CAL.WA.test (self.v_repeatParam1, vector('name', 'Week(s)', 'class', 'integer', 'minValue', 1));
        self.v_repeatParam2 := 0;
        for (N := 0; N < 7; N := N + 1)
          if (cast (get_keyword ('e_repeat_param2_W1_' || cast (N as varchar), params, '0') as integer))
            self.v_repeatParam2 := bit_or (self.v_repeatParam2, power (2, N));
      }
      if (self.v_repeat = 'M1')
      {
        self.v_repeatParam1 := cast (self.e_repeat_param1_M1.ufl_value as integer);
        self.v_repeatParam2 := cast (self.e_repeat_param2_M1.ufl_value as integer);
      }
      if (self.v_repeat = 'M2')
      {
        self.v_repeatParam1 := cast (self.e_repeat_param1_M2.ufl_value as integer);
        self.v_repeatParam2 := cast (self.e_repeat_param2_M2.ufl_value as integer);
        self.v_repeatParam3 := cast (self.e_repeat_param3_M2.ufl_value as integer);
      }
      if (self.v_repeat = 'Y1')
      {
        self.v_repeatParam1 := self.e_repeat_param1_Y1.ufl_value;
        self.v_repeatParam1 := CAL.WA.test (self.v_repeatParam1, vector('name', 'Year(s)', 'class', 'integer', 'minValue', 1));
        self.v_repeatParam2 := self.e_repeat_param2_Y1.ufl_value;
      }
      if (self.v_repeat = 'Y2')
      {
        self.v_repeatParam1 := cast (self.e_repeat_param1_Y2.ufl_value as integer);
        self.v_repeatParam2 := cast (self.e_repeat_param2_Y2.ufl_value as integer);
        self.v_repeatParam3 := cast (self.e_repeat_param3_Y2.ufl_value as integer);
      }

      -- range
      if (self.v_repeat = '')
      {
        self.v_repeatUntil := null;
      } else {
        if (cast (get_keyword ('e_repeatUntilKind', params, '0') as integer) = 1)
        {
          self.v_repeatUntil := CAL.WA.test (trim (self.e_repeatUntil.ufl_value), vector('name', 'Range until date', 'class', 'date-'||self.cDateFormat));
        } else {
          self.v_repeatUntil := null;
        }
      }

      -- reminder
      self.v_reminder := cast (trim (self.e_reminder.ufl_value) as integer);

      CAL.WA.event_update (
        self.v_id,
        null,
        self.domain_id,
        self.v_subject,
        self.v_description,
        self.v_location,
        self.v_attendees,
        self.v_privacy,
        self.v_tags,
        self.v_event,
        CAL.WA.event_user2gmt (self.v_eventStart, self.cTimezone),
        CAL.WA.event_user2gmt (self.v_eventEnd, self.cTimezone),
        self.v_repeat,
        self.v_repeatParam1,
        self.v_repeatParam2,
        self.v_repeatParam3,
        self.v_repeatUntil,
        self.v_reminder,
        self.v_notes
      );

      if (self.cScope = 'tasks')
        self.cScope := 'events';
    ]]>
  </v:method>

  <v:method name="initNewTask" arglist="">
    <![CDATA[
      self.v_id := -1;
      self.v_subject := '';
      self.v_description := '';
      self.v_privacy := CAL.WA.domain_is_public (self.domain_id);
      self.v_attendees := '';
      self.v_attendees_count := 0;
      self.v_tags := '';
      self.v_eventStart := null;
      self.v_eventEnd := self.cDay;
      self.v_priority := 3;
      self.v_status := '';
      self.v_complete := 0;
      self.v_completed := null;
      self.v_notes := '';
    ]]>
  </v:method>

  <v:method name="saveTask" arglist="">
    <![CDATA[
      declare tmp, params any;

      declare exit handler for SQLSTATE '*'
      {
        if (__SQL_STATE = 'TEST')
        {
          self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
          self.vc_is_valid := 0;
          return;
        }
        resignal;
      };

      params := self.vc_page.vc_event.ve_params;

      self.v_subject := trim (self.t_subject.ufl_value);
      self.v_description := trim (self.t_description.ufl_value);
      self.v_priority := cast (self.t_priority.ufl_value as integer);
      self.v_status := self.t_status.ufl_value;
      self.v_complete := cast (self.t_complete.ufl_value as integer);
      self.v_attendees := trim (self.t_attendees.ufl_value);
      if ((self.cAction = 'create') or (CAL.WA.event_domain (self.v_id) = self.domain_id))
      self.v_privacy := cast (self.t_privacy.ufl_value as integer);
      self.v_tags := trim (self.t_tags.ufl_value);
      self.v_notes := trim (get_keyword ('t_notes', params, ''));

      CAL.WA.test (self.v_subject, vector('name', 'Name', 'class', 'varchar', 'minLength', 1, 'maxLength', 255));
      CAL.WA.test (self.v_tags, vector ('name', 'Tags', 'class', 'tags'));
      tmp := CAL.WA.tags2vector (self.v_tags);
      tmp := CAL.WA.vector_unique (tmp);
      self.v_tags := CAL.WA.vector2tags (tmp);

      self.v_eventStart := CAL.WA.test (trim (self.t_eventStartDate.ufl_value), vector('name', 'Task start date', 'class', 'date-'||self.cDateFormat));
      if (self.v_eventStart = '')
      {
        self.v_eventStart := null;
      } else {
        self.v_eventStart := CAL.WA.dt_join (self.v_eventStart, CAL.WA.dt_timeEncode (12, 0));
      }

      self.v_eventEnd := CAL.WA.test (trim (self.t_eventEndDate.ufl_value), vector('name', 'Task due date', 'class', 'date-'||self.cDateFormat));
      if (self.v_eventEnd = '')
      {
        self.v_eventEnd := null;
      } else {
        self.v_eventEnd := CAL.WA.dt_join (self.v_eventEnd, CAL.WA.dt_timeEncode (12, 0));
      }
      if (self.v_eventEnd < self.v_eventStart)
        signal ('TEST', '''Due date'' value should be greater then ''Start date'' value!<>');

      if ((self.v_complete = 100) or (self.v_status = 'Completed'))
      {
        if (isnull (self.v_eventStart))
          signal ('TEST', '''Start date'' value can''t be empty for completed tasks!<>');
        if (isnull (self.v_eventEnd))
          signal ('TEST', '''Due date'' value can''t be empty for completed tasks!<>');
      }

      self.v_completed := CAL.WA.test (trim (self.t_completed.ufl_value), vector('name', 'Task completed date', 'class', 'date-'||self.cDateFormat));
      if (self.v_completed = '')
        self.v_completed := null;
      if ((isnull (self.v_completed)) and ((self.v_complete = 100) or (self.v_status = 'Completed')))
        self.v_completed := CAL.WA.dt_curdate ();
      if (not isnull (self.v_completed))
        self.v_completed := CAL.WA.dt_join (self.v_completed, CAL.WA.dt_timeEncode (12, 0));
      if (self.v_completed < self.v_eventStart)
        signal ('TEST', '''Completed date'' value should be greater then ''Start date'' value!<>');

      CAL.WA.task_update (
        self.v_id,
        null,
        self.domain_id,
        self.v_subject,
        self.v_description,
        self.v_attendees,
        self.v_privacy,
        self.v_tags,
        CAL.WA.event_user2gmt (self.v_eventStart, self.cTimezone),
        CAL.WA.event_user2gmt (self.v_eventEnd, self.cTimezone),
        self.v_priority,
        self.v_status,
        self.v_complete,
        self.v_completed,
        self.v_notes
      );
    ]]>
  </v:method>

  <v:method name="columnEnabled" arglist="in columnVisibleName varchar, in defaultVisible integer">
    <![CDATA[
      return cast (get_keyword (columnVisibleName, self.settings, defaultVisible) as integer);
    ]]>
  </v:method>

  <v:method name="columnHeaderShow" arglist="in columnVisibleName varchar, in defaultVisible integer, in isSortable integer, in titleName varchar, in columnWidth integer, in columnName varchar, in fieldName varchar, in dsOrder varchar, in dsDirection varchar">
    <![CDATA[
      declare S varchar;

      if (not cast (get_keyword (columnVisibleName, self.settings, defaultVisible) as integer))
        return;

      S := '';
      if (not isnull (columnWidth))
        S := sprintf ('width="%s"', columnWidth);
      http (sprintf ('<th nowrap="nowrap" %s>', S));
      if (isSortable = 1)
      {
        self.sortColumn (titleName, columnName, fieldName, dsOrder, dsDirection);
      } else {
        http (titleName);
      }
      http ('</th>');
    ]]>
  </v:method>

  <v:method name="priorityLabel" arglist="in priority integer">
    <![CDATA[
     if (priority = 1)
       return 'Highest';
     if (priority = 2)
       return 'High';
     if (priority = 4)
       return 'Low';
     if (priority = 5)
       return 'Lowest';
     return 'Normal';
    ]]>
  </v:method>

  <v:method name="myTags" arglist="in fieldName varchar">
    <![CDATA[
      if ((select count (*) from CAL.WA.TAGS where T_DOMAIN_ID = self.domain_id and T_COUNT > 0 and T_TAG <> '' order by T_TAG))
      {
        http ('<tr>');
        http ('<th>My Tags</th>');
          http ('<td>');
            for (select T_TAG from CAL.WA.TAGS where T_DOMAIN_ID = self.domain_id and T_COUNT > 0 and T_TAG <> '' order by T_TAG) do
            {
              http (sprintf ('<a href="#" onclick="javascript: addTag(\'%s\', \'%s\');">%s</a> ', T_TAG, fieldName, T_TAG));
            }
          http ('</td>');
        http ('</tr>');
      }
    ]]>
  </v:method>

  <v:method name="eventHeader" arglist="in id integer, in objectName varchar">
    <![CDATA[
      declare event_domain_id integer;
      declare S varchar;

      S := initcap (self.cAction) || ' ' || objectName;
      event_domain_id := (select E_DOMAIN_ID from CAL.WA.EVENTS where E_ID = id);
      if (event_domain_id <> self.domain_id)
        S := S || sprintf (' (Calendar: %V)', CAL.WA.domain_name (event_domain_id));

      return S;
    ]]>
  </v:method>

  <vm:pagetitle>Calendar</vm:pagetitle>
  <vm:pagewrapper>
    <vm:header>
      Calendar
    </vm:header>
    <vm:variables>
      <v:variable persist="0" name="e_order" type="varchar" default="'E_EVENT_START'" />
      <v:variable persist="0" name="e_direction" type="varchar" default="'asc'" />

      <v:variable persist="0" name="t_order" type="varchar" default="'E_EVENT_START'" />
      <v:variable persist="0" name="t_direction" type="varchar" default="'asc'" />

      <v:variable persist="0" name="s_order" type="varchar" default="'E_EVENT_START'" />
      <v:variable persist="0" name="s_direction" type="varchar" default="'asc'" />

      <v:variable persist="0" name="cAction" type="varchar" default="'browse'" />
      <v:variable persist="0" name="cSubAction" type="varchar" default="''" />
      <v:variable persist="0" name="cScope" type="varchar" default="null" />
      <v:variable persist="0" name="cSearch" type="any" default="null" />

      <v:variable persist="0" name="cDay" type="date" default="null" />
      <v:variable persist="0" name="cMonth" type="date" default="null" />
      <v:variable persist="0" name="cDays" type="any" default="null" />
      <v:variable persist="0" name="cStart" type="date" default="null" />
      <v:variable persist="0" name="cEnd" type="date" default="null" />

      <v:variable persist="0" name="cnMonth" type="date" default="null" />
      <v:variable persist="0" name="cnDays" type="any" default="null" />

      <v:variable name="cLabels" type="integer" default="1" />
      <v:variable name="cChars" type="integer" default="60" />
      <v:variable name="cShowTasks" type="integer" default="1" />
      <v:variable name="cPrivacy" type="integer" default="0" />

      <v:variable name="icStep" type="varchar" default="''" />
      <v:variable name="icSource" type="any" default="-1" />
      <v:variable name="icType" type="any" default="-1" />

      <v:variable persist="temp" name="on_date" type="integer" default="null" />
      <v:variable persist="temp" name="on_time" type="integer" default="null" />
      <v:variable name="v_id" type="any" default="-1" />
      <v:variable name="v_subject" type="varchar" default="''"/>
      <v:variable name="v_description" type="varchar" default="''"/>
      <v:variable name="v_location" type="varchar" default="''"/>
      <v:variable name="v_event" type="integer" default="0"/>
      <v:variable name="v_eventStart" type="datetime" default="null"/>
      <v:variable name="v_eventEnd" type="datetime" default="null"/>
      <v:variable name="v_completed" type="datetime" default="null" />
      <v:variable name="v_privacy" type="integer" default="0" />
      <v:variable name="v_attendees" type="varchar" default="''" />
      <v:variable name="v_attendees_count" type="integer" default="0" />
      <v:variable name="v_tags" type="varchar" default="''"/>
      <v:variable name="v_repeat" type="varchar" default="''"/>
      <v:variable name="v_repeatParam1" type="integer" default="0"/>
      <v:variable name="v_repeatParam2" type="integer" default="0"/>
      <v:variable name="v_repeatParam3" type="integer" default="0"/>
      <v:variable name="v_repeatUntil" type="date" default="null"/>
      <v:variable name="v_reminder" type="integer" default="600"/>

      <v:variable name="v_priority" type="integer" default="3"/>
      <v:variable name="v_complete" type="integer" default="0"/>
      <v:variable name="v_status" type="varchar" default="''"/>
      <v:variable name="v_notes" type="varchar" default="''" />

      <v:variable name="vg_id" type="any" default="null" />
      <v:variable name="vg_account_id" type="varchar" default="null" />
      <v:variable name="vg_account" type="varchar" default="''" />
      <v:variable name="vg_enable" type="integer" default="1" />
      <v:variable name="vg_mode" type="varchar" default="'R'" />

      <v:variable name="vs_id" type="any" default="null" />
      <v:variable name="vs_calendar" type="varchar" default="''" />
      <v:variable name="vs_grant_id" type="varchar" default="null" />
      <v:variable name="vs_calendar_id" type="varchar" default="null" />
      <v:variable name="vs_visible" type="varchar" default="1" />
      <v:variable name="vs_color" type="varchar" default="'#888'" />

      <v:variable name="vu_id" type="any" default="-1" />
      <v:variable name="vu_name" type="varchar" default="''" />
      <v:variable name="vu_uri" type="varchar" default="''" />
      <v:variable name="vu_user" type="varchar" default="''" />
      <v:variable name="vu_password" type="varchar" default="''" />
      <v:variable name="vu_include" type="varchar" default="''" />
      <v:variable name="vu_exclude" type="varchar" default="''" />

      <v:variable name="v_tabNo" param-name="tabNo" type="varchar" default="0" />

      <v:variable name="tv_status" type="varchar" default="'All'" />
    </vm:variables>
    <vm:pagebody>
      <table id="MTB">
        <tr>
          <!-- Navigation left column -->
          <td id="LC">
            <vm:if test="self.cAction <> 'settings'">
              <vm:if test="self.access_role not in ('public', 'guest')">
                <vm:event />
              </vm:if>
              <vm:calendar />
              <vm:calendars />
              <vm:exchange />
              <vm:formats />
            </vm:if>
            <vm:if test="self.cAction = 'settings'">
              <div class="lc lc_close">
                <a href="javascript: vspxPost('command', 'select', 'settings', 'mode', 'settings');" title="Settings" class="gems2">Settings</a>
                <a href="javascript: vspxPost('command', 'select', 'settings', 'mode', 'upstreamBrowse');" title="Import" class="gems2">Upstreams</a>
                <a href="javascript: vspxPost('command', 'select', 'settings', 'mode', 'grantBrowse');" title="Share My Calendar" class="gems2">Share My Calendar</a>
                <a href="javascript: vspxPost('command', 'select', 'settings', 'mode', 'sharedBrowse');" title="Accepted Calendars" class="gems2">Accepted Calendars</a>
                <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
                <a href="javascript: vspxPost('command', 'select', 'settings', 'mode', 'back');" title="Back" class="gems2">Back</a>
              </div>
            </vm:if>
          </td>
          <!-- Navigation right column -->
          <td id="RC">
            <v:template type="simple" condition="not self.vc_is_valid">
              <div class="error">
                <p><v:error-summary/></p>
              </div>
            </v:template>
            <div class="main_page_area">
      <v:before-data-bind>
        <![CDATA[
          self.actionTest ();
          self.initData ();
        ]]>
      </v:before-data-bind>
      <?vsp
        declare sparqlUrl, graphIri any;
        
        sparqlUrl := 'http://' || SIOC..get_cname () || '/sparql';
        graphIri := SIOC..get_graph ();
        http(sprintf('<input type="hidden" id="sparqlUrl" name="sparqlUrl" value="%s?default-graph-uri=%U&amp;query=%U&amp;format=%U"/>', sparqlUrl, graphIri, 'DESCRIBE <_RDF_>', 'application/sparql-results+xml')); 
      ?>
      <v:text name="tabNo" xhtml_id="tabNo" type="hidden" value="--self.v_tabNo" />
      <?vsp
        if (0)
        {
      ?>
          <v:button name="command" action="simple" value="Submit">
            <v:on-post>
              <![CDATA[
                      declare N, cCommand, cMode, cPermission, cParams, kind any;

                cCommand := get_keyword ('export', e.ve_params, '');
                if (cCommand in ('rss', 'atom', 'rdf'))
                {
                  declare S varchar;

                  S := sprintf('export.vspx?output=%s&scope=%s', cCommand, self.cScope);
                  if (self.cScope = 'search')
                  {
                    if (trim (self.s_keywords.ufl_value) <> '')
                      S := S || '&keywords=' || trim (self.s_keywords.ufl_value);
                    if (trim (self.s_tags.ufl_value) <> '')
                      S := S || '&tags=' || trim (self.s_tags.ufl_value);
                  }

                  self.vc_redirect(S);
                  return;
                }

                cCommand := get_keyword ('select', e.ve_params, '');
                      if (cCommand <> '')
                      {
                        if (cCommand = 'create')
                        {
                    self.cAction := 'create';
                    if (get_keyword ('mode', e.ve_params, 'event') = 'task')
                    {
                      self.cScope := 'tasks';
                      self.initNewTask ();
                    } else {
                      self.initNewEvent ();
                      if ((self.cScope = 'tasks') or (self.cScope = 'search'))
                        self.cScope := 'events';
                    }
                    if (get_keyword ('onDate', e.ve_params, '') <> '')
                      self.on_date := cast (get_keyword ('onDate', e.ve_params) as integer);
                    if (get_keyword ('onTime', e.ve_params, '') <> '')
                      self.on_time := cast (get_keyword ('onTime', e.ve_params) as integer);
                  } else {
                    cParams := split_and_decode(cCommand, 0,'\0\0_');
                          if (length (cParams) > 2)
                          {
                            if (cParams[1] = 'month')
                            {
                        if (atoi (cParams[2]) = -1)
                          self.cnMonth := dateadd ('month', -1, self.cnMonth);
                        if (atoi (cParams[2]) = 1)
                          self.cnMonth := dateadd ('month', 1, self.cnMonth);
                              if (atoi (cParams[2]) = 0)
                              {
                          if ((self.cDay < self.cnMonth) or (self.cDay > CAL.WA.dt_EndOfMonth (self.cnMonth)))
                                  if (dayofmonth (self.cDay) > CAL.WA.dt_LastDayOfMonth (self.cnMonth))
                                  {
                              self.cDay := CAL.WA.dt_EndOfMonth (self.cnMonth);
                            } else {
                              self.cDay := dateadd ('day', dayofmonth (self.cDay)-1, self.cnMonth);
                            }
                          self.cScope := 'month';
                          self.cMonth := null;
                          self.cnMonth := null;
                        }
                      }
                            if (cParams[1] = 'day')
                            {
                        self.cMonth := self.cnMonth;
                        N := atoi (cParams[2]) * 7 + atoi (cParams[3]);
                        self.cDay := self.calcDate (N);
                        if ((cParams[0] = 'd') or ((self.cDay >= self.cStart) and (self.cDay <= self.cEnd)) or (self.cScope = 'events'))
                          self.cScope := 'day';
                        self.cMonth := null;
                        self.cnMonth := null;
                      }
                      self.cAction := 'browse';
                      self.initData ();
                    }
                  }
                        if (cCommand = 'settings')
                        {
                          cMode := get_keyword ('mode', e.ve_params, '');
                          if (cMode = 'settings')
                          {
                            self.cSubAction := '';
                          }
                          if (cMode = 'upstreamBrowse')
                          {
                            self.cSubAction := cMode;
                          }
                          if (cMode = 'sharedBrowse')
                          {
                            self.cSubAction := cMode;
                          }
                          if (cMode = 'grantBrowse')
                          {
                            self.cSubAction := cMode;
                          }
                          if (cMode = 'sharedUpdate')
                          {
                            self.cAction := cCommand;
                            self.cSubAction := cMode;
                            self.vs_id := cast (get_keyword ('id', e.ve_params) as integer);
                          }
                          if (cMode = 'back')
                          {
                            self.cAction := 'browse';
                            self.cSubAction := '';
                          }
                        }
                }
                
                cCommand := get_keyword ('date', e.ve_params, '');
                      if (cCommand <> '')
                      {
                  cParams := split_and_decode(cCommand, 0,'\0\0_');
                        if (length (cParams) > 1)
                        {
                    self.cDay := stringdate (cParams [1]);
                    self.cMonth := null;
                    self.cAction := 'browse';
                    self.cScope := 'day';
                  }
                }

                cCommand := get_keyword ('edit', e.ve_params, '');
                      if (cCommand <> '')
                      {
                  cParams := split_and_decode(cCommand, 0,'\0\0_');
                        if (length (cParams) > 1)
                        {
                    self.v_id := cast (cParams [1] as integer);
                          cPermission := CAL.WA.event_permissions (self.v_id, self.domain_id, self.access_role);
                          if (cPermission = 'W')
                          {
                    self.cAction := 'edit';
                          }
                          else if (cPermission = 'R')
                          {
                            self.cAction := 'view';
                          }
                          else
                          {
                            return;
                          }
                    kind := CAL.WA.event_kind (self.v_id);
                    if ((kind = 'event') and (self.cScope in ('tasks', 'search')))
                      self.cScope := 'events';
                    if (kind = 'task')
                      self.cScope := 'tasks';
                  }
                }

                cCommand := get_keyword ('delete', e.ve_params, '');
                      if (cCommand <> '')
                      {
                  cParams := split_and_decode(cCommand, 0,'\0\0_');
                  if (length (cParams) > 1)
                        {
                          self.v_id := cast (cParams [1] as integer);
                          if (CAL.WA.event_permissions (self.v_id, self.domain_id, self.access_role) <> 'W')
                          {
                            return;
                          }
                          CAL.WA.event_delete (self.v_id, get_keyword ('onOffset', e.ve_params));
                        }
                }

                cCommand := get_keyword ('exchange', e.ve_params, '');
                      if (cCommand <> '')
                      {
                        if (cCommand = 'import')
                        {
                  self.cAction := cCommand;
                    self.icStep := '1';
                    self.icSource := -1;
                    self.icType := 0;
                    self.v_tags := '';
                  }
                        if (cCommand = 'export')
                        {
                    http_rewrite ();
                    http_request_status ('HTTP/1.1 200 OK');
                    http_header ('Content-Type: text/plain\r\n');
                    http_header ('Content-Disposition: inline; filename="calendar.ics"\r\n');
                    http (CAL.WA.export_vcal (self.domain_id));
                    http_flush ();
                  }
                }

                self.vc_data_bind(e);
               ]]>
             </v:on-post>
          </v:button>
      <?vsp
        }
      ?>

      <vm:if test="self.cAction in ('browse', 'advanced')">
        <vm:if test="self.cAction = 'advanced'">
          <div class="new-form-body">
            <table cellspacing="0">
              <tr>
                <th width="30%">
                  <v:label for="" value="Space delimited keyword list" />
                </th>
                <td>
                  <v:text name="s_keywords" value="--CAL.WA.xml_get ('keywords', self.cSearch)" xhtml_class="textbox" xhtml_size="60"/>
                </td>
              </tr>
              <tr>
                <th>
                  <vm:label for="s_tags" value="Tags (comma-separated)" />
                </th>
                <td>
                  <v:text name="s_tags" value="--CAL.WA.xml_get ('tags', self.cSearch)" xhtml_class="textbox" xhtml_size="60"/>
                </td>
              </tr>
            </table>
          </div>
          <div class="new-form-footer" style="margin: 0;   border-top: 0;">
            <v:button action="simple" value="Search" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.cSearch := null;
                  CAL.WA.xml_set ('mode', self.cSearch, 'advanced');
                  CAL.WA.xml_set ('keywords', self.cSearch, trim (self.s_keywords.ufl_value));
                  CAL.WA.xml_set ('tags', self.cSearch, trim (self.s_tags.ufl_value));
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            <v:button action="simple" value="Cancel" name="s_cancel" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.cAction := 'browse';
                  self.vc_data_bind (e);
                ]]>
              </v:on-post>
            </v:button>
          </div>
        </vm:if>

        <table cellspacing="0" style="width: 100%;">
          <tr style="height: 18px;">
            <td>
              <v:button action="simple" style="url" value="Day" xhtml_class="-- case when (self.cScope = 'day') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Day">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'day';
                    self.cAction := 'browse';
                    self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Week" xhtml_class="-- case when (self.cScope = 'week') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Week">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'week';
                    self.cAction := 'browse';
                    self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Month" xhtml_class="-- case when (self.cScope = 'month') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Month">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'month';
                    self.cAction := 'browse';
                    self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Events" xhtml_class="-- case when (self.cScope = 'events') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Event List">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'events';
                    self.cAction := 'browse';
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Tasks" xhtml_class="-- case when (self.cScope = 'tasks') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Task List">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'tasks';
                    self.cAction := 'browse';
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <vm:if test="not isnull (self.cSearch)">
                <v:button action="simple" style="url" value="Search" xhtml_class="-- case when (self.cScope = 'search') then 'calendar_tab calendar_tabActive' else 'calendar_tab' end" xhtml_alt="Search List">
                  <v:on-post>
                    <![CDATA[
                      self.cScope := 'search';
                      self.cAction := CAL.WA.xml_get ('mode', self.cSearch, 'browse');
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              </vm:if>
            </td>
            <vm:if test="self.cScope not in ('events', 'tasks', 'search')">
            <td align="right">
              <span class="CE_name">
                <?vsp
                  if (self.cScope = 'day')
                    http (sprintf ('%s %d, %d', monthname (self.cDay), dayofmonth (self.cDay), year (self.cDay)));

                    if (self.cScope = 'week')
                    {
                      if (year (self.cStart) <> year (self.cEnd))
                      {
                      http (sprintf ('%s %d, %d - %s %d, %d', monthname (self.cStart), dayofmonth (self.cStart), year (self.cStart), monthname (self.cEnd), dayofmonth (self.cEnd), year (self.cEnd)));
                    } else {
                        if (month (self.cStart) <> month (self.cEnd))
                        {
                        http (sprintf ('%s %d - %s %d, %d', monthname (self.cStart), dayofmonth (self.cStart), monthname (self.cEnd), dayofmonth (self.cEnd), year (self.cEnd)));
                      } else {
                        http (sprintf ('%s %d - %d, %d', monthname (self.cStart), dayofmonth (self.cStart), dayofmonth (self.cEnd), year (self.cEnd)));
                      }
                    }
                  }

                  if (self.cScope = 'month')
                    http (sprintf ('%s %d', monthname (self.cMonth), year (self.cMonth)));

                ?>
              </span>
                <v:button action="simple" style="url" value="--'&amp;lt;'" xhtml_class="calendar_button" xhtml_alt="Previous">
                <v:on-post>
                  <![CDATA[
                    if (self.cScope = 'day')
                      self.cDay := dateadd ('day', -1, self.cDay);
                    if (self.cScope = 'week')
                      self.cDay := dateadd ('day', -7, self.cDay);
                    if (self.cScope = 'month')
                      self.cDay := dateadd ('month', -1, self.cDay);
                      self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
                <v:button action="simple" style="url" value="--'&amp;gt;'" xhtml_class="calendar_button" xhtml_alt="Next">
                <v:on-post>
                  <![CDATA[
                    if (self.cScope = 'day')
                      self.cDay := dateadd ('day', 1, self.cDay);
                    if (self.cScope = 'week')
                      self.cDay := dateadd ('day', 7, self.cDay);
                    if (self.cScope = 'month')
                        if (dayofmonth (self.cDay) > CAL.WA.dt_LastDayOfMonth (dateadd ('month', 1, self.cMonth)))
                        {
                        self.cDay := CAL.WA.dt_LastDayOfMonth (dateadd ('month', 1, self.cMonth));
                      } else {
                        self.cDay := dateadd ('month', 1, self.cDay);
                      }
                      self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" style="url" value="Today" xhtml_class="calendar_button" xhtml_alt="Today">
                <v:on-post>
                  <![CDATA[
                    self.cScope := 'day';
                    self.cDay := CAL.WA.dt_curdate (self.cTimeZone);
                      self.cMonth := null;
                    self.initData ();
                    self.vc_data_bind (e);
                  ]]>
                </v:on-post>
              </v:button>
            </td>
             </vm:if>
          </tr>
        </table>
        <div class="CE_container">
          <v:before-data-bind>
            <![CDATA[
              self.tv_status := get_keyword('tvf_status', self.vc_page.vc_event.ve_params, 'All');
            ]]>
          </v:before-data-bind>
            <table width="100%" cellspacing="0">
              <tr>
                <td>
                      <vm:if test="(self.cScope not in ('day', 'week', 'month')) and (self.access_role not in ('public', 'guest'))">
            <vm:if test="(self.cScope <> 'search')">
                    <v:button value="--'New ' || self.singleObjectName (self.cScope)" action="simple" xhtml_class="button">
              <v:on-post>
                <![CDATA[
                  self.cAction := 'create';
          		    self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            </vm:if>
                        <v:button value="Delete" action="simple" xhtml_onclick="--'javascript: return confirmAction(\'Are you sure that you want to delete the selected item(s)?\', document.F1, \'cb_item\', \'No items were selected for deletion.\');'" xhtml_class="button">
              <v:on-post>
                <![CDATA[
                              declare N, id integer;

                  for (N := 0; N < length(e.ve_params); N := N + 4)
                              {
                    if (e.ve_params[N] = 'cb_item')
                                {
                                  id := cast (e.ve_params[N+1] as integer);
                                  if (CAL.WA.event_permissions (id, self.domain_id, self.access_role) = 'W')
                                    CAL.WA.event_delete(id);
                                }
                              }
          		    self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>

                  <div class="menuBar" id="exportBar">
                    <input type="button" value="Gems" class="menuButton button" onmousedown="return this.blur();" onclick="return menuPopup(this, 'exportMenu');" title="<?V initcap (self.cScope) ?> Gems" />
                    <div class="menu" id="exportMenu">
                      <?vsp
                        http (sprintf ('<a class="menuItem" href="javascript: void (0);" onclick="javascript: vspxPost(\'command\', \'export\', \'rss\')"  title="%s"><img src="image/rss-icon-16.gif"  border="0" alt="%s"/> %s</a>', 'RSS',  'RSS',  'RSS'));
                        http (sprintf ('<a class="menuItem" href="javascript: void (0);" onclick="javascript: vspxPost(\'command\', \'export\', \'atom\')" title="%s"><img src="image/blue-icon-16.gif" border="0" alt="%s"/> %s</a>', 'Atom', 'Atom', 'Atom'));
                        http (sprintf ('<a class="menuItem" href="javascript: void (0);" onclick="javascript: vspxPost(\'command\', \'export\', \'rdf\')"  title="%s"><img src="image/rdf-icon-16.gif"  border="0" alt="%s"/> %s</a>', 'RDF',  'RDF',  'RDF'));
                      ?>
                    </div>
                  </div>
                </vm:if>
                </td>
                <td align="right">
                <vm:if test="(self.cScope = 'tasks')">
                  Show
                  <v:select-list name="tvf_status" xhtml_id="tvf_status" xhtml_onchange="javascript: this.form.submit();">
                    <v:on-init>
                      <![CDATA[
                        declare x any;

                        x := make_array (6, 'any');
                        x[0] := 'All';
                        x[1] := 'Not Started';
                        x[2] := 'In Progress';
                        x[3] := 'Completed';
                        x[4] := 'Waiting.';
                        x[5] := 'Deferred';
                        control.vsl_item_values := x;
                        control.vsl_items := x;
                        control.ufl_value := '';
                      ]]>
                    </v:on-init>
                    <v:before-data-bind>
                      <![CDATA[
                        control.ufl_value := self.tv_status;
                      ]]>
                    </v:before-data-bind>
                  </v:select-list>
                </vm:if>
                  <span id="navigation"></span>
                </td>
              </tr>
            </table>
          <div id="content" class="CE_main">
            <vm:if test="self.cScope in ('day', 'week', 'month')">
              <table class="CE_table" cellspacing="0">
                <?vsp
                  declare N, M, D, W integer;
                  declare pStart, pEnd, hasEvents integer;
                  declare pHour, pMinute integer;
                  declare dt date;
                  declare S, C, onClick varchar;
                  declare V any;

                  if (self.cScope = 'day') {
                    V := make_array (48, 'any');
                    for (N := 0; N < 48; N := N + 1)
                      V[N] := vector ();
                    hasEvents := 0;
                    for (select distinct rs.*
                          from CAL.WA.events_forPeriod (rs0, rs1, rs2, rs3, rs4)(e_id integer, e_event integer, e_subject varchar, e_start datetime, e_end datetime, e_repeat varchar, e_repeat_offset integer, e_reminder integer) rs
                       where rs0 = self.domain_id
                         and rs1 = self.cDay
                         and rs2 = self.cDay
                                 and rs3 = self.cPrivacy
                           and rs4 = self.cShowTasks
                         order by e_event DESC, e_start) do
                    {
                            if (e_event = 1)
                            {
                              if (hasEvents = 0)
                              {
                        http ('<tr class="CE_row">');
                        http ('<th class="CE_cell CE_cell_time">&nbsp;</th>');
                        http ('<td class="CE_cell">');
                        hasEvents := 1;
                      }
                        http (self.showEvent (e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder, self.showContinue (self.cDay, e_event, e_start, e_end)));
                      } else {
                        CAL.WA.dt_timeDecode (e_start, pHour, pMinute);
                        pStart := pHour*2 + pMinute/30;
                        CAL.WA.dt_timeDecode (e_end, pHour, pMinute);
                        pEnd := pHour*2 + pMinute/30;
                              for (N := pStart; N < pEnd; N := N + 1)
                              {
                          S := '';
                          if ((N = pStart) and (pEnd - pStart > 1))
                            S := '<img src="image/tr_close.gif" border="0" />';
                          if ((N = pEnd-1) and (pEnd - pStart > 1))
                            S := '<img src="image/tr_close2.gif" border="0" />';
                          if ((N <> pStart) and (N <> pEnd-1) and (pEnd - pStart > 1))
                            S := '... ';
                          aset (V, N, vector_concat(V[N], vector (self.showEvent (e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder, S))));
                        }
                      }
                    }
                    if (hasEvents) {
                      http ('</td>');
                      http ('</tr>');
                    }

                        C := '';
                        if (CAL.WA.dt_compare (self.cDay, curdate ()))
                          C := C || ' CE_cell_today';
                        if (self.domain_id > 0)
                          C := C || ' CE_cell_pointer';
                          for (N := 0; N < 48; N := N + 1)
                          {
                      http ('<tr class="CE_row">');
                        if (mod (N, 2) = 0)
                          http (sprintf ('<th class="CE_cell CE_cell_time %s" rowspan="2">%s</th>', case when (N = 46) then 'CE_cell_bottom' else '' end, CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N/2, 0), self.cTimeFormat)));
                        onClick := '';
                              if ((self.domain_id > 0) and (self.access_role not in ('public', 'guest')))
                          onClick := sprintf (' onclick="javascript: cNewEvent(event, null, %d);"', N*30);
                        S := '';
                        if (length (V[N]))
                          S := 'style="background: #FAFAFA;"';
                        http (sprintf ('<td class="CE_new CE_cell CE_cell_odd %s" %s %s>', C, S, onClick));

                        for (M := 0; M < length (V[N]); M := M + 1)
                          http (V[N][M]);

                        if (not length (V[N]))
                          http ('&nbsp;');
                        http ('</td>');
                      http ('</tr>');
                    }
                  }

                  if (self.cScope = 'week')
                  {
                    for (N := 0; N < length (self.cDays); N := N + 1)
                    {
                      W := floor (N / 7);
                      D := mod (N, 7);
                      dt := self.calcDate (N);
                      if ((dt >= self.cStart) and (dt <= self.cEnd))
                      {
                        http ('<tr class="CE_row_week">');
                          C := '';
                          if (mod (N, 7) = 6)
                            C := C || ' CE_cell_bottom';
                          http (sprintf ('<td class="CE_cell CE_cell_week CE_cell_middle%s">', C));
                          C := '';
                          if (self.cDays[N] > 0)
                            C := C || ' C_onmonth';
                          if (self.cDays[N] < 0)
                            C := C || ' C_offmonth';
                          if (CAL.WA.dt_isWeekDay (dt, self.cWeekStarts))
                          {
                            C := C || ' C_weekday2';
                          } else {
                            C := C || ' C_weekend';
                          }
                          if (CAL.WA.dt_compare (dt, curdate ()))
                            C := C || ' C_today';
                          http (sprintf ('<div onclick="cSelect(this)" id="d_day_%d_%d" class="CE_cell_header%s">%s %d</div>', W, D, C, CAL.WA.dt_WeekName (dt, self.cWeekStarts, 0), abs (self.cDays [N])));
                          http ('&nbsp;');
                          http ('</td>');
                          C := '';
                          if (CAL.WA.dt_compare (dt, curdate ()))
                            C := C || ' CE_cell_today';
                          if (self.domain_id > 0)
                            C := C || ' CE_cell_pointer';
                          onClick := 'javascript: void(0);';
                                if ((self.domain_id > 0) and (self.access_role not in ('public', 'guest')))
                            onClick := sprintf (' onclick="javascript: cNewEvent(event, %d, -1);"', N);
                          hasEvents := 0;
                          for (select distinct rs.*
                                 from CAL.WA.events_forPeriod (rs0, rs1, rs2, rs3, rs4)(e_id integer, e_event integer, e_subject varchar, e_start datetime, e_end datetime, e_repeat varchar, e_repeat_offset integer, e_reminder integer) rs
                                where rs0 = self.domain_id
                                  and rs1 = dt
                                  and rs2 = dt
                                        and rs3 = self.cPrivacy
                                  and rs4 = self.cShowTasks
                                order by e_event DESC, e_start) do
                          {
                            if (not hasEvents)
                              http (sprintf ('<td class="CE_new CE_cell %s" style="background: #FAFAFA;" %s">', C, onClick));
                            hasEvents := 1;
                            http (self.showEvent (e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder, self.showContinue (dt, e_event, e_start, e_end)));
                          }
                          if (not hasEvents)
                          {
                            http (sprintf ('<td class="CE_new CE_cell %s" %s">', C, onClick));
                            http ('&nbsp;');
                          }
                          http ('</td>');
                        http ('</tr>');
                      }
                    }
                  }

                        if (self.cScope = 'month')
                        {
                          for (N := 0; N < length (self.cDays); N := N + 1)
                          {
                      W := floor (N / 7);
                      D := mod (N, 7);
                      dt := self.calcDate (N);
                            if ((dt >= self.cStart) and (dt <= self.cEnd))
                            {
                        if (D = 0)
                          http ('<tr class="CE_row_month">');
                        C := '';
                        if (D < 6)
                          C := C || ' CE_cell_middle';
                        if (CAL.WA.dt_compare (dt, curdate ()))
                          C := C || ' CE_cell_today';
                        if (self.domain_id > 0)
                          C := C || ' CE_cell_pointer';
                        onClick := '';
                              if ((self.domain_id > 0) and (self.access_role not in ('public', 'guest')))
                          onClick := sprintf (' onclick="javascript: cNewEvent(event, %d, -1);"', N);
                        http (sprintf ('<td width="%s" class="CE_new CE_cell %s" %s>', '14.2857%', C, onClick));
                        C := '';
                        if (self.cDays[N] > 0)
                          C := C || ' C_onmonth';
                        if (self.cDays[N] < 0)
                          C := C || ' C_offmonth';
                              if (CAL.WA.dt_isWeekDay (dt, self.cWeekStarts))
                              {
                          C := C || ' C_weekday2';
                        } else {
                          C := C || ' C_weekend';
                        }
                        if (CAL.WA.dt_compare (dt, curdate ()))
                          C := C || ' C_today';
                        http (sprintf ('<div onclick="cSelect(this)" id="d_day_%d_%d" class="CE_cell_header%s">%d</div>', W, D, C, abs (self.cDays [N])));
                        for (select distinct rs.*
                               from CAL.WA.events_forPeriod (rs0, rs1, rs2, rs3, rs4)(e_id integer, e_event integer, e_subject varchar, e_start datetime, e_end datetime, e_repeat varchar, e_repeat_offset integer, e_reminder integer) rs
                              where rs0 = self.domain_id
                                and rs1 = dt
                                and rs2 = dt
                                      and rs3 = self.cPrivacy
                                and rs4 = self.cShowTasks
                              order by e_event DESC, e_start) do
                        {
                          http (self.showEvent (e_id, e_event, e_subject, e_start, e_end, e_repeat, e_repeat_offset, e_reminder, self.showContinue (dt, e_event, e_start, e_end)));
                        }
                        http ('</td>');
                        if (D = 6)
                          http ('</tr>');
                      }
                    }
                  }
                ?>
              </table>
            </vm:if>
            <vm:if test="self.cScope = 'events'">
              <v:data-source name="dsrc" expression-type="sql" nrows="0" initial-offset="0">
                <v:before-data-bind>
                  <![CDATA[
                    control.ds_nrows := CAL.WA.settings_rows (self.settings);
                    control.ds_parameters := null;
                          control.ds_sql := sprintf (' select a.*                               ' ||
                                                     '   from CAL.WA.EVENTS a,                  ' ||
                                                     '        CAL..MY_CALENDARS b               ' ||
                                                     '  where b.domain_id = %d                  ' ||
                                                     '    and b.privacy = %d                    ' ||
                                                     '    and a.E_DOMAIN_ID = b.CALENDAR_ID     ' ||
                                                     '    and a.E_PRIVACY >= b.CALENDAR_PRIVACY ' ||
                                                     '    and a.E_KIND = 0',
                                                     self.domain_id,
                                                     self.cPrivacy
                                                    );
                    self.sortChange (get_keyword ('e_sortColumn', e.ve_params), 'e_order', 'e_direction', self.ds);
                    control.ds_sql := sprintf ('%s order by %s %s, E_ID', control.ds_sql, self.e_order, self.e_direction);
                  ]]>
                </v:before-data-bind>
	              <v:after-data-bind>
	                control.ds_make_statistic ();
	              </v:after-data-bind>
              </v:data-source>

              <v:data-set name="ds" data-source="self.dsrc" scrollable="1">

                <v:template name="ds_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                  <table id="events" style="width: 100%; background-color: #FFF;" cellspacing="0">
                    <thead class="sortHeader">
                      <tr>
                              <vm:if test="self.access_role not in ('public', 'guest')">
                          <th class="checkbox" width="1%">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                          </th>
                        </vm:if>
                        <th nowrap="nowrap" width="10%">
                          <?vsp self.sortColumn ('Duration', 'E_EVENT_START', 'e_sortColumn', self.e_order, self.e_direction); ?>
                        </th>
                        <th nowrap="nowrap">
                          <?vsp self.sortColumn ('Name', 'E_SUBJECT', 'e_sortColumn', self.e_order, self.e_direction); ?>
                        </th>
                        <?vsp self.columnHeaderShow ('event_E_LOCATION', 0, 0, 'Location', '1%', 'E_LOCATION', 'e_sortColumn', self.e_order, self.e_direction); ?>
                        <?vsp self.columnHeaderShow ('event_E_UPDATED',  1, 1, 'Updated', '1%',  'E_UPDATED',  'e_sortColumn', self.e_order, self.e_direction); ?>
                        <?vsp self.columnHeaderShow ('event_E_CREATED',  0, 1, 'Created', '1%',  'E_CREATED',  'e_sortColumn', self.e_order, self.e_direction); ?>
                              <vm:if test="self.access_role not in ('public', 'guest')">
                          <th width="1%">
                            Action
                          </th>
                        </vm:if>
                      </tr>
                    </thead>
                  </table>
                </v:template>

                <v:template name="ds_repeat" type="repeat" name-to-remove="" set-to-remove="">

                  <v:template name="ds_browse" type="browse" name-to-remove="table" set-to-remove="both">
                    <table>
                      <tr>
                              <?vsp
                                declare id integer;

                                if (self.access_role not in ('public', 'guest'))
                                {
                                  id := (control as vspx_row_template).te_column_value('E_ID');
                                  http (sprintf ('<td align="center" valign="top" %s>', self.showEventColor (id)));
                                  if (CAL.WA.event_permissions (id, self.domain_id, self.access_role) = 'W')
                                  {
                                    http (sprintf ('<input type="checkbox" name="cb_item" value="%d" onclick="selectCheck(this, \'cb_item\')" />', id));
                                  }
                                  http ('</td>');
                                }
                              ?>
                        <td nowrap="nowrap">
                          <?vsp
                            self.showEventDuration ((control as vspx_row_template).te_column_value('E_EVENT'),
                                                    (control as vspx_row_template).te_column_value('E_EVENT_START'),
                                                    (control as vspx_row_template).te_column_value('E_EVENT_END'));
                          ?>
                        </td>
                        <td>
                          <?vsp
                            self.showEventSubject ((control as vspx_row_template).te_column_value('E_ID'),
                                                   (control as vspx_row_template).te_column_value('E_EVENT'),
                                                   (control as vspx_row_template).te_column_value('E_SUBJECT'),
                                                   (control as vspx_row_template).te_column_value('E_REPEAT'),
                                                         (control as vspx_row_template).te_column_value('E_REMINDER'),
                                                         (control as vspx_row_template).te_column_value('E_ATTENDEE'));
                          ?>
                        </td>
                        <vm:if test="self.columnEnabled ('event_E_LOCATION', 0)">
                          <td nowrap="nowrap">
                            <v:label value="--(control.vc_parent as vspx_row_template).te_column_value('E_LOCATION')" />
                          </td>
                        </vm:if>
                        <vm:if test="self.columnEnabled ('event_E_UPDATED', 1)">
                        <td nowrap="nowrap">
                          <v:label value="--CAL.WA.dt_datestring ((control.vc_parent as vspx_row_template).te_column_value('E_UPDATED'), self.cDateFormat)" />
                        </td>
                        </vm:if>
                        <vm:if test="self.columnEnabled ('event_E_CREATED', 0)">
                          <td nowrap="nowrap">
                            <v:label value="--CAL.WA.dt_datestring ((control.vc_parent as vspx_row_template).te_column_value('E_CREATED'), self.cDateFormat)" />
                          </td>
                        </vm:if>
                              <vm:if test="self.access_role not in ('public', 'guest')">
                          <td>
                                  <?vsp http (sprintf ('<input type="button" value="Annotate" onclick="javascript: window.open (\'annotea.vspx?sid=%s&realm=%s&oid=%d&did=%d&aid=%d\', \'calendar_anotea_window\', \'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=500, width=600\'); return false;" title="Annotate %s" class="button">', self.sid, self.realm, (control as vspx_row_template).te_column_value('E_ID'), self.domain_id, self.account_id, (control as vspx_row_template).te_column_value('E_SUBJECT'))); ?>
                          </td>
                        </vm:if>
                      </tr>
                    </table>
                  </v:template>

                </v:template>

                <v:template name="ds_footer" type="simple" name-to-remove="table" set-to-remove="top">
                  <table>
                  </table>
                </v:template>

                <span id="ds_navigation">
                  <vm:ds-navigation data-set="ds" />
                </span>

              </v:data-set>
            </vm:if>

            <vm:if test="self.cScope = 'tasks'">
              <v:data-source name="ds1rc" expression-type="sql" nrows="0" scrollable="1" initial-offset="0">
                <v:before-data-bind>
                  <![CDATA[
                    control.ds_nrows := CAL.WA.settings_rows (self.settings);
                    control.ds_parameters := null;
                          control.ds_sql := sprintf (' select a.*                               ' ||
                                                     '   from CAL.WA.EVENTS a,                  ' ||
                                                     '        CAL..MY_CALENDARS b                ' ||
                                                     '  where b.domain_id = %d                  ' ||
                                                     '    and b.privacy = %d                    ' ||
                                                     '    and a.E_DOMAIN_ID = b.CALENDAR_ID     ' ||
                                                     '    and a.E_PRIVACY >= b.CALENDAR_PRIVACY ' ||
                                                     '    and a.E_KIND = 1',
                                                     self.domain_id,
                                                     self.cPrivacy
                                                    );
                    if (self.tv_status <> 'All')
                            control.ds_sql := control.ds_sql || sprintf (' and a.E_STATUS = ''%s''', self.tv_status);


                    self.sortChange (get_keyword ('t_sortColumn', e.ve_params), 't_order', 't_direction', self.ds1);
                    control.ds_sql := sprintf ('%s order by %s %s, E_ID', control.ds_sql, self.t_order, self.t_direction);
                  ]]>
                </v:before-data-bind>
	              <v:after-data-bind>
	                control.ds_make_statistic ();
	              </v:after-data-bind>
              </v:data-source>

              <v:data-set name="ds1" data-source="self.ds1rc" nrows="5" scrollable="1">
                <v:template name="ds1_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                  <table id="events" style="width: 100%; background-color: #FFF;" cellspacing="0">
                    <thead class="sortHeader">
                      <tr>
                              <vm:if test="self.access_role not in ('public', 'guest')">
                          <th class="checkbox" width="1%">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                          </th>
                        </vm:if>
                        <th nowrap="nowrap">
                          <?vsp self.sortColumn ('Name', 'E_SUBJECT', 't_sortColumn', self.t_order, self.t_direction); ?>
                        </th>
                        <?vsp self.columnHeaderShow ('task_E_START',     0, 1, 'Start',     '5%', 'E_EVENT_START', 't_sortColumn', self.t_order, self.t_direction); ?>
                        <?vsp self.columnHeaderShow ('task_E_END',       1, 1, 'Due',       '5%', 'E_EVENT_END',   't_sortColumn', self.t_order, self.t_direction); ?>
                        <?vsp self.columnHeaderShow ('task_E_COMPLETED', 0, 1, 'Completed', '1%', 'E_COMPLETED',   't_sortColumn', self.t_order, self.t_direction); ?>
                        <?vsp self.columnHeaderShow ('task_E_STATUS',    1, 1, 'Status',    '3%', 'E_STATUS',      't_sortColumn', self.t_order, self.t_direction); ?>
                        <?vsp self.columnHeaderShow ('task_E_PRIORITY',  1, 1, 'Priority',  '1%', 'E_PRIORITY',    't_sortColumn', self.t_order, self.t_direction); ?>
                        <?vsp self.columnHeaderShow ('task_E_UPDATED',   0, 1, 'Updated',   '1%', 'E_UPDATED',     't_sortColumn', self.t_order, self.t_direction); ?>
                        <?vsp self.columnHeaderShow ('task_E_CREATED',   0, 1, 'Created',   '1%', 'E_CREATED',     't_sortColumn', self.t_order, self.t_direction); ?>
                              <vm:if test="self.access_role not in ('public', 'guest')">
                          <th width="1%">
                            Action
                          </th>
                        </vm:if>
                      </tr>
                    </thead>
                  </table>
                </v:template>

                <v:template name="ds1_repeat" type="repeat" name-to-remove="" set-to-remove="">

                  <v:template name="ds1_browse" type="browse" name-to-remove="table" set-to-remove="both">
                    <table>
                      <tr>
                              <?vsp
                                declare id integer;

                                if (self.access_role not in ('public', 'guest'))
                                {
                                  id := (control as vspx_row_template).te_column_value('E_ID');
                                  http (sprintf ('<td align="center" valign="top" %s>', self.showEventColor (id)));
                                  if (CAL.WA.event_permissions (id, self.domain_id, self.access_role) = 'W')
                                  {
                                    http (sprintf ('<input type="checkbox" name="cb_item" value="%d" onclick="selectCheck(this, \'cb_item\')" />', id));
                                  }
                                  http ('</td>');
                                }
                              ?>
                        <td>
                          <?vsp
                            self.showEventSubject ((control as vspx_row_template).te_column_value('E_ID'),
                                                   (control as vspx_row_template).te_column_value('E_EVENT'),
                                                   (control as vspx_row_template).te_column_value('E_SUBJECT'),
                                                   (control as vspx_row_template).te_column_value('E_REPEAT'),
                                                         (control as vspx_row_template).te_column_value('E_REMINDER'),
                                                         (control as vspx_row_template).te_column_value('E_ATTENDEE'));
                          ?>
                        </td>
                        <vm:if test="self.columnEnabled ('task_E_START', 0)">
                        <td nowrap="nowrap">
                          <?vsp
                            self.showEventStart ((control as vspx_row_template).te_column_value('E_EVENT'),
                                                 (control as vspx_row_template).te_column_value('E_EVENT_START'));
                          ?>
                        </td>
                        </vm:if>
                        <vm:if test="self.columnEnabled ('task_E_END', 1)">
                        <td nowrap="nowrap">
                          <?vsp
                            self.showEventEnd ((control as vspx_row_template).te_column_value('E_EVENT'),
                                               (control as vspx_row_template).te_column_value('E_EVENT_END'));
                          ?>
                        </td>
                        </vm:if>
                        <vm:if test="self.columnEnabled ('task_E_COMPLETED', 0)">
                        <td nowrap="nowrap">
                          <?vsp
                            self.showEventEnd ((control as vspx_row_template).te_column_value('E_EVENT'),
                                               (control as vspx_row_template).te_column_value('E_COMPLETED'));
                          ?>
                        </td>
                        </vm:if>
                        <vm:if test="self.columnEnabled ('task_E_STATUS', 1)">
                        <td nowrap="nowrap">
                          <v:label value="--(control.vc_parent as vspx_row_template).te_column_value('E_STATUS')" />
                        </td>
                        </vm:if>
                        <vm:if test="self.columnEnabled ('task_E_PRIORITY', 1)">
                          <td nowrap="nowrap">
                            <v:label value="--self.priorityLabel ((control.vc_parent as vspx_row_template).te_column_value('E_PRIORITY'))" />
                          </td>
                        </vm:if>
                        <vm:if test="self.columnEnabled ('task_E_UPDATED', 0)">
                        <td nowrap="nowrap">
                          <v:label value="--CAL.WA.dt_datestring ((control.vc_parent as vspx_row_template).te_column_value('E_UPDATED'), self.cDateFormat)" />
                        </td>
                        </vm:if>
                        <vm:if test="self.columnEnabled ('task_E_CREATED', 0)">
                          <td nowrap="nowrap">
                            <v:label value="--CAL.WA.dt_datestring ((control.vc_parent as vspx_row_template).te_column_value('E_CREATED'), self.cDateFormat)" />
                          </td>
                        </vm:if>
                              <vm:if test="self.access_role not in ('public', 'guest')">
                          <td>
                                  <?vsp http (sprintf ('<input type="button" value="Annotate" onclick="javascript: window.open (\'annotea.vspx?sid=%s&realm=%s&oid=%d&did=%d&aid=%d\', \'calendar_anotea_window\', \'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=500, width=600\'); return false;" title="Annotate %s" class="button">', self.sid, self.realm, (control as vspx_row_template).te_column_value('E_ID'), self.domain_id, self.account_id, (control as vspx_row_template).te_column_value('E_SUBJECT'))); ?>
                          </td>
                        </vm:if>
                      </tr>
                    </table>
                  </v:template>

                </v:template>

                <v:template name="ds1_footer" type="simple" name-to-remove="table" set-to-remove="top">
                  <table>
                  </table>
                </v:template>

                <span id="ds1_navigation">
                  <vm:ds-navigation data-set="ds1" />
                </span>
              </v:data-set>
            </vm:if>

            <vm:if test="self.cScope = 'search'">
              <v:data-source name="ds2rc" expression-type="sql" nrows="0" initial-offset="0">
                <v:before-data-bind>
                  <![CDATA[
                    control.ds_nrows := CAL.WA.settings_rows (self.settings);
                    control.ds_parameters := null;
                          if (isnull (self.cSearch))
                          {
                      control.ds_sql := 'select * from CAL.WA.EVENTS where 1 = 0';
                    } else {
                            control.ds_sql := CAL.WA.search_sql (self.domain_id, self.cPrivacy, self.cSearch);
                    }
                    self.sortChange (get_keyword ('s_sortColumn', e.ve_params), 's_order', 's_direction', self.ds2);
                    control.ds_sql := sprintf ('%s order by %s %s, E_ID', control.ds_sql, self.s_order, self.s_direction);
                  ]]>
                </v:before-data-bind>
	              <v:after-data-bind>
	                control.ds_make_statistic ();
	              </v:after-data-bind>
              </v:data-source>

              <v:data-set name="ds2" data-source="self.ds2rc" scrollable="1">

                <v:template name="ds2_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                  <table id="events" style="width: 100%; background-color: #FFF;" cellspacing="0">
                    <thead class="sortHeader">
                      <tr>
                              <vm:if test="self.access_role not in ('public', 'guest')">
                          <th class="checkbox" width="1%">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                          </th>
                        </vm:if>
                        <th nowrap="nowrap" width="1%">
                          <?vsp self.sortColumn ('Type', 'E_KIND', 's_sortColumn', self.s_order, self.s_direction); ?>
                        </th>
                        <th nowrap="nowrap">
                          <?vsp self.sortColumn ('Item', 'E_EVENT_START', 's_sortColumn', self.s_order, self.s_direction); ?>
                        </th>
                        <th nowrap="nowrap" width="1%">
                          <?vsp self.sortColumn ('Updated', 'E_UPDATED', 's_sortColumn', self.s_order, self.s_direction); ?>
                        </th>
                      </tr>
                    </thead>
                  </table>
                </v:template>

                <v:template name="ds2_repeat" type="repeat" name-to-remove="" set-to-remove="">

                  <v:template name="ds2_browse" type="browse" name-to-remove="table" set-to-remove="both">
                    <table>
                      <tr>
                              <?vsp
                                declare id integer;

                                if (self.access_role not in ('public', 'guest'))
                                {
                                  id := (control as vspx_row_template).te_column_value('E_ID');
                                  http (sprintf ('<td align="center" valign="top" %s>', self.showEventColor (id)));
                                  if (CAL.WA.event_permissions (id, self.domain_id, self.access_role) = 'W')
                                  {
                                    http (sprintf ('<input type="checkbox" name="cb_item" value="%d" onclick="selectCheck(this, \'cb_item\')" />', id));
                                  }
                                  http ('</td>');
                                }
                              ?>
                        <td style="padding: 0 2px 0 2px;">
                          <?vsp
                            declare tmp any;

                            tmp := (control as vspx_row_template).te_column_value('E_KIND');
                            if (tmp = 0)
                              http ('Event');
                            if (tmp = 1)
                              http ('Task');
                            if (tmp = 2)
                              http ('Note');
                          ?>
                        </td>
                        <td style="padding: 0 2px 0 2px;">
                          <?vsp
                            self.showEventDuration ((control as vspx_row_template).te_column_value('E_EVENT'),
                                                    (control as vspx_row_template).te_column_value('E_EVENT_START'),
                                                    (control as vspx_row_template).te_column_value('E_EVENT_END'));
                            if ((control as vspx_row_template).te_column_value('E_KIND') <> 2)
                              http ('&nbsp;');
                            self.showEventSubject ((control as vspx_row_template).te_column_value('E_ID'),
                                                   (control as vspx_row_template).te_column_value('E_EVENT'),
                                                   (control as vspx_row_template).te_column_value('E_SUBJECT'),
                                                   (control as vspx_row_template).te_column_value('E_REPEAT'),
                                                         (control as vspx_row_template).te_column_value('E_REMINDER'),
                                                         (control as vspx_row_template).te_column_value('E_ATTENDEE'));
                          ?>
                        </td>
                        <td nowrap="nowrap" style="padding: 0 2px 0 2px;">
                          <v:label value="--CAL.WA.dt_datestring ((control.vc_parent as vspx_row_template).te_column_value('E_UPDATED'), self.cDateFormat)" />
                        </td>
                      </tr>
                    </table>
                  </v:template>

                </v:template>

                <v:template name="ds2_footer" type="simple" name-to-remove="table" set-to-remove="top">
                  <table>
                  </table>
                </v:template>

                <span id="ds2_navigation">
                  <vm:ds-navigation data-set="ds2" />
                </span>

              </v:data-set>
            </vm:if>

              <script type="text/javascript">
                <![CDATA[
                  coloriseTable('events');
                exchangeHTML();
                ]]>
              </script>
          </div>
        </div>
      </vm:if>

      <vm:if test="self.cAction in ('create', 'edit', 'view')">
        <v:text name="timeZone" xhtml_id="timeZone" type="hidden" value="--self.cTimeZone" />
        <v:text name="timeFormat" xhtml_id="timeFormat" type="hidden" value="--self.cTimeFormat" />
        <v:text name="dateFormat" xhtml_id="dateFormat" type="hidden" value="--self.cDateFormat" />
      </vm:if>

      <v:template type="simple" enabled="--case when ((self.cScope <> 'tasks') and (self.cAction in ('create', 'edit'))) then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            declare params any;
            params := self.vc_page.vc_event.ve_params;

            if (isnull (get_keyword ('e_subject', params)))
            {
            declare exit handler for not found goto _end;

                    if (self.cAction = 'edit')
              {
                declare tmp any;

                select E_SUBJECT,
                       E_DESCRIPTION,
                       E_LOCATION,
                             E_ATTENDEES,
                             E_PRIVACY,
                       E_TAGS,
                       E_EVENT,
                       CAL.WA.event_gmt2user (E_EVENT_START, self.cTimezone),
                       CAL.WA.event_gmt2user (E_EVENT_END, self.cTimezone),
                       E_REPEAT,
                       E_REPEAT_PARAM1,
                       E_REPEAT_PARAM2,
                       E_REPEAT_PARAM3,
                       E_REPEAT_UNTIL,
                       E_REMINDER,
                       E_TAGS,
                       blob_to_string (E_NOTES)
                  into self.v_subject,
                       self.v_description,
                       self.v_location,
                             self.v_attendees_count,
                             self.v_privacy,
                       self.v_tags,
                       self.v_event,
                       self.v_eventStart,
                       self.v_eventEnd,
                       self.v_repeat,
                       self.v_repeatParam1,
                       self.v_repeatParam2,
                       self.v_repeatParam3,
                       self.v_repeatUntil,
                       self.v_reminder,
                       self.v_tags,
                       self.v_notes
                  from CAL.WA.EVENTS
                 where E_ID = self.v_id;

                       self.v_attendees := CAL.WA.attendees_return (self.v_id);
                 return;
              }
            _end:;

              self.initNewEvent ();
              }
          ]]>
        </v:before-data-bind>
        <div class="new-form-header">
                <v:label format="%s" value="--self.eventHeader (self.v_id, 'event')" />
        </div>
        <div id="e" class="c1">
          <div class="tabs">
            &nbsp;<vm:tabCaption tab="e" tabsCount="3" tabNo="0" caption="Main" />
            &nbsp;<vm:tabCaption tab="e" tabsCount="3" tabNo="1" caption="Repeats" />
            &nbsp;<vm:tabCaption tab="e" tabsCount="3" tabNo="2" caption="Notes" />
          </div>
          <div class="contents">
            <div id="e_content_0" class="tabContent" style="display: none;">
              <table class="form-body" cellspacing="0">
            <tr>
                  <th width="25%">
                    <v:label for="e_subject" value="Name" />
              </th>
              <td>
                <v:text name="e_subject" null-value="''" value="--CAL.WA.utf2wide (self.v_subject)" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
              <th valign="top">
                <v:label for="e_eventEndDate" value="Duration"/>
              </th>
              <td>
                <table>
                  <tr>
                    <td width="1%">
                      <?vsp
                                  http(sprintf('<input type="checkbox" name="e_event" id="e_event" value="1" %s onchange="javascript: shCell(\'e_eventStartTime\'); shCell(\'e_eventEndTime\');" />', CAL.WA.checkedAttribute (self.v_event, 1)));
                      ?>
                    </td>
                    <td nowrap="nowrap" width="1%" colspan="2">
                            <xsl:call-template name="nbsp" /><vm:label for="e_event" value="--'All day event'" />
                    </td>
                  </tr>
                  <tr>
                          <td />
                    <td  width="1%" align="right">
                            From
                    </td>
                    <td>
                            <v:text name="e_eventStartDate" xhtml_id="e_eventStartDate" null-value="--''" value="--CAL.WA.dt_datestring (self.v_eventStart, self.cDateFormat)" xhtml_onclick="--sprintf ('cPopup.select(document.forms[0].e_eventStartDate, \'e_eventStartDate_select\', \'%s\');', self.cDateFormat)" xhtml_class="textbox" xhtml_size="10" />
                            <a href="#" name="e_eventStartDate_select" id="e_eventStartDate_select" onclick="cPopup.select(document.forms[0].e_eventStartDate, 'e_eventStartDate_select', '<?V self.cDateFormat ?>'); return false;" class="noapp">
                        <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                      </a>
                      <v:select-list name="e_eventStartTime" xhtml_id="e_eventStartTime" xhtml_style="--case when self.v_event = 0 then '' else 'display: none;' end">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (48, 'any');
                                      for (N := 0; N < 24; N := N + 1)
                                      {
                              x[2*N]   := CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N, 0), self.cTimeFormat);
                              x[2*N+1] := CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N, 30), self.cTimeFormat);
                            }
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := CAL.WA.dt_timestring (CAL.WA.dt_timeCeiling (self.v_eventStart, 30), self.cTimeFormat);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                    </td>
                  </tr>
                  <tr>
                    <td />
                    <td  width="1%" align="right">
                            To
                    </td>
                    <td>
                            <v:text name="e_eventEndDate" xhtml_id="e_eventEndDate" null-value="--''" value="--CAL.WA.dt_datestring (self.v_eventEnd, self.cDateFormat)" xhtml_onclick="--sprintf ('cPopup.select(document.forms[0].e_eventEndDate, \'e_eventEndDate_select\', \'%s\');', self.cDateFormat)" xhtml_class="textbox" xhtml_size="10" />
                            <a href="#" name="e_eventEndDate_select" id="e_eventEndDate_select" onclick="cPopup.select(document.forms[0].e_eventEndDate, 'e_eventEndDate_select', '<?V self.cDateFormat ?>'); return false;" class="noapp">
                        <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                      </a>
                      <v:select-list name="e_eventEndTime" xhtml_id="e_eventEndTime" xhtml_style="--case when self.v_event = 0 then '' else 'display: none;' end">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (48, 'any');
                            for (N := 0; N < 24; N := N + 1) {
                              x[2*N]   := CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N, 0), self.cTimeFormat);
                              x[2*N+1] := CAL.WA.dt_timestring (CAL.WA.dt_timeEncode (N, 30), self.cTimeFormat);
                            }
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := CAL.WA.dt_timestring (CAL.WA.dt_timeCeiling (self.v_eventEnd, 30), self.cTimeFormat);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr>
                  <th valign="top">
                <v:label for="e_description" value="Description"/>
              </th>
              <td>
                <v:textarea name="e_description" null-value="--''" value="--CAL.WA.utf2wide (self.v_description)" fmt-function="CAL.WA.utf2wide" xhtml_cols="45" xhtml_rows="6"/>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="e_location" value="Location"/>
              </th>
              <td>
                <v:text name="e_location" null-value="''" value="--CAL.WA.utf2wide (self.v_location)" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
                  <th>
                    <vm:label for="e_reminder" value="--'Reminder'" />
                  </th>
                  <td>
                      <v:select-list name="e_reminder">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            self.arrays4Reminder (x, y);
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.v_reminder;
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                  </td>
                </tr>
                      <vm:if test="(self.cAction = 'create') or (CAL.WA.event_domain (self.v_id) = self.domain_id)">
                <tr>
                        <th>
                          <vm:label for="e_privacy" value="--'Privacy'" />
                        </th>
                        <td>
                          <v:select-list name="e_privacy">
                            <v:item value="0" name="Private" />
                            <v:item value="1" name="Public" />
                            <v:before-data-bind>
                              <![CDATA[
                                control.ufl_value := self.v_privacy;
                              ]]>
                            </v:before-data-bind>
                          </v:select-list>
                        </td>
                      </tr>
                      </vm:if>
                      <tr>
                        <th valign="top">
                          <v:label for="e_attendees" value="Attendees" />
                        </th>
                        <td valign="top">
                          <v:textarea name="e_attendees" null-value="--''" value="--CAL.WA.utf2wide (self.v_attendees)" fmt-function="CAL.WA.utf2wide" xhtml_cols="45" xhtml_rows="6" />
                          <?vsp
                            if (CAL.WA.instance_check (self.account_id, 'AddressBook'))
                              http (sprintf ('<input type="button" value="Select" onclick="javascript: window.open (\'contacts.vspx?dst=m&params=e_attendees:s1;&sid=%s&realm=%s\', \'calendar_contacts_window\', \'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=500, width=600\'); return false;" class="button">&nbsp;', self.sid, self.realm));
                            if (self.v_attendees_count)
                              http (sprintf ('<input type="button" value="Details" onclick="javascript: window.open (\'attendees.vspx?id=%d&sid=%s&realm=%s\', \'calendar_contacts_window\', \'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=768, width=1024\'); return false;" class="button">', self.v_id, self.sid, self.realm));
                          ?>
                        </td>
                      </tr>
                      <tr>
                  <script type="text/javascript">
                    function suggestTags ()
                    {
                      window.open ('tags.vspx?sid=<?V self.sid ?>&amp;realm=<?V self.realm ?>&amp;txt='+escape(document.F1.elements['e_subject'].value)+'&amp;txt2='+escape(document.F1.elements['e_description'].value) + '&amp;fld=e_tags', 'bookmarks_suggest_window', 'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=420, width=500');
                    }
                  </script>
                  <th>
                    <v:label for="e_tags" value="Tags (comma-separated)" />
                  </th>
                  <td>
                      <v:text name="e_tags" null-value="''" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60" />
                      <input type="button" value="Suggest" onclick="javascript: suggestTags();" class="button" />
                      <input type="button" value="Clear" onclick="javascript: document.F1.elements['e_tags'].value = ''" class="button" />
                  </td>
                </tr>
                  <?vsp self.myTags ('e_tags'); ?>
              </table>
            </div>
            <div id="e_content_1" class="tabContent" style="display: none;">
              <table class="form-body" cellspacing="0">
                <tr>
                  <th width="25%" valign="top">
                <v:label for="e_repeat" value="Repeats"/>
              </th>
              <td>
                <table>
                  <tr>
                    <td />
                    <td>
                      <?vsp
                                  http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_0" value="" %s />', CAL.WA.checkedAttribute (self.v_repeat, '')));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_0" value="--'No repeat'" />
                    </td>
                  </tr>
                  <tr>
                    <td width="1%" rowspan="2" valign="top">
                      Daily
                    </td>
                    <td>
                      <?vsp
                                  http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_1" value="D1" %s />', CAL.WA.checkedAttribute (self.v_repeat, 'D1')));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_1" value="--'Every'" />
                      <v:text name="e_repeat_param1_D1" null-value="''" value="--self.repeatParam (self.v_repeat, 'D1', 1, null);" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_1\');'" xhtml_class="textbox" xhtml_size="1" /> day(s)
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <?vsp
                                  http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_2" value="D2" %s />', CAL.WA.checkedAttribute (self.v_repeat, 'D2')));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_2" value="--'Every weekday (Monday-Friday)'" />
                    </td>
                  </tr>
                  <tr>
                    <td>
                      Weekly
                    </td>
                    <td>
                      <?vsp
                                  http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_3" value="W1" %s />', CAL.WA.checkedAttribute (self.v_repeat, 'W1')));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_3" value="--'Every'" />
                      <v:text name="e_repeat_param1_W1" null-value="''" value="--self.repeatParam (self.v_repeat, 'W1', 1, null);" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_3\');'" xhtml_class="textbox" xhtml_size="1" /> week(s) on
                      <?vsp
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_0" onfocus="checkRepetition (\'e_repeat\', \'e_repeat_3\');" /> M', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 0)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_1" onfocus="checkRepetition (\'e_repeat\', \'e_repeat_3\');" /> T', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 1)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_2" onfocus="checkRepetition (\'e_repeat\', \'e_repeat_3\');" /> W', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 2)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_3" onfocus="checkRepetition (\'e_repeat\', \'e_repeat_3\');" /> T', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 3)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_4" onfocus="checkRepetition (\'e_repeat\', \'e_repeat_3\');" /> F', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 4)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_5" onfocus="checkRepetition (\'e_repeat\', \'e_repeat_3\');" /> S', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 5)) then '' else 'checked="checked"' end));
                        http (sprintf ('<input type="checkbox" value="1" %s name="e_repeat_param2_W1_6" onfocus="checkRepetition (\'e_repeat\', \'e_repeat_3\');" /> S', case when is_empty_or_null (self.repeatParam (self.v_repeat, 'W1', 2, 6)) then '' else 'checked="checked"' end));
                      ?>
                    </td>
                  </tr>
                  <tr>
                    <td rowspan="2" valign="top">
                      Monthly
                    </td>
                    <td>
                      <?vsp
                                  http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_4" value="M1" %s />', CAL.WA.checkedAttribute (self.v_repeat, 'M1')));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_4" value="--'Every'" />
                      <v:select-list name="e_repeat_param1_M1" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_4\');'" >
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (12, 'any');
                            for (N := 0; N < 12; N := N + 1)
                              x[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M1', 1, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      month(s) on
                      <v:select-list name="e_repeat_param2_M1" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_4\');'">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (31, 'any');
                            for (N := 0; N < 31; N := N + 1)
                              x[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M1', 2, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      day
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <?vsp
                                  http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_5" value="M2" %s />', CAL.WA.checkedAttribute (self.v_repeat, 'M2')));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_5" value="--'Every'" />
                      <v:select-list name="e_repeat_param1_M2" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_5\');'">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (12, 'any');
                            for (N := 0; N < 12; N := N + 1)
                              x[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M2', 1, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      month(s) on the
                      <v:select-list name="e_repeat_param2_M2" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_5\');'">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (5, 'any');
                            x[0] := 'first';
                            x[1] := 'second';
                            x[2] := 'third';
                            x[3] := 'fourth';
                            x[4] := 'last';
                            y := make_array (5, 'any');
                            for (N := 0; N < 5; N := N + 1)
                              y[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M2', 2, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      <v:select-list name="e_repeat_param3_M2" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_5\');'">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (10, 'any');
                            x[0] := 'Day';
                            x[1] := 'Weekday';
                            x[2] := 'Weekend';
                            x[3] := 'Monday';
                            x[4] := 'Tuesday';
                            x[5] := 'Wednesday';
                            x[6] := 'Thursday';
                            x[7] := 'Friday';
                            x[8] := 'Saturday.';
                            x[9] := 'Sunday.';
                            y:= make_array (10, 'any');
                            y[0] := '10';
                            y[1] := '11';
                            y[2] := '12';
                            y[3] := '1';
                            y[4] := '2';
                            y[5] := '3';
                            y[6] := '4';
                            y[7] := '5';
                            y[8] := '6';
                            y[9] := '7';
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'M2', 3, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                   </td>
                  </tr>
                  <tr>
                    <td rowspan="2" valign="top">
                      Yearly
                    </td>
                    <td>
                      <?vsp
                                  http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_6" value="Y1" %s />', CAL.WA.checkedAttribute (self.v_repeat, 'Y1')));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_6" value="--'Every'" />
                      <v:text name="e_repeat_param1_Y1" null-value="''" value="--self.repeatParam (self.v_repeat, 'Y1', 1, null);" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_6\');'" xhtml_class="textbox" xhtml_size="1" /> year(s)
                      on
                      <v:select-list name="e_repeat_param2_Y1" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_6\');'">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (12, 'any');
                            x[0] := 'January';
                            x[1] := 'February';
                            x[2] := 'March';
                            x[3] := 'April';
                            x[4] := 'May';
                            x[5] := 'June';
                            x[6] := 'July';
                            x[7] := 'August';
                            x[8] := 'September';
                            x[9] := 'October';
                            x[10]:= 'November';
                            x[11]:= 'December';
                            y:= make_array (12, 'any');
                            for (N := 0; N < 12; N := N + 1)
                              y[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y1', 2, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      <v:select-list name="e_repeat_param3_Y1" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_6\');'">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x any;

                            x := make_array (31, 'any');
                            for (N := 0; N < 31; N := N + 1)
                              x[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := x;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y1', 3, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <?vsp
                                  http(sprintf('<input type="radio" name="e_repeat" id="e_repeat_7" value="Y2" %s />', CAL.WA.checkedAttribute (self.v_repeat, 'Y2')));
                      ?>
                      <xsl:call-template name="nbsp"/>
                      <vm:label for="e_repeat_7" value="--'The'" />
                      <v:select-list name="e_repeat_param1_Y2" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_7\');'">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (5, 'any');
                            x[0] := 'first';
                            x[1] := 'second';
                            x[2] := 'third';
                            x[3] := 'fourth';
                            x[4] := 'last';
                            y := make_array (5, 'any');
                            for (N := 0; N < 5; N := N + 1)
                              y[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y2', 1, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      <v:select-list name="e_repeat_param2_Y2" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_7\');'">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (10, 'any');
                            x[0] := 'Day';
                            x[1] := 'Weekday';
                            x[2] := 'Weekend';
                            x[3] := 'Monday';
                            x[4] := 'Tuesday';
                            x[5] := 'Wednesday';
                            x[6] := 'Thursday';
                            x[7] := 'Friday';
                            x[8] := 'Saturday';
                            x[9] := 'Sunday';
                            y:= make_array (10, 'any');
                            y[0] := '10';
                            y[1] := '11';
                            y[2] := '12';
                            y[3] := '1';
                            y[4] := '2';
                            y[5] := '3';
                            y[6] := '4';
                            y[7] := '5';
                            y[8] := '6';
                            y[9] := '7';
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y2', 2, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                      of
                      <v:select-list name="e_repeat_param3_Y2" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeat\', \'e_repeat_7\');'">
                        <v:on-init>
                          <![CDATA[
                            declare N integer;
                            declare x, y any;

                            x := make_array (12, 'any');
                            x[0] := 'January';
                            x[1] := 'February';
                            x[2] := 'March';
                            x[3] := 'April';
                            x[4] := 'May';
                            x[5] := 'June';
                            x[6] := 'July';
                            x[7] := 'August';
                            x[8] := 'September';
                            x[9] := 'October';
                            x[10]:= 'November';
                            x[11]:= 'December';
                            y:= make_array (12, 'any');
                            for (N := 0; N < 12; N := N + 1)
                              y[N] := cast ((N+1) as varchar);
                            control.vsl_item_values := y;
                            control.vsl_items := x;
                            control.ufl_value := '';
                          ]]>
                        </v:on-init>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := self.repeatParam (self.v_repeat, 'Y2', 3, null);
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th valign="top">
                <v:label for="e_repeat_range" value="Repeats range"/>
              </th>
              <td>
                  <table>
                    <tr>
                      <td>
                <?vsp
                  declare S varchar;

                  S := '';
                  if (isnull (self.v_repeatUntil))
                    S := 'checked="checked"';
                  http(sprintf('<input type="radio" name="e_repeatUntilKind" id="e_repeatUntilKind_0" value="0" %s />', S));
                ?>
                <xsl:call-template name="nbsp"/>
                <vm:label for="e_repeatUntilKind_0" value="--'No end date'" />
              </td>
            </tr>
            <tr>
              <td>
                <?vsp
                  declare S varchar;

                  S := '';
                  if (not isnull (self.v_repeatUntil))
                    S := 'checked="checked"';
                  http(sprintf('<input type="radio" name="e_repeatUntilKind" id="e_repeatUntilKind_1" value="1" %s />', S));
                ?>
                <xsl:call-template name="nbsp"/>
                <vm:label for="e_repeatUntilKind_1" value="--'Until'" />
                <xsl:call-template name="nbsp"/>
                            <v:text name="e_repeatUntil" xhtml_id="e_repeatUntil" null-value="--''" value="--CAL.WA.dt_datestring (self.v_repeatUntil, self.cDateFormat)" xhtml_onfocus="--'javascript: checkRepetition (\'e_repeatUntilKind\', \'e_repeatUntilKind_1\');'" xhtml_onclick="--sprintf ('cPopup.select(document.forms[0].e_repeatUntil, \'e_repeatUntil_select\', \'%s\');', self.cDateFormat)" xhtml_class="textbox" xhtml_size="10" />
                            <a href="#" name="e_repeatUntil_select" id="e_repeatUntil_select" onclick="cPopup.select(document.forms[0].e_repeatUntil, 'e_repeatUntil_select', '<?V self.cDateFormat ?>'); return false;" class="noapp">
                  <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                </a>
              </td>
            </tr>
                  </table>
                  </td>
                </tr>
              </table>
            </div>
            <div id="e_content_2" class="tabContent" style="display: none;">
              <table class="form-body" cellspacing="0">
                <tr>
                  <th width="20%" valign="top">
                    Notes
                  </th>
                  <td>
                      <?vsp
                        declare tmpString any;

                        tmpString := coalesce (self.v_notes, '');
                        tmpString := replace(tmpString, '\'', '&#39;');
                        tmpString := replace(tmpString, '"', '&#34;');
                        tmpString := replace(tmpString, chr(10), ' ');
                        tmpString := replace(tmpString, chr(13), ' ');
                      ?>
                      <![CDATA[
                        <script language="JavaScript" type="text/javascript" src="js/rte/richtext.js"></script>
                        <script language="JavaScript" type="text/javascript" src="js/rte/html2xhtml.js"></script>
                        <script language="JavaScript" type="text/javascript">
                          initRTE("js/rte/images/", "js/rte/", "", true);
                        </script>
                        <noscript><p><b>Javascript must be enabled to use this form.</b></p></noscript>
                        <script language="JavaScript" type="text/javascript">
                          writeRichText('e_notes', '<?vsp http (tmpString); ?>', 500, 170, true, false);
                        </script>
                      ]]>
                  </td>
                </tr>
              </table>
            </div>
          </div>
        </div>
        <div class="new-form-footer">
          <v:button action="simple" value="--case when (self.cAction = 'create') then 'Create' else 'Update' end" xhtml_onclick="javascript:updateRTE(\'e_notes\')" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.saveEvent ();
                if (not self.vc_is_valid)
                  return;

                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
          <v:button action="simple" value="Create and New" enabled="--case when ((self.cScope = 'events') and (self.cAction = 'create')) then 1 else 0 end" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.saveEvent ();
                if (not self.vc_is_valid)
                  return;

                self.initNewEvent ();
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
          <v:button action="simple" value="Cancel" name="e_cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
      </v:template>

      <v:template type="simple" enabled="--case when ((self.cScope <> 'tasks') and (self.cAction in ('view'))) then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            declare exit handler for not found goto _end;

            select E_SUBJECT,
                   E_DESCRIPTION,
                   E_LOCATION,
                         E_ATTENDEES,
                         E_PRIVACY,
                   E_TAGS,
                   E_EVENT,
                   CAL.WA.event_gmt2user (E_EVENT_START, self.cTimezone),
                   CAL.WA.event_gmt2user (E_EVENT_END, self.cTimezone),
                   E_REPEAT,
                   E_REPEAT_PARAM1,
                   E_REPEAT_PARAM2,
                   E_REPEAT_PARAM3,
                   E_REPEAT_UNTIL,
                   E_REMINDER,
                   E_TAGS,
                   blob_to_string (E_NOTES)
              into self.v_subject,
                   self.v_description,
                   self.v_location,
                         self.v_attendees_count,
                         self.v_privacy,
                   self.v_tags,
                   self.v_event,
                   self.v_eventStart,
                   self.v_eventEnd,
                   self.v_repeat,
                   self.v_repeatParam1,
                   self.v_repeatParam2,
                   self.v_repeatParam3,
                   self.v_repeatUntil,
                   self.v_reminder,
                   self.v_tags,
                   self.v_notes
              from CAL.WA.EVENTS
             where E_ID = self.v_id;

                  self.v_attendees := CAL.WA.attendees_return (self.v_id);
            return;

          _end:;
            self.initNewEvent ();
          ]]>
        </v:before-data-bind>
        <div class="new-form-header">
                <v:label format="%s" value="--self.eventHeader (self.v_id, 'event')" />
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th width="25%">
                Name
              </th>
              <td>
                <?vsp self.viewField (self.v_subject); ?>
              </td>
            </tr>
            <tr>
              <th>
                Duration
              </th>
              <td>
                <?vsp
                    if (self.v_event = 0) {
                      self.viewField (sprintf ('%s - %s', CAL.WA.dt_datetimestring (self.v_eventStart, self.cDateFormat, self.cTimeFormat), CAL.WA.dt_datetimestring (self.v_eventEnd, self.cDateFormat, self.cTimeFormat)));
                    } else {
                      self.viewField (sprintf ('%s - %s', CAL.WA.dt_datestring (self.v_eventStart, self.cDateFormat), CAL.WA.dt_datestring (self.v_eventEnd, self.cDateFormat)));
                    }
                ?>
              </td>
            </tr>
            <tr>
              <th valign="top">
                Description
              </th>
              <td>
                <?vsp self.viewDescription (self.v_description); ?>
              </td>
            </tr>
            <tr>
              <th>
                Location
              </th>
              <td>
                <?vsp self.viewField (self.v_location); ?>
              </td>
            </tr>
            <tr>
              <th>
                Reminder
              </th>
              <td>
                <?vsp
                  declare N integer;
                  declare x, y any;

                  self.arrays4Reminder (x, y);
                  N := CAL.WA.vector_indexOf (y, cast (self.v_reminder as varchar), 0);
                  self.viewField (x [N]);
                ?>
              </td>
            </tr>
            <tr>
              <th>
                Tags
              </th>
              <td>
                <?vsp self.viewField (self.v_tags); ?>
              </td>
            </tr>
            <tr>
              <th>
                Repeats
              </th>
              <td>
                <?vsp
                  self.viewField (CAL.WA.vcal_recurrence2str (self.v_repeat,
                                                              self.v_RepeatParam1,
                                                              self.v_RepeatParam2,
                                                              self.v_RepeatParam3,
                                                              self.v_repeatUntil
                                                             )
                                 );
                ?>
              </td>
            </tr>
            <tr>
              <th>
                Repeats range
              </th>
              <td>
                <?vsp
                  self.viewField (self.v_repeatUntil);
                ?>
              </td>
            </tr>
            <tr>
              <th valign="top">
                Notes
              </th>
              <td>
                <?vsp self.viewField (self.v_notes); ?>
              </td>
            </tr>
          </table>
        </div>
        <div class="new-form-footer">
          <v:button action="simple" value="Cancel" name="ev_cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
      </v:template>

      <v:template type="simple" enabled="--case when ((self.cScope = 'tasks') and (self.cAction in ('create', 'edit'))) then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
                  if (isnull (get_keyword ('t_subject', self.vc_page.vc_event.ve_params)))
                  {
              declare exit handler for not found goto _end;

                    if (self.cAction = 'edit')
                    {
                declare tmp any;

                select E_SUBJECT,
                       E_DESCRIPTION,
                             E_ATTENDEES,
                             E_PRIVACY,
                       E_TAGS,
                       CAL.WA.event_gmt2user (E_EVENT_START, self.cTimezone),
                       CAL.WA.event_gmt2user (E_EVENT_END, self.cTimezone),
                       CAL.WA.event_gmt2user (E_COMPLETED, self.cTimezone),
                       E_PRIORITY,
                       E_STATUS,
                       E_COMPLETE,
                       blob_to_string (E_NOTES)
                  into self.v_subject,
                       self.v_description,
                             self.v_attendees_count,
                             self.v_privacy,
                       self.v_tags,
                       self.v_eventStart,
                       self.v_eventEnd,
                       self.v_completed,
                       self.v_priority,
                       self.v_status,
                       self.v_complete,
                       self.v_notes
                  from CAL.WA.EVENTS
                 where E_ID = self.v_id;

                       self.v_attendees := CAL.WA.attendees_return (self.v_id);
                 return;
              }
            _end:;

              self.initNewTask ();
            }
          ]]>
        </v:before-data-bind>
        <div class="new-form-header">
                <v:label format="%s" value="--self.eventHeader (self.v_id, 'task')" />
        </div>
        <div id="t" class="c1">
          <div class="tabs">
            &nbsp;<vm:tabCaption tab="t" tabsCount="2" tabNo="0" caption="Main" />
            &nbsp;<vm:tabCaption tab="t" tabsCount="2" tabNo="1" caption="Notes" />
          </div>
          <div class="contents">
            <div id="t_content_0" class="tabContent" style="display: none;">
              <table class="form-body" cellspacing="0">
            <tr>
                  <th width="25%">
                    <v:label for="t_subject" value="Name" />
              </th>
              <td>
                <v:text name="t_subject" null-value="''" value="--CAL.WA.utf2wide (self.v_subject)" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_eventEndDate" value="Start Date"/>
              </th>
              <td>
                      <v:text name="t_eventStartDate" xhtml_id="t_eventStartDate" null-value="--''" value="--CAL.WA.dt_datestring (self.v_eventStart, self.cDateFormat)" xhtml_onclick="--sprintf ('cPopup.select(document.forms[0].t_eventStartDate, \'t_eventStartDate_select\', \'%s\');', self.cDateFormat)" xhtml_class="textbox" xhtml_size="10" />
                      <a href="#" name="t_eventStartDate_select" id="t_eventStartDate_select" onclick="cPopup.select(document.forms[0].t_eventStartDate, 't_eventStartDate_select', '<?V self.cDateFormat ?>'); return false;" class="noapp">
                  <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                </a>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_eventEndDate" value="Due Date"/>
              </th>
              <td>
                      <v:text name="t_eventEndDate" xhtml_id="t_eventEndDate" null-value="--''" value="--CAL.WA.dt_datestring (self.v_eventEnd, self.cDateFormat)" xhtml_onclick="--sprintf ('cPopup.select(document.forms[0].t_eventEndDate, \'t_eventEndDate_select\', \'%s\');', self.cDateFormat)" xhtml_class="textbox" xhtml_size="10" />
                      <a href="#" name="t_eventEndDate_select" id="t_eventEndDate_select" onclick="cPopup.select(document.forms[0].t_eventEndDate, 't_eventEndDate_select', '<?V self.cDateFormat ?>'); return false;" class="noapp">
                  <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif"/>
                </a>
              </td>
            </tr>
            <tr>
              <th>
                    <v:label for="t_completed" value="Completed" />
                  </th>
                  <td>
                      <v:text name="t_completed" xhtml_id="t_completed" null-value="--''" value="--CAL.WA.dt_datestring (self.v_completed, self.cDateFormat)" xhtml_onclick="--sprintf ('cPopup.select(document.forms[0].t_completed, \'t_completed_select\', \'%s\');', self.cDateFormat)" xhtml_class="textbox" xhtml_size="10" />
                      <a href="#" name="t_completed_select" id="t_completed_select" onclick="cPopup.select(document.forms[0].t_completed, 't_completed_select', '<?V self.cDateFormat ?>'); return false;" class="noapp">
                        <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif" />
                      </a>
                  </td>
                </tr>
                <tr>
                  <th>
                <v:label for="t_priority" value="Priority"/>
              </th>
              <td>
                <v:select-list name="t_priority">
                  <v:on-init>
                    <![CDATA[
                      declare N integer;
                      declare x, y any;

                      x := make_array (5, 'any');
                      x[0] := 'Highest';
                      x[1] := 'High';
                      x[2] := 'Normal';
                      x[3] := 'Low';
                      x[4] := 'Lowest';
                      y := make_array (5, 'any');
                      for (N := 0; N < 5; N := N + 1)
                        y[N] := cast ((N+1) as varchar);
                      control.vsl_item_values := y;
                      control.vsl_items := x;
                      control.ufl_value := '3';
                    ]]>
                  </v:on-init>
                  <v:before-data-bind>
                    <![CDATA[
                      control.ufl_value := self.v_priority;
                    ]]>
                  </v:before-data-bind>
                </v:select-list>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_status" value="Status"/>
              </th>
              <td>
                      <v:select-list name="t_status" xhtml_id="t_status" xhtml_onchange="javascript: changeComplete(); ">
                  <v:on-init>
                    <![CDATA[
                      declare x any;

                      x := make_array (5, 'any');
                      x[0] := 'Not Started';
                      x[1] := 'In Progress';
                      x[2] := 'Completed';
                      x[3] := 'Waiting.';
                      x[4] := 'Deferred';
                      control.vsl_item_values := x;
                      control.vsl_items := x;
                      control.ufl_value := '';
                    ]]>
                  </v:on-init>
                  <v:before-data-bind>
                    <![CDATA[
                      control.ufl_value := self.v_status;
                    ]]>
                  </v:before-data-bind>
                </v:select-list>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="t_complete" value="% Complete"/>
              </th>
              <td>
                      <v:select-list name="t_complete" xhtml_id="t_complete" xhtml_onchange="javascript: changeComplete(); ">>
                  <v:on-init>
                    <![CDATA[
                      declare x any;

                      x := make_array (5, 'any');
                      x[0] := '0';
                      x[1] := '25';
                      x[2] := '50';
                      x[3] := '75';
                      x[4] := '100';
                      control.vsl_item_values := x;
                      control.vsl_items := x;
                      control.ufl_value := '0';
                    ]]>
                  </v:on-init>
                  <v:before-data-bind>
                    <![CDATA[
                      control.ufl_value := self.v_complete;
                    ]]>
                  </v:before-data-bind>
                </v:select-list>
              </td>
            </tr>
            <tr>
                  <th valign="top">
                <v:label for="t_description" value="Description"/>
              </th>
              <td>
                <v:textarea name="t_description" null-value="--''" value="--CAL.WA.utf2wide (self.v_description)" fmt-function="CAL.WA.utf2wide" xhtml_cols="45" xhtml_rows="6"/>
                        </td>
                      </tr>
                      <vm:if test="(self.cAction = 'create') or (CAL.WA.event_domain (self.v_id) = self.domain_id)">
                      <tr>
                        <th>
                          <vm:label for="t_privacy" value="--'Privacy'" />
                        </th>
                        <td>
                          <v:select-list name="t_privacy">
                            <v:item value="0" name="Private" />
                            <v:item value="1" name="Public" />
                            <v:before-data-bind>
                              <![CDATA[
                                control.ufl_value := self.v_privacy;
                              ]]>
                            </v:before-data-bind>
                          </v:select-list>
              </td>
            </tr>
                      </vm:if>
            <tr>
                        <th valign="top">
                          <v:label for="t_attendees" value="Attendees" />
                        </th>
                        <td>
                          <v:textarea name="t_attendees" null-value="--''" value="--CAL.WA.utf2wide (self.v_attendees)" fmt-function="CAL.WA.utf2wide" xhtml_cols="45" xhtml_rows="6" />
                          <?vsp
                            if (CAL.WA.instance_check (self.account_id, 'AddressBook'))
                              http (sprintf ('<input type="button" value="Select" onclick="javascript: window.open (\'contacts.vspx?dst=m&params=t_attendees:s1;&sid=%s&realm=%s\', \'calendar_contacts_window\', \'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=500, width=600\'); return false;" class="button">&nbsp;', self.sid, self.realm));
                            if (self.v_attendees_count)
                              http (sprintf ('<input type="button" value="Details" onclick="javascript: window.open (\'attendees.vspx?id=%d&sid=%s&realm=%s\', \'calendar_contacts_window\', \'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=768, width=1024\'); return false;" class="button">', self.v_id, self.sid, self.realm));
                          ?>
                        </td>
                      </tr>
                      <tr>
              <script type="text/javascript">
                function suggestTags ()
                {
                  window.open ('tags.vspx?sid=<?V self.sid ?>&amp;realm=<?V self.realm ?>&amp;txt='+escape(document.F1.elements['t_subject'].value)+'&amp;txt2='+escape(document.F1.elements['t_description'].value) + '&amp;fld=n_tags', 'bookmarks_suggest_window', 'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=420, width=500');
                }
              </script>
              <th>
                <v:label for="t_tags" value="Tags (comma-separated)" />
              </th>
              <td>
                  <v:text name="t_tags" null-value="''" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60" />
                  <input type="button" value="Suggest" onclick="javascript: suggestTags();" class="button" />
                  <input type="button" value="Clear" onclick="javascript: document.F1.elements['t_tags'].value = ''" class="button" />
              </td>
            </tr>
                  <?vsp self.myTags ('t_tags'); ?>
          </table>
        </div>
            <div id="t_content_1" class="tabContent" style="display: none;">
              <table class="form-body" cellspacing="0">
                <tr>
                  <th width="20%" valign="top">
                    Notes
                  </th>
                  <td>
                    <?vsp
                      declare tmpString any;
                      
                      tmpString := coalesce (self.v_notes, '');
                      tmpString := replace(tmpString, '\'', '&#39;');
                      tmpString := replace(tmpString, '"', '&#34;');
                      tmpString := replace(tmpString, chr(10), ' ');
                      tmpString := replace(tmpString, chr(13), ' ');
                    ?>
                    <![CDATA[
                      <script language="JavaScript" type="text/javascript" src="js/rte/richtext.js"></script>
                      <script language="JavaScript" type="text/javascript" src="js/rte/html2xhtml.js"></script>
                      <script language="JavaScript" type="text/javascript">
                        initRTE("js/rte/images/", "js/rte/", "", true);
                      </script>
                      <noscript><p><b>Javascript must be enabled to use this form.</b></p></noscript>
                      <script language="JavaScript" type="text/javascript">
                        writeRichText('t_notes', '<?vsp http (tmpString); ?>', 500, 170, true, false);
                      </script>
                    ]]>
                  </td>
                </tr>
              </table>  
            </div>
          </div>
        </div>
        <div class="new-form-footer">
          <v:button action="simple" value="--case when (self.cAction = 'create') then 'Create' else 'Update' end" enabled="--case when (self.cAction in ('create', 'edit')) then 1 else 0 end" xhtml_onclick="javascript:updateRTE(\'t_notes\')" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.saveTask ();
                if (not self.vc_is_valid)
                  return;

                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
          <v:button action="simple" value="Create and New" enabled="--case when ((self.cScope = 'tasks') and (self.cAction = 'create')) then 1 else 0 end" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.saveTask ();
                if (not self.vc_is_valid)
                  return;

                self.initNewTask ();
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
          <v:button action="simple" value="Cancel" name="t_cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
      </v:template>

      <v:template type="simple" enabled="--case when ((self.cScope = 'tasks') and (self.cAction in ('view'))) then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            declare exit handler for not found goto _end;

            select E_SUBJECT,
                   E_DESCRIPTION,
                   E_TAGS,
                   CAL.WA.event_gmt2user (E_EVENT_START, self.cTimezone),
                   CAL.WA.event_gmt2user (E_EVENT_END, self.cTimezone),
                   CAL.WA.event_gmt2user (E_COMPLETED, self.cTimezone),
                   E_PRIORITY,
                   E_STATUS,
                   E_COMPLETE,
                   blob_to_string (E_NOTES)
              into self.v_subject,
                   self.v_description,
                   self.v_tags,
                   self.v_eventStart,
                   self.v_eventEnd,
                   self.v_completed,
                   self.v_priority,
                   self.v_status,
                   self.v_complete,
                   self.v_notes
              from CAL.WA.EVENTS
             where E_ID = self.v_id;

                  self.v_attendees := CAL.WA.attendees_return (self.v_id);
             return;

          _end:;
            self.initNewTask ();
          ]]>
        </v:before-data-bind>
        <div class="new-form-header">
                <v:label format="%s" value="--self.eventHeader (self.v_id, 'task')" />
        </div>
        <div class="new-form-body">
          <table class="form-body" cellspacing="0">
            <tr>
              <th width="25%">
                Name
              </th>
              <td>
                <?vsp self.viewField (self.v_subject); ?>
              </td>
            </tr>
            <tr>
              <th>
                Start Date
              </th>
              <td>
                <?vsp self.viewField (self.v_eventStart); ?>
              </td>
            </tr>
            <tr>
              <th>
                Due Date
              </th>
              <td>
                <?vsp self.viewField (self.v_eventEnd); ?>
              </td>
            </tr>
            <tr>
              <th>
                Completed
              </th>
              <td>
                <?vsp self.viewField (self.v_completed); ?>
              </td>
            </tr>
            <tr>
              <th>
                Priority
              </th>
              <td>
                <?vsp self.viewField (self.priorityLabel (self.v_priority)); ?>
              </td>
            </tr>
            <tr>
              <th>
                Status
              </th>
              <td>
                <?vsp self.viewField (self.v_status); ?>
              </td>
            </tr>
            <tr>
              <th>
                Complete
              </th>
              <td>
                <?vsp self.viewField (self.v_complete); ?>
              </td>
            </tr>
            <tr>
              <th valign="top">
                Description
              </th>
              <td>
                <?vsp self.viewDescription (self.v_description); ?>
              </td>
            </tr>
            <tr>
              <th>
                Tags
              </th>
              <td>
                <?vsp self.viewField (self.v_tags); ?>
              </td>
            </tr>
            <tr>
              <th valign="top">
                Notes
              </th>
              <td>
                <?vsp self.viewField (self.v_notes); ?>
              </td>
            </tr>
          </table>
        </div>
        <div class="new-form-footer">
          <v:button action="simple" value="Cancel" name="tv_cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
      </v:template>

      <vm:if test="self.cAction = 'import'">
        <vm:if test="self.icStep = '1'">
        <div class="new-form-header">
            <v:label format="%s" value="Import: Select source type" />
        </div>

        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
                <th rowspan="3" valign="middle" width="45%">
                  <v:label for="i_file" value="Source type" />
              </th>
                <td nowrap="nowarap">
                  <v:radio-button name="icSource_0" xhtml_id="icSource_0" group-name="icSource" value="0">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(lte(self.icSource, 0), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                  <xsl:call-template name="nbsp" />
                  <b><vm:label for="icSource_0" value="--'File'" /></b>
                </td>
              </tr>
              <tr>
                <td nowrap="nowarap">
                  <v:radio-button name="icSource_1" xhtml_id="icSource_1" group-name="icSource" value="1">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(equ(self.icSource, 1), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                  <xsl:call-template name="nbsp" />
                  <b><vm:label for="icSource_1" value="--'WebDAV'" /></b>
                </td>
              </tr>
              <tr>
                <td nowrap="nowarap">
                  <v:radio-button name="icSource_2" xhtml_id="icSource_2" group-name="icSource" value="2">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(equ(self.icSource, 2), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                  <xsl:call-template name="nbsp" />
                  <b><vm:label for="icSource_2" value="--'URL'" /></b>
              </td>
            </tr>
          </table>
        </div>

        <div class="new-form-footer">
            <v:button action="simple" value="Next" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.icStep := '2';
                        if (self.icSource_0.ufl_selected)
                        {
                    self.icSource := 0;
                  } else if (self.icSource_1.ufl_selected) {
                    self.icSource := 1;
                  } else if (self.icSource_2.ufl_selected) {
                    self.icSource := 2;
                  }
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            <v:button action="simple" value="Cancel" name="i1_cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
        </vm:if>

        <vm:if test="self.icStep = '2'">
        <div class="new-form-header">
            <v:label format="%s" value="Import: Select content type" />
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
              <vm:if test="self.icSource = 0">
                <tr>
                  <th width="30%">
                    Select file
                  </th>
                  <td>
                    <input type="file" name="f_file" size="40" />
                  </td>
                </tr>
              </vm:if>
              <vm:if test="self.icSource = 1">
                <tr>
                  <th width="30%">
                    Select WebDAV file
                  </th>
                  <td>
                    <v:text name="f_dav" xhtml_id="f_dav" value="" xhtml_size="40" />
                    <v:button action="browse" value="Browse...">
                   	  <v:after-data-bind>
                   		  <![CDATA[
                          control.vc_add_attribute ('onclick', 'javascript: davBrowse (''f_dav'');');
              			    ]]>
              			  </v:after-data-bind>
              		  </v:button>
                  </td>
                </tr>
              </vm:if>
              <vm:if test="self.icSource = 2">
            <tr>
              <th width="30%">
                    Select URL
                  </th>
                  <td>
                    <v:text name="f_uri" value="--''" xhtml_size="60" />
                  </td>
                </tr>
              </vm:if>
              <tr>
                <th>
                  <v:label for="i_tags" value="Tags (comma-separated)" />
                </th>
                <td>
                  <v:text name="i_tags" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60" />
                </td>
              </tr>
              <?vsp self.myTags ('i_tags'); ?>
          </table>
        </div>

        <div class="new-form-footer">
            <v:button action="simple" value="Back" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.icStep := '1';
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            <v:button action="simple" value="Import" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  declare tmp, content any;

                        declare exit handler for SQLSTATE '*'
                        {
                          if (__SQL_STATE = 'TEST')
                          {
                      self.vc_error_message := CAL.WA.test_clear (__SQL_MESSAGE);
                      self.vc_is_valid := 0;
                      return;
                    }
                    resignal;
                  };

                        if (self.icSource = 0)
                        {
                    content := trim(get_keyword ('f_file', self.vc_page.vc_event.ve_params, ''));
                          if (is_empty_or_null (content))
                          {
                      self.vc_error_message := 'Please select file from your local file system!';
                      self.vc_is_valid := 0;
                      return;
                    }

                  } else if (self.icSource = 1) {
                    self.f_dav.ufl_value := trim(self.f_dav.ufl_value);
                          if (self.f_dav.ufl_value not like (CAL.WA.dav_home (self.account_id) || '%'))
                          {
                      self.vc_error_message := sprintf('Please select file from your WebDAV home directory ''%s''!', CAL.WA.dav_home (self.account_id));
                      self.vc_is_valid := 0;
                      return;
                    }
                    content := CAL.WA.dav_content (CAL.WA.host_url () || self.f_dav.ufl_value);
                          if (isnull(content))
                          {
                      self.vc_error_message := 'Bad import source!';
                      self.vc_is_valid := 0;
                      return;
                    }

                  } else if (self.icSource = 2) {
                    self.f_uri.ufl_value := trim(self.f_uri.ufl_value);
                          if (is_empty_or_null (self.f_uri.ufl_value))
                          {
                      self.vc_error_message := 'Please select correct URL address!';
                      self.vc_is_valid := 0;
                      return;
                    }
                    content := CAL.WA.dav_content (self.f_uri.ufl_value);
                          if (isnull(content))
                          {
                      self.vc_error_message := 'Bad URL source!';
                      self.vc_is_valid := 0;
                      return;
                    }
                  }

                  -- test tags value
                  self.v_tags := trim (self.i_tags.ufl_value);
                  CAL.WA.test (self.v_tags, vector ('name', 'Tags', 'class', 'tags'));
                  tmp := CAL.WA.tags2vector (self.v_tags);
                  tmp := CAL.WA.vector_unique (tmp);
                  self.v_tags := CAL.WA.vector2tags (tmp);

                  -- vCard
                  if (self.icType = 0)
                    CAL.WA.import_vcal (self.domain_id, content, self.v_tags);

                  self.cAction := 'browse';
                  self.vc_data_bind(e);
                 ]]>
               </v:on-post>
            </v:button>
            <v:button action="simple" value="Cancel" name="i2_cancel" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.cAction := 'browse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
        </vm:if>
      </vm:if>

      <vm:if test="self.cAction = 'settings'">
        <div class="new-form-header">
                <?vsp
                  declare S, T varchar;

                  S := 'Preferences: ';
                  T := '';
                  if (self.cSubAction = '')
                  {
                    T := 'Settings';
                  }
                  else if (self.cSubAction = 'upstreamBrowse')
                  {
                    T := 'Upstreams';
                  }
                  else if (self.cSubAction = 'upstreamCreate')
                  {
                    T := 'Upstreams/Create';
                  }
                  else if (self.cSubAction = 'upstreamUpdate')
                  {
                    T := 'Upstreams/Update';
                  }
                  else if (self.cSubAction = 'grantBrowse')
                  {
                    T := 'My Sharings';
                  }
                  else if (self.cSubAction = 'grantCreate')
                  {
                    T := 'My Sharings/Create';
                  }
                  else if (self.cSubAction = 'grantUpdate')
                  {
                    T := 'My Sharings/Update';
                  }
                  else if (self.cSubAction = 'sharedBrowse')
                  {
                    T := 'My Accepted Calendars';
                  }
                  else if (self.cSubAction = 'sharedCreate')
                  {
                    T := 'My Accepted Calendars/Create';
                  }
                  else if (self.cSubAction = 'sharedUpdate')
                  {
                    T := 'My Accepted Calendars/Update';
                  }
                  http (S || T);
                ?>
        </div>

                <v:template type="simple" enabled="--case when self.cSubAction = '' then 1 else 0 end">
        <div id="s" class="c1">
          <div class="tabs">
                    &nbsp;<vm:tabCaption tab="s" tabsCount="3" tabNo="0" caption="General" />
                    &nbsp;<vm:tabCaption tab="s" tabsCount="3" tabNo="1" caption="Grids" />
                    &nbsp;<vm:tabCaption tab="s" tabsCount="3" tabNo="2" caption="Calendar" />
          </div>
          <div id="s_contents" class="contents">
            <div id="s_content_0" class="tabContent" style="display: none;">
              <table class="form-body" cellspacing="0">
                <tr>
                  <th width="30%">
                              <v:label for="sr_chars" value="Contact name display" />
                  </th>
                  <td>
                    <?vsp
                                http(sprintf('<input type="radio" name="sr_chars" id="sr_chars_0" value="0" %s />', CAL.WA.checkedAttribute (CAL.WA.settings_chars (self.settings), 0)));
                    ?>
                    <xsl:call-template name="nbsp"/><vm:label for="s_chars_0" value="--'show everything'" />
                  </td>
                </tr>
                <tr>
                  <th />
                  <td>
                    <?vsp
                      declare S varchar;

                      S := '';
                      if (CAL.WA.settings_chars (self.settings) <> 0)
                        S := 'checked="checked"';
                                http(sprintf('<input type="radio" name="sr_chars" id="sr_chars_1" value="1" %s />', S));
                    ?>
                    <xsl:call-template name="nbsp"/><vm:label for="s_chars_1" value="--'show no more than'" /><xsl:call-template name="nbsp"/>
                    <v:text name="s_chars" null-value="--''" value="--get_keyword('chars', self.settings, '60')" xhtml_size="3"/>
                    <xsl:call-template name="nbsp"/><vm:label for="s_chars_1" value="--'characters'" /><xsl:call-template name="nbsp"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="s_rows" value="Rows per page"/>
                  </th>
                  <td>
                    <v:text name="s_rows" value="--CAL.WA.settings_rows (self.settings)" xhtml_size="3"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    Atom File Version
                  </th>
                  <td>
                    <v:select-list name="s_atomVersion">
                      <v:item value="0.3" name="0.3"/>
                      <v:item value="1.0" name="1.0"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_atomVersion (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th />
                  <td>
                    <v:check-box name="s_showTasks" xhtml_id="s_showTasks" is-boolean="1" true-value="1" false-value="0" value="--cast(get_keyword('showTasks', self.settings, '1') as integer)" />
                    <vm:label for="s_showTasks" value="Show tasks in Calendar"/>
                  </td>
                </tr>
              </table>
            </div>
            <div id="s_content_1" class="tabContent" style="display: none;">
              <table class="form-body" cellspacing="0">
                <tr>
                  <th width="30%">
                            Show columns in 'Events' view
                          </th>
                          <td>
                            <v:check-box name="s_e_column_3" xhtml_id="s_e_column_3" is-boolean="1" true-value="1" false-value="0" value="--cast (get_keyword ('event_E_LOCATION', self.settings, '0') as integer)" />
                            <vm:label for="s_e_column_3" value="Location"/>
                          </td>
                        </tr>
                        <tr>
                          <th />
                          <td>
                            <v:check-box name="s_e_column_1" xhtml_id="s_e_column_1" is-boolean="1" true-value="1" false-value="0" value="--cast (get_keyword ('event_E_UPDATED', self.settings, '1') as integer)" />
                            <vm:label for="s_e_column_1" value="Updated"/>
                          </td>
                        </tr>
                        <tr>
                          <th />
                          <td>
                            <v:check-box name="s_e_column_2" xhtml_id="s_e_column_2" is-boolean="1" true-value="1" false-value="0" value="--cast(get_keyword ('event_E_CREATED', self.settings, '0') as integer)" />
                            <vm:label for="s_e_column_2" value="Created"/>
                          </td>
                        </tr>
                        <tr>
                          <th width="30%">
                            Show columns in 'Tasks' view
                          </th>
                          <td>
                            <v:check-box name="s_t_column_1" xhtml_id="s_t_column_1" is-boolean="1" true-value="1" false-value="0" value="--cast (get_keyword ('task_E_STATUS', self.settings, '1') as integer)" />
                            <vm:label for="s_t_column_1" value="Status"/>
                          </td>
                        </tr>
                        <tr>
                          <th />
                          <td>
                            <v:check-box name="s_t_column_5" xhtml_id="s_t_column_5" is-boolean="1" true-value="1" false-value="0" value="--cast (get_keyword ('task_E_PRIORITY', self.settings, '1') as integer)" />
                            <vm:label for="s_t_column_5" value="Priority"/>
                          </td>
                        </tr>
                        <tr>
                          <th />
                          <td>
                            <v:check-box name="s_t_column_6" xhtml_id="s_t_column_6" is-boolean="1" true-value="1" false-value="0" value="--cast(get_keyword ('task_E_START', self.settings, '0') as integer)" />
                            <vm:label for="s_t_column_6" value="Start Date"/>
                          </td>
                        </tr>
                        <tr>
                          <th />
                          <td>
                            <v:check-box name="s_t_column_7" xhtml_id="s_t_column_7" is-boolean="1" true-value="1" false-value="0" value="--cast(get_keyword ('task_E_END', self.settings, '1') as integer)" />
                            <vm:label for="s_t_column_7" value="Due Date"/>
                          </td>
                        </tr>
                        <tr>
                          <th />
                          <td>
                            <v:check-box name="s_t_column_2" xhtml_id="s_t_column_2" is-boolean="1" true-value="1" false-value="0" value="--cast(get_keyword ('task_E_COMPLETED', self.settings, '0') as integer)" />
                            <vm:label for="s_t_column_2" value="Completed"/>
                          </td>
                        </tr>
                        <tr>
                          <th />
                          <td>
                            <v:check-box name="s_t_column_3" xhtml_id="s_t_column_3" is-boolean="1" true-value="1" false-value="0" value="--cast(get_keyword ('task_E_UPDATED', self.settings, '0') as integer)" />
                            <vm:label for="s_t_column_3" value="Updated"/>
                          </td>
                        </tr>
                        <tr>
                          <th />
                          <td>
                            <v:check-box name="s_t_column_4" xhtml_id="s_t_column_4" is-boolean="1" true-value="1" false-value="0" value="--cast(get_keyword ('task_E_CREATED', self.settings, '0') as integer)" />
                            <vm:label for="s_t_column_4" value="Created"/>
                          </td>
                        </tr>
                      </table>
                    </div>
                    <div id="s_content_2" class="tabContent" style="display: none;">
                      <table class="form-body" cellspacing="0">
                        <tr>
                          <th width="30%">
                    Default view
                  </th>
                  <td>
                    <v:select-list name="s_defaultView">
                      <v:item value="day" name="Day"/>
                      <v:item value="week" name="Week"/>
                      <v:item value="month" name="Month"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_defaultView (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    Week starts on
                  </th>
                  <td>
                    <v:select-list name="s_weekStarts">
                      <v:item value="m" name="Monday"/>
                      <v:item value="s" name="Sunday"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_weekStarts (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    Time format
                  </th>
                  <td>
                    <v:select-list name="s_timeFormat">
                      <v:item value="e" name="13:00"/>
                      <v:item value="u" name="01:00 pm"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_timeFormat (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    Date format
                  </th>
                  <td>
                    <v:select-list name="s_dateFormat">
                      <v:item value="dd.MM.yyyy" name="31.12.2007"/>
                      <v:item value="MM/dd/yyyy" name="12/31/2007"/>
                      <v:item value="yyyy/MM/dd" name="2007/12/31"/>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_dateFormat (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    Current timezone
                  </th>
                  <td>
                    <v:select-list name="s_timeZone">
                      <v:on-init>
                        <![CDATA[
                          declare i, j integer;
                          declare x, y any;

                          x := make_array (25, 'any');
                          y := make_array (25, 'any');
                          i := -12;
                          j := 0;
                                    while (i <= 12)
                                    {
                            x[j] := cast (i*60 as varchar);
                            y[j] := self.showTimeZone (i);
                            i := i + 1;
                            j := j + 1;
                          }
                          control.vsl_item_values := x;
                          control.vsl_items := y;
                          control.ufl_value := '0';
                        ]]>
                      </v:on-init>
                      <v:before-data-bind>
                        <![CDATA[
                          control.ufl_value := CAL.WA.settings_timeZone (self.settings);
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
              </table>
            </div>
          </div>
        </div>
        <div class="new-form-footer">
          <v:button action="simple" value="Save" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                declare rows, chars any;

                          declare exit handler for SQLSTATE '*'
                          {
                            if (__SQL_STATE = 'TEST')
                            {
                    self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
                    self.vc_is_valid := 0;
                    return;
                  }
                  resignal;
                };

                rows := trim(self.s_rows.ufl_value);
                chars := trim(self.s_chars.ufl_value);
                          if (get_keyword ('sr_chars', self.vc_page.vc_event.ve_params, '-1') = '0')
                  chars := '0';

                CAL.WA.test(rows, vector('name', 'Rows per page', 'class', 'integer', 'type', 'integer', 'minValue', 5, 'maxValue', 1000));
                CAL.WA.test(chars, vector('name', 'Max name length', 'class', 'integer', 'type', 'integer', 'minValue', 0, 'maxValue', 255));

                self.settings := CAL.WA.set_keyword ('chars', self.settings, cast(cast(chars as integer) as varchar));
                self.settings := CAL.WA.set_keyword ('rows', self.settings, cast(cast(rows as integer) as varchar));
                self.settings := CAL.WA.set_keyword ('atomVersion', self.settings, self.s_atomVersion.ufl_value);
                self.settings := CAL.WA.set_keyword ('defaultView', self.settings, self.s_defaultView.ufl_value);
                self.settings := CAL.WA.set_keyword ('weekStarts', self.settings, self.s_weekStarts.ufl_value);
                self.settings := CAL.WA.set_keyword ('timeFormat', self.settings, self.s_timeFormat.ufl_value);
                self.settings := CAL.WA.set_keyword ('dateFormat', self.settings, self.s_dateFormat.ufl_value);
                self.settings := CAL.WA.set_keyword ('timeZone', self.settings, self.s_timeZone.ufl_value);
                self.settings := CAL.WA.set_keyword ('showTasks', self.settings, self.s_showTasks.ufl_selected);

                        self.settings := CAL.WA.set_keyword ('event_E_UPDATED',  self.settings, self.s_e_column_1.ufl_selected);
                        self.settings := CAL.WA.set_keyword ('event_E_CREATED',  self.settings, self.s_e_column_2.ufl_selected);
                        self.settings := CAL.WA.set_keyword ('event_E_LOCATION', self.settings, self.s_e_column_3.ufl_selected);

                        self.settings := CAL.WA.set_keyword ('task_E_STATUS',    self.settings, self.s_t_column_1.ufl_selected);
                        self.settings := CAL.WA.set_keyword ('task_E_PRIORITY',  self.settings, self.s_t_column_5.ufl_selected);
                        self.settings := CAL.WA.set_keyword ('task_E_START',     self.settings, self.s_t_column_6.ufl_selected);
                        self.settings := CAL.WA.set_keyword ('task_E_END',       self.settings, self.s_t_column_7.ufl_selected);
                        self.settings := CAL.WA.set_keyword ('task_E_COMPLETED', self.settings, self.s_t_column_2.ufl_selected);
                        self.settings := CAL.WA.set_keyword ('task_E_UPDATED',   self.settings, self.s_t_column_3.ufl_selected);
                        self.settings := CAL.WA.set_keyword ('task_E_CREATED',   self.settings, self.s_t_column_4.ufl_selected);

                insert replacing CAL.WA.SETTINGS (S_ACCOUNT_ID, S_DATA)
                  values(self.account_id, serialize (self.settings));
                commit work;

                --CAL.WA.domain_gems_create (self.domain_id, self.account_id);

                self.initData ();
                self.cAction := 'browse';
                        self.cSubAction := '';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
                </div>
                </v:template>

                <v:template type="simple" enabled="--case when self.cSubAction = 'upstreamBrowse' then 1 else 0 end">
                <v:button value="--'New Upstream'" action="simple" xhtml_class="button">
            <v:on-post>
              <![CDATA[
                      self.cSubAction := 'upstreamCreate';
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                  <v:button value="Delete" action="simple" xhtml_onclick="--'javascript: return confirmAction(\'Are you sure that you want to delete the selected item(s)?\', document.F1, \'cb_item\', \'No items were selected for deletion.\');'" xhtml_class="button">
                  <v:on-post>
                    <![CDATA[
                      declare N integer;

                      for (N := 0; N < length(e.ve_params); N := N + 4)
                        if (e.ve_params[N] = 'cb_item')
                          delete from CAL.WA.UPSTREAM where U_ID = cast (e.ve_params[N+1] as integer);

                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                <v:data-set name="ds_upstreams" sql="select * from CAL.WA.UPSTREAM where U_DOMAIN_ID = :p0 order by U_NAME" nrows="0" scrollable="1">
                  <v:param name="p0" value="--self.domain_id" />

                  <v:template name="ds_upstreams_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                      <table id="preferences" style="width: 100%; background-color: #FFF;" cellspacing="0">
                      <thead class="sortHeader">
                        <tr>
                          <th class="checkbox" width="1%">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')" />
                          </th>
                          <th style="text-align: left;">Name</th>
                          <th style="text-align: left;">Path</th>
                          <th style="text-align: left;">In Queue</th>
                          <th style="text-align: left;" width="5%">Action</th>
                        </tr>
                      </thead>
                    </table>
                  </v:template>
                  <v:template name="ds_upstreams_repeat" type="repeat">

                    <v:template type="if-not-exists" name-to-remove="table" set-to-remove="both">
                      <table>
                      </table>
                    </v:template>

                    <v:template name="ds_upstreams_browse" type="browse" name-to-remove="table" set-to-remove="both">
                      <table>
                        <tr>
                          <td align="center" valign="top">
                            <input type="checkbox" name="cb_item" value="<?V (control as vspx_row_template).te_column_value('U_ID') ?>" onclick="selectCheck(this, 'cb_item')" />
                          </td>
                          <td nowrap="nowrap">
                            <v:label value="--(control.vc_parent as vspx_row_template).te_column_value('U_NAME')" />
                          </td>
                          <td nowrap="nowrap">
                            <v:label value="--(control.vc_parent as vspx_row_template).te_column_value('U_URI')" />
                          </td>
                          <td nowrap="nowrap">
                            <?vsp
                              http (cast ((select count(*) from CAL.WA.UPSTREAM_EVENT where UE_UPSTREAM_ID = (control as vspx_row_template).te_column_value('U_ID')) as varchar));
                            ?>
                          </td>
                          <td nowrap="nowrap">
                            <v:button value="Edit" action="simple" xhtml_class="button">
                              <v:on-post>
                                <![CDATA[
                                  self.vu_id := (control.vc_parent as vspx_row_template).te_column_value('U_ID');
                                  self.cSubAction := 'upstreamUpdate';
                                  self.vc_data_bind(e);
                                ]]>
                              </v:on-post>
                            </v:button>
                            <?vsp
                              if ((select count(*) from CAL.WA.UPSTREAM_LOG where UL_UPSTREAM_ID = (control as vspx_row_template).te_column_value('U_ID')))
                                http (sprintf ('<input type="button" value="Error Log" onclick="javascript: window.open (\'logs.vspx?sid=%s&realm=%s&oid=%d\', \'calendar_log_window\', \'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=500, width=600\'); return false;" class="button">', self.sid, self.realm, (control as vspx_row_template).te_column_value('U_ID')));
                            ?>
                          </td>
                        </tr>
                      </table>
                    </v:template>

                  </v:template>

                  <v:template type="simple" name-to-remove="table" set-to-remove="top">
                    <table>
                    </table>
                  </v:template>

                </v:data-set>
                </v:template>

                <v:template type="simple" enabled="--case when self.cSubAction in ('upstreamCreate', 'upstreamUpdate') then 1 else 0 end">
                <v:before-data-bind>
                  <![CDATA[
                    declare params any;
                    params := self.vc_page.vc_event.ve_params;

                    if (isnull (get_keyword ('su_name', params)))
                    {
                        declare exit handler for not found goto _end3;

                      if (self.cSubAction = 'upstreamUpdate')
                      {
                        declare tmp any;

                        select U_NAME,
                               U_URI,
                               U_USER,
                               U_PASSWORD,
                               U_INCLUDE,
                               U_EXCLUDE
                          into self.vu_name,
                               self.vu_uri,
                               self.vu_user,
                               self.vu_password,
                               self.vu_include,
                               self.vu_exclude
                          from CAL.WA.UPSTREAM
                         where U_ID = self.vu_id;

                         return;
                      }
                      _end3:;

                      self.vu_name := '';
                      self.vu_uri := '';
                      self.vu_user := '';
                      self.vu_password := '';
                      self.vu_include := '';
                      self.vu_exclude := '';
                    }
                  ]]>
                </v:before-data-bind>
                  <div class="new-form-body">
                    <table cellspacing="0">
                  <tr>
                    <th width="30%">
                      Name
                    </th>
                    <td>
                      <v:text name="su_name" value="--self.vu_name" xhtml_size="60" />
                    </td>
                  </tr>
                  <tr>
                        <th>
                      URI
                    </th>
                    <td>
                      <v:text name="su_uri" value="--self.vu_uri" xhtml_size="60" />
                    </td>
                  </tr>
                  <tr>
                        <th>
                      User
                    </th>
                    <td>
                      <v:text name="su_user" value="--self.vu_user" xhtml_class="" />
                    </td>
                  </tr>
                  <tr>
                        <th>
                      Password
                    </th>
                    <td>
                      <v:text name="su_password" type="password" value="--self.vu_password" xhtml_class="" />
                    </td>
                  </tr>
                  <tr>
                    <th>
                      <v:label for="su_include" value="Include with tags (comma-separated)" />
                    </th>
                    <td>
                      <v:text name="su_include" null-value="''" value="--self.vu_include" xhtml_class="textbox" xhtml_size="60" />
                      <input type="button" value="Clear" onclick="javascript: document.F1.elements['su_include'].value = ''" class="button" />
                    </td>
                  </tr>
                  <?vsp self.myTags ('su_include'); ?>
                  <tr>
                    <th>
                      <v:label for="su_exclude" value="Exclude with tags (comma-separated)" />
                    </th>
                    <td>
                      <v:text name="su_exclude" null-value="''" value="--self.vu_exclude" xhtml_class="textbox" xhtml_size="60" />
                      <input type="button" value="Clear" onclick="javascript: document.F1.elements['su_exclude'].value = ''" class="button" />
                    </td>
                  </tr>
                  <?vsp self.myTags ('su_exclude'); ?>
                </table>
                  </div>
                <div class="new-form-footer">
                    <v:button action="simple" value="--case when self.cSubAction = 'upstreamCreate' then 'Create' else 'Update' end" name="su_save" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        declare tmp, params any;

                        declare exit handler for SQLSTATE '*'
                        {
                          if (__SQL_STATE = 'TEST')
                          {
                            self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
                            self.vc_is_valid := 0;
                            return;
                          }
                          resignal;
                        };

                        params := self.vc_page.vc_event.ve_params;

                        self.vu_name     := trim (self.su_name.ufl_value);
                        self.vu_uri      := trim (self.su_uri.ufl_value);
                        self.vu_user     := trim (self.su_user.ufl_value);
                        self.vu_password := trim (self.su_password.ufl_value);
                        self.vu_include  := trim (self.su_include.ufl_value);
                        self.vu_exclude  := trim (self.su_exclude.ufl_value);

                        CAL.WA.test (self.vu_name, vector('name', 'Upstream Name', 'class', 'varchar', 'minLength', 1, 'maxLength', 255));
                        CAL.WA.test (self.vu_uri, vector('name', 'Upstream URI', 'class', 'varchar', 'minLength', 1, 'maxLength', 255));
                        CAL.WA.test (self.vu_user, vector('name', 'Upstream User', 'class', 'varchar', 'minLength', 1, 'maxLength', 255));
                        CAL.WA.test (self.vu_password, vector('name', 'Upstream Password', 'class', 'varchar', 'minLength', 1, 'maxLength', 255));
                        CAL.WA.test (self.vu_include, vector ('name', 'Include Tags', 'class', 'tags'));
                        tmp := CAL.WA.tags2vector (self.vu_include);
                        tmp := CAL.WA.vector_unique (tmp);
                        self.vu_include := CAL.WA.vector2tags (tmp);
                        CAL.WA.test (self.vu_exclude, vector ('name', 'Exclude Tags', 'class', 'tags'));
                        tmp := CAL.WA.tags2vector (self.vu_exclude);
                        tmp := CAL.WA.vector_unique (tmp);
                        self.vu_exclude := CAL.WA.vector2tags (tmp);

                        if (self.cSubAction = 'upstreamCreate')
                        {
                          insert into CAL.WA.UPSTREAM (U_DOMAIN_ID, U_NAME, U_URI, U_USER, U_PASSWORD, U_INCLUDE, U_EXCLUDE)
                            values (self.domain_id, self.vu_name, self.vu_uri, self.vu_user, self.vu_password, self.vu_include, self.vu_exclude);
                        } else {
                          update CAL.WA.UPSTREAM
                             set U_NAME = self.vu_name,
                                 U_URI = self.vu_uri,
                                 U_USER = self.vu_user,
                                 U_PASSWORD = self.vu_password,
                                 U_INCLUDE = self.vu_include,
                                 U_EXCLUDE = self.vu_exclude
                           where U_ID = self.vu_id;
                        }

                        self.cSubAction := 'upstreamBrowse';
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                    <v:button action="simple" value="Cancel" name="su_cancel" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        self.cSubAction := 'upstreamBrowse';
                self.vc_data_bind(e);
              ]]>
            </v:on-post>
          </v:button>
        </div>
                </v:template>

                <v:template type="simple" enabled="--case when self.cSubAction = 'grantBrowse' then 1 else 0 end">
                  <v:button value="--'Share'" action="simple" xhtml_class="button">
                    <v:on-post>
                      <![CDATA[
                        self.cSubAction := 'grantCreate';
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                  <v:button value="Delete" action="simple" xhtml_onclick="--'javascript: return confirmAction(\'Are you sure that you want to delete the selected item(s)?\', document.F1, \'cb_item\', \'No items were selected for deletion.\');'" xhtml_class="button">
                    <v:on-post>
                      <![CDATA[
                        declare N integer;

                        for (N := 0; N < length(e.ve_params); N := N + 4)
                          if (e.ve_params[N] = 'cb_item')
                            delete from CAL.WA.GRANTS where G_ID = cast (e.ve_params[N+1] as integer);

                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                  <v:data-set name="ds_grant" sql="select a.*, b.U_NAME from CAL.WA.GRANTS a, DB.DBA.SYS_USERS b where a.G_DOMAIN_ID = :p0 and a.G_ACCOUNT_ID = b.U_ID order by b.U_NAME" nrows="0" scrollable="1">
                    <v:param name="p0" value="--self.domain_id" />

                    <v:template name="ds_grant_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                      <table id="preferences" style="width: 100%; background-color: #FFF;" cellspacing="0">
                        <thead class="sortHeader">
                          <tr>
                            <th class="checkbox" width="1%">
                              <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')" />
                            </th>
                            <th style="text-align: left;" nowrap="nowrap">User</th>
                            <th style="text-align: left;" nowrap="nowrap" width="5%">Enabled/Disabled</th>
                            <th style="text-align: left;" nowrap="nowrap" width="5%">Share Mode</th>
                            <th style="text-align: left;" nowrap="nowrap" width="5%">Action</th>
                          </tr>
                        </thead>
                      </table>
                    </v:template>
                    <v:template name="ds_grant_repeat" type="repeat">

                      <v:template name="ds_grant_browse" type="browse" name-to-remove="table" set-to-remove="both">
                        <table>
                          <tr>
                            <td class="sheckbox">
                              <input type="checkbox" name="cb_item" value="<?V (control as vspx_row_template).te_column_value('G_ID') ?>" onclick="selectCheck(this, 'cb_item')" />
                            </td>
                            <td nowrap="nowrap">
                              <v:label value="--(control.vc_parent as vspx_row_template).te_column_value('U_NAME')" />
                            </td>
                            <td nowrap="nowrap">
                              <?vsp
                                http (case when (control as vspx_row_template).te_column_value('G_ENABLE') = 1 then 'Enable' else 'Disable' end);
                              ?>
                            </td>
                            <td nowrap="nowrap">
                              <?vsp
                                http (case when (control as vspx_row_template).te_column_value('G_MODE') = 'R' then 'Read Only' else 'Read/Write' end);
                              ?>
                            </td>
                            <td nowrap="nowrap">
                              <v:button value="Edit" action="simple" xhtml_class="button">
                                <v:on-post>
                                  <![CDATA[
                                    self.vg_id := (control.vc_parent as vspx_row_template).te_column_value('G_ID');
                                    self.cSubAction := 'grantUpdate';
                                    self.vc_data_bind(e);
                                  ]]>
                                </v:on-post>
                              </v:button>
                            </td>
                          </tr>
                        </table>
                      </v:template>

                    </v:template>

                    <v:template type="simple" name-to-remove="table" set-to-remove="top">
                      <table>
                      </table>
                    </v:template>

                  </v:data-set>
                </v:template>

                <v:template type="simple" enabled="--case when self.cSubAction in ('grantCreate', 'grantUpdate') then 1 else 0 end">
                  <v:before-data-bind>
                    <![CDATA[
                      declare params any;
                      params := self.vc_page.vc_event.ve_params;

                      if (isnull (get_keyword ('sg_account', params)))
                      {
                        declare exit handler for not found goto _end;

                        if (self.cSubAction = 'grantUpdate')
                        {
                          select b.U_NAME,
                                 a.G_ENABLE,
                                 a.G_MODE
                            into self.vg_account,
                                 self.vg_enable,
                                 self.vg_mode
                            from CAL.WA.GRANTS a,
                                 DB.DBA.SYS_USERS b
                           where a.G_ID = self.vg_id
                             and a.G_ACCOUNT_ID = b.U_ID;

                           return;
                        }
                      _end:;

                        self.vg_id := null;
                        self.vg_account_id := null;
                        self.vg_account := '';
                        self.vg_enable := 1;
                        self.vg_mode := 'R';
                      }
                    ]]>
                  </v:before-data-bind>
                  <div class="new-form-body">
                    <table cellspacing="0">
                      <tr>
                        <th width="30%">
                          <v:label for="sg_account" value="User" />
                        </th>
                        <td>
                          <v:text name="sg_account" null-value="--''" value="--self.vg_account" xhtml_class="textbox" />
                          <input type="button" value="Select" onclick="javascript: windowShow('users.vspx?params=sg_account:s1;',520)" class="button" />
                        </td>
                      </tr>
                      <tr>
                        <th />
                        <td>
                          <?vsp
                            http (sprintf ('<input type="checkbox" value="1" name="sg_enable" id="sg_enable" %s />', CAL.WA.checkedAttribute (self.vg_enable)));
                          ?>
                          <vm:label for="sg_enable" value="Enable"/>
                        </td>
                      </tr>
                      <tr>
                        <th>
                          Share mode
                        </th>
                        <td>
                          <v:select-list name="sg_mode">
                            <v:item value="R" name="Read Only" />
                            <v:item value="W" name="Read/Write" />
                            <v:before-data-bind>
                              <![CDATA[
                                control.ufl_value := self.vg_mode;
                              ]]>
                            </v:before-data-bind>
                          </v:select-list>
                        </td>
                      </tr>
                    </table>
                  </div>
                  <div class="new-form-footer">
                    <v:button action="simple" value="--case when self.cSubAction = 'grantCreate' then 'Create' else 'Update' end" name="sg_save" xhtml_class="form-button">
                      <v:on-post>
                        <![CDATA[
                          declare tmp, params any;

                          declare exit handler for SQLSTATE '*'
                          {
                            if (__SQL_STATE = 'TEST')
                            {
                              self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
                              self.vc_is_valid := 0;
                              return;
                            }
                            resignal;
                          };
                          params := self.vc_page.vc_event.ve_params;

                          self.vg_account    := trim (self.sg_account.ufl_value);
                          self.vg_enable     := cast (get_keyword ('sg_enable', params, '0') as integer);
                          self.vg_mode       := trim (self.sg_mode.ufl_value);
                          self.vg_account_id := (select U_ID from DB.DBA.SYS_USERS where U_NAME = self.vg_account);
                          if (isnull (self.vg_account_id))
                          {
                            self.vc_error_message := 'User does not exist!';
                            self.vc_is_valid := 0;
                            return;
                          }
                          if (
                              (
                               (self.cSubAction = 'grantCreate') and
                               (exists (select 1 from CAL.WA.GRANTS where G_DOMAIN_ID = self.domain_id and G_ACCOUNT_ID = self.vg_account_id))
                              ) or
                              (
                               (self.cSubAction = 'grantUpdate') and
                               (exists (select 1 from CAL.WA.GRANTS where G_DOMAIN_ID = self.domain_id and G_ACCOUNT_ID = self.vg_account_id and G_ID <> self.vg_id))
                              )
                             )
                          {
                            self.vc_error_message := 'Another share for the same user already exists!';
                            self.vc_is_valid := 0;
                            return;
                          }

                          if (self.cSubAction = 'grantCreate')
                          {
                            insert into CAL.WA.GRANTS (G_DOMAIN_ID, G_ACCOUNT_ID, G_ENABLE, G_MODE)
                              values (self.domain_id, self.vg_account_id, self.vg_enable, self.vg_mode);
                          } else {
                            update CAL.WA.GRANTS
                               set G_ACCOUNT_ID = self.vg_account_id,
                                   G_ENABLE = self.vg_enable,
                                   G_MODE = self.vg_mode
                             where G_DOMAIN_ID = self.domain_id
                               and G_ID = self.vg_id;
                          }

                          self.cSubAction := 'grantBrowse';
                          self.vc_data_bind(e);
                        ]]>
                      </v:on-post>
                    </v:button>
                    <v:button action="simple" value="Cancel" name="sg_cancel" xhtml_class="form-button">
                      <v:on-post>
                        <![CDATA[
                          self.cSubAction := 'grantBrowse';
                          self.vc_data_bind(e);
                        ]]>
                      </v:on-post>
                    </v:button>
                  </div>
                </v:template>

                <v:template type="simple" enabled="--case when self.cSubAction = 'sharedBrowse' then 1 else 0 end">
                  <v:button value="--'Accept'" action="simple" xhtml_class="button">
                    <v:on-post>
                      <![CDATA[
                        self.cSubAction := 'sharedCreate';
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                  <v:button value="Delete" action="simple" xhtml_onclick="--'javascript: return confirmAction(\'Are you sure that you want to delete the selected item(s)?\', document.F1, \'cb_item\', \'No items were selected for deletion.\');'" xhtml_class="button">
                    <v:on-post>
                      <![CDATA[
                        declare N integer;

                        for (N := 0; N < length(e.ve_params); N := N + 4)
                          if (e.ve_params[N] = 'cb_item')
                            delete from CAL.WA.SHARED where S_ID = cast (e.ve_params[N+1] as integer);

                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                  <v:data-set name="ds_shared" sql="select a.*, b.WAI_NAME from CAL.WA.SHARED a, DB.DBA.WA_INSTANCE b where a.S_DOMAIN_ID = :p0 and a.S_CALENDAR_ID = b.WAI_ID order by b.WAI_NAME" nrows="0" scrollable="1">
                    <v:param name="p0" value="--self.domain_id" />

                    <v:template name="ds_shared_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                      <table id="preferences" style="width: 100%; background-color: #FFF;" cellspacing="0">
                        <thead class="sortHeader">
                          <tr>
                            <th class="checkbox" width="1%">
                              <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')" />
                            </th>
                            <th style="text-align: left;">Calendar</th>
                            <th style="text-align: left;" width="5%">Type</th>
                            <th style="text-align: left;" width="5%">Visible</th>
                            <th style="text-align: left;" width="5%">Mode</th>
                            <th style="text-align: left;" width="5%">Color</th>
                            <th style="text-align: left;" width="5%">Action</th>
                          </tr>
                        </thead>
                      </table>
                    </v:template>
                    <v:template name="ds_shared_repeat" type="repeat">

                      <v:template name="ds_shared_browse" type="browse" name-to-remove="table" set-to-remove="both">
                        <table>
                          <tr>
                            <td align="center" valign="top">
                              <input type="checkbox" name="cb_item" value="<?V (control as vspx_row_template).te_column_value('S_ID') ?>" onclick="selectCheck(this, 'cb_item')" />
                            </td>
                            <td nowrap="nowrap">
                              <v:label value="--(control.vc_parent as vspx_row_template).te_column_value('WAI_NAME')" />
                            </td>
                            <td nowrap="nowrap">
                              <?vsp
                                http (case when isnull ((control as vspx_row_template).te_column_value('S_GRANT_ID')) then 'Public' else 'Shared' end);
                              ?>
                            </td>
                            <td nowrap="nowrap">
                              <?vsp
                                http (case when (control as vspx_row_template).te_column_value('S_VISIBLE') = 1 then 'Yes' else 'No' end);
                              ?>
                            </td>
                            <td nowrap="nowrap">
                              <?vsp
                                declare calendar_id integer;

                                calendar_id := (control as vspx_row_template).te_column_value('S_CALENDAR_ID');
                                for (select a.WAI_IS_PUBLIC,
                                            b.S_GRANT_ID,
                                            c.G_ENABLE,
                                            c.G_MODE
                                       from DB.DBA.WA_INSTANCE a,
                                            CAL.WA.SHARED b
                                              left join CAL.WA.GRANTS c on c.G_ID = b.S_GRANT_ID
                                      where a.WAI_ID = b.S_CALENDAR_ID
                                        and b.S_DOMAIN_ID = self.domain_id
                                        and b.S_CALENDAR_ID = calendar_id
                                        and b.S_VISIBLE = 1) do
                                {
                                  if (isnull (S_GRANT_ID))
                                  {
                                    if (WAI_IS_PUBLIC)
                                    {
                                      http ('Read Only');
                                    } else {
                                      http ('Disabled');
                                    }
                                  } else {
                                    if (G_ENABLE)
                                    {
                                      if (G_MODE = 'R')
                                      {
                                        http ('Read Only');
                                      } else {
                                        http ('Read/Write');
                                      }
                                    } else {
                                      http ('Disabled');
                                    }
                                  }
                                }
                              ?>
                            </td>
                            <td nowrap="nowrap">
                              <?vsp
                                http (sprintf ('<div id="ss_color_div" class="ss_color" style="background-color: %s;"></div>', (control as vspx_row_template).te_column_value('S_COLOR')));
                              ?>
                            </td>
                            <td nowrap="nowrap">
                              <v:button value="Edit" action="simple" xhtml_class="button">
                                <v:on-post>
                                  <![CDATA[
                                    self.vs_id := (control.vc_parent as vspx_row_template).te_column_value('S_ID');
                                    self.cSubAction := 'sharedUpdate';
                                    self.vc_data_bind(e);
                                  ]]>
                                </v:on-post>
                              </v:button>
            </td>
          </tr>
        </table>
                      </v:template>

                    </v:template>

                    <v:template type="simple" name-to-remove="table" set-to-remove="top">
                      <table>
                      </table>
                    </v:template>

                  </v:data-set>
                </v:template>

                <v:template type="simple" enabled="--case when self.cSubAction in ('sharedCreate', 'sharedUpdate') then 1 else 0 end">
                  <v:before-data-bind>
                    <![CDATA[
                      declare params any;
                      params := self.vc_page.vc_event.ve_params;

                      if (isnull (get_keyword ('ss_calendar', params)))
                      {
                        declare exit handler for not found goto _end2;

                        if (self.cSubAction = 'sharedUpdate')
                        {
                          select b.WAI_NAME,
                                 a.S_GRANT_ID,
                                 a.S_CALENDAR_ID,
                                 a.S_VISIBLE,
                                 a.S_COLOR
                            into self.vs_calendar,
                                 self.vs_grant_id,
                                 self.vs_calendar_id,
                                 self.vs_visible,
                                 self.vs_color
                            from CAL.WA.SHARED a,
                                 DB.DBA.WA_INSTANCE b
                           where a.S_ID = self.vs_id
                             and a.S_CALENDAR_ID = b.WAI_ID;

                           return;
                        }
                      _end2:;

                        self.cSubAction := 'sharedCreate';
                        self.vs_id := null;
                        self.vs_grant_id := null;
                        self.vs_calendar_id := null;
                        self.vs_calendar := '';
                        self.vs_visible := 1;
                        self.vs_color := '#888';
                      }
                    ]]>
                  </v:before-data-bind>
                  <div class="new-form-body">
                    <table cellspacing="0">
                      <tr>
                        <td colspan="2" align="center">
                          <?vsp
                            http ('<a href="javascript: void(0);" onclick="javascript: window.open (\'help.vspx?page=proba\', \'calendar_help\', \'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=420, width=500\');">Learn more about public and shared calendars</a><br />');
                          ?>
                        </td>
                      </tr>
                      <tr>
                        <th width="30%" valign="top">
                          Calendar type
                        </th>
                        <td nowrap="nowrap">
                          <?vsp
                            http (sprintf ('<input type="radio" name="ss_type" id="ss_type_0" value="0" %s onchange="javascript: calendarsHelp(1);" /> <label for="ss_type_0">Public</label>', case when isnull (self.vs_grant_id) then 'checked="checked"' else '' end));
                            http ('<br />');
                            http (sprintf ('<input type="radio" name="ss_type" id="ss_type_1" value="1" %s onchange="javascript: calendarsHelp(1);" /> <label for="ss_type_1">Shared to Me</label>', case when not isnull (self.vs_grant_id) then 'checked="checked"' else '' end));
                          ?>
                        </td>
                      </tr>
                      <tr>
                        <th >
                          Calendar name
                        </th>
                        <td>
                          <v:text name="ss_calendar" xhtml_id="ss_calendar" value="--self.vs_calendar" xhtml_size="60" />
                          <input id="ss_type_button" type="button" value="Select" onclick="javascript: calendarsShow('calendars.vspx?params=ss_calendar:s1;',520)" class="button" />
                        </td>
                      </tr>
                      <tr>
                        <th />
                        <td>
                          <?vsp
                            http (sprintf ('<input type="checkbox" value="1" name="ss_visible" id="ss_visible" %s />', CAL.WA.checkedAttribute (self.vs_visible)));
                          ?>
                          <vm:label for="ss_visible" value="Visible"/>
                        </td>
                      </tr>
                      <tr>
                        <th>
                          Color
                        </th>
                        <td>
                          <input type="hidden" id="ss_color" name="ss_color" value="<?V self.vs_color ?>" />
                          <div id="ss_color_div" class="ss_color"></div>
                        </td>
                      </tr>
                    </table>
                    <script type="text/javascript">
                      <![CDATA[
                    		var c = new OAT.Color();
                    		var colorRef = function(event)
                    		{
                    			var callback = function(color)
                    			{
                    			  $("ss_color").value = color;
                    			  $("ss_color_div").style.backgroundColor = color;
                    			}
                    			var coords = OAT.Dom.position("ss_color_div");
                    			c.pick(coords[0],coords[1],callback);
                    		}
                			  $("ss_color_div").style.backgroundColor = "<?V self.vs_color ?>";
                    		OAT.Dom.attach("ss_color_div", "click", colorRef);
                      ]]>
                    </script>
                  </div>
                  <div class="new-form-footer">
                    <v:button action="simple" value="--case when self.cSubAction = 'sharedCreate' then 'Accept' else 'Update' end" name="ss_save" xhtml_class="form-button">
                      <v:on-post>
                        <![CDATA[
                          declare tmp, vs_type, params any;

                          declare exit handler for SQLSTATE '*'
                          {
                            if (__SQL_STATE = 'TEST')
                            {
                              self.vc_error_message := CAL.WA.test_clear(__SQL_MESSAGE);
                              self.vc_is_valid := 0;
                              return;
                            }
                            resignal;
                          };
                          params := self.vc_page.vc_event.ve_params;

                          vs_type             := get_keyword ('ss_type', params, '');
                          self.vs_calendar    := trim (self.ss_calendar.ufl_value);
                          self.vs_visible     := cast (get_keyword ('ss_visible', params, '0') as integer);
                          self.vs_color       := get_keyword ('ss_color', params, '#888');
                          self.vs_calendar_id := (select WAI_ID from DB.DBA.WA_INSTANCE where WAI_NAME = self.vs_calendar and WAI_ID <> self.domain_id);
                          if (isnull (self.vs_calendar_id))
                          {
                            self.vc_error_message := 'Calendar does not exist!';
                            self.vc_is_valid := 0;
                            return;
                          }
                          if ((vs_type = '0') and not CAL.WA.domain_is_public (self.vs_calendar_id))
                          {
                            self.vc_error_message := 'Calendar is not public!';
                            self.vc_is_valid := 0;
                            return;
                          }
                          if (
                              (
                               (self.cSubAction = 'sharedCreate') and
                               (exists (select 1 from CAL.WA.SHARED where S_DOMAIN_ID = self.domain_id and S_CALENDAR_ID = self.vs_calendar_id))
                              )
                              or
                              (
                               (self.cSubAction = 'sharedUpdate') and
                               (exists (select 1 from CAL.WA.SHARED where S_DOMAIN_ID = self.domain_id and S_CALENDAR_ID = self.vs_calendar_id and S_ID <> self.vs_id))
                              )
                             )
                          {
                            self.vc_error_message := 'Calendar with the same name is already accepted!';
                            self.vc_is_valid := 0;
                            return;
                          }
                          if (vs_type = '0')
                          {
                            self.vs_grant_id := null;
                          } else {
                            self.vs_grant_id := (select b.G_ID from DB.DBA.WA_INSTANCE a, CAL.WA.GRANTS b where a.WAI_TYPE_NAME = 'Calendar' and a.WAI_NAME = self.vs_calendar and a.WAI_ID = b.G_DOMAIN_ID and b.G_ACCOUNT_ID = self.account_id);
                            if (isnull (self.vs_grant_id))
                            {
                              self.vc_error_message := 'Calendar with this name is not shared to you!';
                              self.vc_is_valid := 0;
                              return;
                            }
                          }

                          if (self.cSubAction = 'sharedCreate')
                          {
                            insert into CAL.WA.SHARED (S_DOMAIN_ID, S_GRANT_ID, S_CALENDAR_ID, S_VISIBLE, S_COLOR)
                              values (self.domain_id, self.vs_grant_id, self.vs_calendar_id, self.vs_visible, self.vs_color);
                          } else {
                            update CAL.WA.SHARED
                               set S_GRANT_ID = self.vs_grant_id,
                                   S_CALENDAR_ID = self.vs_calendar_id,
                                   S_VISIBLE = self.vs_visible,
                                   S_COLOR = self.vs_color
                             where S_DOMAIN_ID = self.domain_id
                               and S_ID = self.vs_id;
                          }

                          self.cSubAction := 'sharedBrowse';
                          self.vc_data_bind(e);
                        ]]>
                      </v:on-post>
                    </v:button>
                    <v:button action="simple" value="Cancel" name="ss_cancel" xhtml_class="form-button">
                      <v:on-post>
                        <![CDATA[
                          self.cSubAction := 'sharedBrowse';
                          self.vc_data_bind(e);
                        ]]>
                      </v:on-post>
                    </v:button>
                  </div>
                </v:template>
                <script type="text/javascript">
                  <![CDATA[
                    coloriseTable('preferences');
                    calendarsHelp();
                  ]]>
                </script>
      </vm:if>
      
      <vm:if test="(self.cAction in ('create', 'edit', 'view'))">
                <div id="cDiv" style="position: absolute; visibility: hidden; background-color: white; z-index: 10;"></div>
      </vm:if>
      
      <div id="reminderDiv" style="display: none;">
        <div style="height: 200px; overflow: auto;">
          <table id="reminderTable" style="width: 100%; background-color: #FFF;" cellspacing="0">
            <thead class="sortHeader">
              <tr>
                <th class="checkbox" width="1%">
                  <input type="checkbox" name="cbr_all" value="Select All" onclick="selectAllCheckboxes2(this, 'cbr_item')" />
                </th>
                <th>
                  Name
                </th>
                <th width="10%">
                  Start At
                </th>
              </tr>
            </thead>
            <tbody id="reminderBody">
            </tbody>
          </table>
        </div>
        <div class="new-form-footer">
          <input type="button" value="Dismiss Selected" onclick="javascript: dismissReminder ('cbr_item', false);" title="Dismiss Selected" class="button" />
          <input type="button" value="Dismiss All"      onclick="javascript: dismissReminder ('cbr_item', true);"  title="Dismiss All"      class="button" />
        </div>
      </div>
      <vm:if test="self.cScope in ('day', 'week', 'month')">
        <div id="deleteDiv" style="display: none;">
                  Are you sure that you want to delete the selected item?
      	</div>
        <div id="deleteDiv2" style="display: none;">
                  Do you want to delete all occurrences of the repeatable item, or just this one?<br /><br />
          <input type="radio" name="e_delete" id="e_delete_0" value="0" checked="checked" style="margin-left: 110px;" /><label for="e_delete_0">Delete this occurrence</label><br />
          <input type="radio" name="e_delete" id="e_delete_1" value="1" style="margin-left: 110px;" /><label for="e_delete_1">Delete the series</label><br />
        </div>
      </vm:if>
            </div>
          </td>
        </tr>
      </table>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
