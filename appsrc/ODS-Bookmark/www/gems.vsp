<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2008 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--

  set ISOLATION = 'Committed';
  set http_charset = 'utf-8';

  declare _domain_id, _user_id, _authorized integer;
  declare _params, _gems, _user, _password, _role varchar;
  declare _authorizeVector any;

  _domain_id := BMK.WA.session_domain (params);
  if (_domain_id > 0)
  {
    _authorized := BMK.WA.domain_is_public (_domain_id);
    if (not _authorized)
    {
      _authorized := 1;
      _authorizeVector := DB.DBA.vsp_auth_vec (http_request_header());
      if (_authorizeVector = 0)
      {
        _authorized := 0;
      } else {
        if (get_keyword ('authtype', _authorizeVector) <> 'basic')
        {
          _authorized := 0;
        } else {
          _user := get_keyword ('username', _authorizeVector, '');
          _password := get_keyword ('pass', _authorizeVector, '');
          if (not DB.DBA.web_user_password_check (_user, _password))
          {
            _authorized := 0;
          } else {
            _user_id := (select U_ID from DB.DBA.SYS_USERS where U_NAME = _user);
            _role := BMK.WA.access_role (_domain_id, _user_id);
            if (_role not in ('admin', 'owner'))
            {
              _authorized := 0;
            }
          }
        }
      }
    }
    http_rewrite ();
    if (not _authorized)
    {
      http_request_status ('HTTP/1.1 401 Unauthorized');
		  http_header ('WWW-Authenticate: Basic realm="wa"\r\n');
   	  http('Unauthorized');
    }
    else
    {
      declare exit handler for sqlstate '*' {
        return;
      };

      _gems := get_keyword('type', params);
      if (_gems in ('Bookmark.rss', 'Bookmark.atom', 'Bookmark.rdf', 'Bookmark.comment', 'Bookmark.opml', 'Bookmark.ocs'))
      {
        declare _result, _path, _content, _type, _xslt any;

        _user_id := BMK.WA.domain_owner_id (_domain_id);
        _path := BMK.WA.dav_home (_user_id) || 'Gems/' || BMK.WA.domain_name (_domain_id) || '/' || _gems;

        _result := string_output ();
        DB.DBA.DAV_RES_CONTENT_INT (DB.DBA.DAV_SEARCH_ID (_path, 'R'), _content, _type, 0, 0);
        _params := null;
        if (get_keyword (':id', params, '') <> '')
        {
          _params := vector (':id', get_keyword (':id', params));
        }
        xml_template (xml_tree_doc (xml_tree (_content)), _params, _result);
        _result := xml_tree_doc (xml_tree (string_output_string (_result)));
        if (_gems in ('Bookmark.atom', 'Bookmark.rdf'))
        {
          if (_gems = 'Bookmark.rdf')
          {
            _xslt := BMK.WA.xslt_full ('rss2rdf.xsl');
          }
          else
          {
            _xslt := BMK.WA.xslt_full ('rss2atom03.xsl');
            if (BMK.WA.settings_atomVersion (BMK.WA.settings (_domain_id)) = '1.0')
            {
              _xslt := BMK.WA.xslt_full ('rss2atom.xsl');
            }
          }
          _result := xslt (_xslt, _result);
        }

        http_request_status ('HTTP/1.1 200 OK');
        http_header ('Content-Type: text/xml\r\n');
        http_value (_result);
      }
    }
    http_flush ();
  }
?>