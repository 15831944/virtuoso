<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2006 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="bookmarks" decor="template/template.vspx" style="template/template.xsl" fast-render="1" button-anchors="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">

  <v:method name="sortColumn" arglist="in titleName varchar, in columnName varchar">
    <![CDATA[
      declare altStr, directionStr, imageStr varchar;

      if (self.n_order = columnName and self.n_direction = 'desc') {
        directionStr := 'Ascending';
        imageStr := '&nbsp;<img src="image/d.gif" border="0" alt="Down"/>';
      } else if (self.n_order = columnName and self.n_direction = 'asc') {
        directionStr := 'Descending';
        imageStr := '&nbsp;<img src="image/u.gif" border="0" alt="Up"/>';
      } else {
        directionStr := 'Ascending';
        imageStr := '&nbsp;&nbsp;';
      }
        altStr := sprintf ('Sort Rows on %s in %s Order', titleName, directionStr);
        http (sprintf ('<a href="#" onclick="javascript: myPost (''F1'', ''sortColumn'', ''%s''); return false;" alt="%s" title="%s">%s%s</a>', columnName, altStr, altStr, titleName, imageStr));
    ]]>
  </v:method>

  <v:method name="sortChange" arglist="in columnName varchar">
    <![CDATA[
      if (columnName = '')
        return;
      self.ds.vc_reset ();
      if (self.n_order = columnName) {
        self.n_direction := either (equ (self.n_direction, 'asc'), 'desc', 'asc');
      } else {
        self.n_direction := 'asc';
      }
      self.n_order := columnName;
    ]]>
  </v:method>

  <v:method name="mode_test" arglist="">
    <![CDATA[
      declare id, grant_id, user_id, folder_id, params any;

      params := self.vc_page.vc_event.ve_params;
      if (not is_empty_or_null (self.bTag)) {
        self.bTab := 'tags';
        self.bMode := 'browse';
        self.bNode := BMK.WA.make_node('t', self.bTag);
      } else if (not is_empty_or_null (get_keyword('link', params, ''))) {
        self.bTab  := 'bookmarks';
        self.bNode := BMK.WA.make_node('p', 0);
        self.bPath := '/' || self.bNode;
      } else if (not is_empty_or_null (get_keyword ('location', params, ''))) {
        grant_id := cast (get_keyword ('grant', params, '-1') as integer);
        folder_id := cast (get_keyword ('folder', params, '-1') as integer);
        self.bTab := 'bookmarks';
        if (grant_id >= 0)
          self.bTab := 'shared';
        self.bMode := 'browse';
        if ((folder_id = -1) and (grant_id >= 0)) {
          user_id := (select G_GRANTER_ID from BMK.WA.GRANTS where G_ID = grant_id);
          self.bNode := BMK.WA.make_node ('u', user_id);
          self.bPath := '/' || BMK.WA.make_node ('u', -1) || '/' || BMK.WA.make_node ('u', user_id);
        } else {
          self.bNode := BMK.WA.make_node ('f', folder_id);
          if (grant_id >= 0)
            self.bNode := ucase(self.bNode);
          self.bPath := BMK.WA.bmk_path2 (self.bNode, grant_id);
        }
        self.bBookmark := 'pt_node_' || self.bPath;
        self.bLocation := BMK.WA.make_node ('b', get_keyword ('location', params));
        if (self.bTab = 'shared')
          self.bLocation := ucase(self.bLocation);
      } else if (not is_empty_or_null (get_keyword ('folder', params, ''))) {
        grant_id := cast (get_keyword ('grant', params, '-1') as integer);
        folder_id := cast (get_keyword ('folder', params, '-1') as integer);
        self.bTab := 'bookmarks';
        if (grant_id >= 0)
          self.bTab := 'shared';
        self.bMode := 'browse';
        if ((folder_id = -1) and (grant_id >= 0)) {
          user_id := (select G_GRANTER_ID from BMK.WA.GRANTS where G_ID = grant_id);
          self.bNode := BMK.WA.make_node ('u', user_id);
          self.bPath := '/' || BMK.WA.make_node ('u', -1) || '/' || BMK.WA.make_node ('u', user_id);
        } else {
          self.bNode := BMK.WA.make_node ('f', folder_id);
          if (grant_id >= 0)
            self.bNode := ucase(self.bNode);
          self.bPath := BMK.WA.bmk_path2 (self.bNode, grant_id);
        }
        self.bBookmark := 'pt_node_' || self.bPath;
      }
    ]]>
  </v:method>

  <v:method name="toolbarLabel" arglist="in cmd varchar">
    <![CDATA[
      if (self.tbLabels = 0)
        return '';
      return sprintf('<br /><span class="toolbarLabel">%s</span>', cmd);
    ]]>
  </v:method>

  <v:method name="toolbarEnable" arglist="in cmd varchar">
    <![CDATA[
      if ((cmd = 'shared') and (self.account_role in ('public', 'guest')))
        return 0;
      if ((cmd = 'Bookmark/Create') and ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')))
        return 0;
      if ((cmd = 'Folder/Create') and ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')))
        return 0;
      if ((cmd = 'Smart Folder/Create') and ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')))
        return 0;
      if ((cmd = 'import') and ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')))
        return 0;
      if ((cmd = 'export') and ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')))
        return 0;
      return 1;
    ]]>
  </v:method>

  <v:method name="validateNode" arglist="in domain_id integer">
    <![CDATA[
      declare N, node_type, node_id, nodes, tmp any;

      node_id := BMK.WA.node_id(self.bNode);
      node_type := BMK.WA.node_type(self.bNode);

      if ((lcase(node_type) = 'f') and (node_id >= 0) and (exists (select 1 from BMK.WA.FOLDER where F_ID = node_id)))
        goto _next;

      if ((node_type = 's') and (node_id >= 0) and (exists (select 1 from BMK.WA.SFOLDER where SF_ID = node_id)))
        goto _next;

      if ((node_type = 'u') and (exists (select 1 from DB.DBA.SYS_USERS where U_ID = node_id)))
        goto _next;

      if (self.bNode in (BMK.WA.make_node('r', 0), BMK.WA.make_node('r', 1), BMK.WA.make_node('r', 2), BMK.WA.make_node('f', -1), BMK.WA.make_node('s', -1), BMK.WA.make_node('u', -1)))
        goto _next;

      self.bNode := BMK.WA.make_node('f', -1);
    _next:;
      tmp := '';
      nodes := split_and_decode(trim(self.bPath, '/'), 0, '\0\0/');
      for (N := 0; N < length(nodes) - 1; N := N + 1) {
        tmp := concat(tmp, '/', nodes[N]);
        if (not BMK.WA.vector_contains(self.bState, tmp))
          self.bState := vector_concat(self.bState, vector(tmp));
      }
    ]]>
  </v:method>

  <v:method name="showTree" arglist="in level integer, in domain_id integer, in user_id integer, in node varchar, in path varchar">
    <![CDATA[
      declare N, isOpen integer;
      declare nodes, image, image2, alt, class any;

      if (isnull(self.bState))
        self.bState := vector();
      nodes := BMK.WA.bmk_tree2(domain_id, user_id, node, path);
      if (level = 1)
        self.validateNode(domain_id);
      for (N := 0; N < length(nodes); N := N + 3) {
        if (level = 1) {
          http ('<div style="margin-left:3px; margin-top:3px; white-space: nowrap;">');
        } else {
          http ('<div style="margin-left:12px; white-space: nowrap;">');
        }
        image := 'plus.gif';
        image2 := 'folder_16.png';
        alt := 'Open Node';
        if (not BMK.WA.bmk_node_has_childs (domain_id, user_id, nodes[N+1], nodes[N+2])) {
          image := 'c.gif';
          image2 := 'folder_16.png';
        } else if (BMK.WA.vector_contains(self.bState, nodes[N+2])) {
          image := 'minus.gif';
          image2 := 'folder_open_16.png';
          alt := 'Close Node';
        }
        if ((BMK.WA.node_type(nodes[N+1]) = 'u') and (BMK.WA.node_id(nodes[N+1]) = -1))
          image2 := 'group_16.png';
        if ((BMK.WA.node_type(nodes[N+1]) = 'u') and (BMK.WA.node_id(nodes[N+1]) >= 0))
          image2 := 'user_16.png';

        class := 'nolink_b';
        if (nodes[N+2] = self.bPath) {
          class := 'nolink_a';
          self.bName := nodes[N];
        }
        if (image = 'c.gif') {
          http (sprintf ('<img src="image/%s" border="0" width="11px" />', image));
        } else {
        http(sprintf('<a href="#" name="pt_toggle_%s" onclick="javascript: vspxPost (\'pt_browse\', \'pt_toggle\', \'%s\', \'pt_path\', \'%s\'); return false"><img src="image/%s" border="0" class="nolink" alt="%s" title="%s" /></a>', nodes[N+2], nodes[N+1], nodes[N+2], image, alt, alt));
        }
        http(sprintf('<a href="#" name="pt_node_%s" onclick="javascript: vspxPost (\'pt_browse\', \'pt_node\', \'%s\', \'pt_path\', \'%s\'); return false" class="nolink3 %s" alt="%s" title="%s" > <img src="image/%s" border="0" /> %s</a>', nodes[N+2], nodes[N+1], nodes[N+2], class, nodes[N], nodes[N], image2, nodes[N]));
        if (image = 'minus.gif')
          self.showTree(level+1, domain_id, user_id, nodes[N+1], nodes[N+2]);

        http ('</div>');
      }
    ]]>
  </v:method>

  <v:method name="shareNode" arglist="in node varchar, in grants varchar, in override integer">
    <![CDATA[
      declare N, pos, id integer;
      declare name, V any;

      grants := replace(grants, ' ', '');
      grants := replace(grants, ',,', ',');
      grants := trim(grants, ',', '');
      grants := grants || ',';
      for (select U_ID, U_NAME from BMK.WA.GRANTS, DB.DBA.SYS_USERS where G_GRANTER_ID = self.account_id and G_GRANTEE_ID = U_ID and lcase(G_OBJECT_TYPE) = lcase(BMK.WA.node_type(node)) and G_OBJECT_ID = BMK.WA.node_id(node)) do {
        name := U_NAME;
        id := U_ID;
        pos := strstr(grants, name || ',');
        if (isnull(pos)) {
          if (override)
            delete from BMK.WA.GRANTS where G_GRANTER_ID = self.account_id and G_GRANTEE_ID = id and lcase(G_OBJECT_TYPE) = lcase(BMK.WA.node_type(node)) and G_OBJECT_ID = BMK.WA.node_id(node);
        } else {
          grants := replace(grants, name || ',', '');
        }
      }
      V := split_and_decode(trim(grants, ','), 0, '\0\0,');
      for (N := 0; N < length(V); N := N + 1) {
        id := (select U_ID from SYS_USERS where U_NAME = V[N]);
        if (not isnull(id))
          insert into BMK.WA.GRANTS (G_GRANTER_ID, G_GRANTEE_ID, G_TYPE, G_OBJECT_TYPE, G_OBJECT_ID)
            values(self.account_id, id, 'G', ucase(BMK.WA.node_type(node)), BMK.WA.node_id(node));
      }
    ]]>
  </v:method>

  <v:method name="shareSelect" arglist="in node varchar">
    <![CDATA[
      declare grants any;

      grants := '';
      for (select U_ID, U_NAME from BMK.WA.GRANTS, DB.DBA.SYS_USERS where G_GRANTER_ID = self.account_id and G_GRANTEE_ID = U_ID and lcase(G_OBJECT_TYPE) = lcase(BMK.WA.node_type(node)) and G_OBJECT_ID = BMK.WA.node_id(node)) do
        grants := grants || cast (U_NAME as varchar) || ',';
      return trim(grants, ',');
    ]]>
  </v:method>

  <v:method name="linkClass" arglist="inout node any">
    <![CDATA[
      if (lcase(BMK.WA.node_type(node)) <> 'b')
        return 'read';

      if (self.account_role in ('public', 'guest'))
        return 'unread';

      return either(equ(BMK.WA.bookmark_flag (BMK.WA.node_id(node), self.account_id), 1), 'read', 'unread');
    ]]>
  </v:method>

  <vm:pagetitle>Bookmarks</vm:pagetitle>
  <vm:pagewrapper>
    <vm:header>
      Bookmarks
    </vm:header>
    <vm:variables>
      <v:variable persist="0" name="n_order" type="varchar" default="'_NAME'" />
      <v:variable persist="0" name="n_direction" type="varchar" default="'asc'" />
      <v:variable persist="0" name="bTag" type="varchar" default="null" />
      <v:variable persist="0" name="bTab" type="varchar" default="'bookmarks'"/>
      <v:variable persist="temp" name="bName" type="varchar" default="''"/>
      <v:variable persist="temp" name="bLocation" type="any" default="''"/>
      <v:variable persist="0" name="bNodes" type="any" default="null"/>
      <v:variable persist="0" name="bMode" type="varchar" default="'browse'"/>
      <v:variable persist="0" name="bBookmark" type="varchar" default="null" />
      <v:variable persist="0" name="bNode" type="varchar" default="'f#-1'"/>
      <v:variable persist="0" name="bPath" type="varchar" default="'/f#-1'"/>
      <v:variable persist="0" name="bState" type="any" default="null" />
      <v:variable persist="0" name="bStep" type="varchar" default="''"/>

      <v:variable name="tbLabels" type="integer" default="1" />
      <v:variable name="chars" type="integer" default="60" />

      <v:variable name="v_id" type="any" default="-1"/>
      <v:variable name="v_parent_id" type="varchar" default="'0'"/>
      <v:variable name="v_uri" type="varchar" param-name="URI" default="'http://'"/>
      <v:variable name="v_return" type="varchar" param-name="URI" default="''"/>
      <v:variable name="v_name" type="varchar" param-name="TITLE" default="''"/>
      <v:variable name="v_oldName" type="varchar" default="''"/>
      <v:variable name="v_description" type="varchar" default="''"/>
      <v:variable name="v_keywords" type="varchar" default="''"/>
      <v:variable name="v_expression" type="varchar" default="''"/>
      <v:variable name="v_tag" type="varchar" default="''"/>
      <v:variable name="v_tags" type="varchar" default="''"/>
      <v:variable name="v_folder_name" type="varchar" default="''"/>
      <v:variable name="v_folder_id" type="varchar" default="'0'"/>
      <v:variable name="v_grants" type="any" default="null"/>
      <v:variable name="v_override" type="integer" default="1"/>
      <v:variable name="v_source" type="any" default="-1"/>
      <v:variable name="v_sourceParam_1" type="any" default="''"/>
      <v:variable name="v_sourceParam_2" type="any" default="''"/>
      <v:variable name="v_sourceParam_3" type="any" default="''"/>
      <v:variable name="v_sourceParam_4" type="any" default="''"/>
    </vm:variables>
    <vm:pagebody>
      <v:before-data-bind>
        <![CDATA[
          declare i integer;
          declare flag varchar;

          self.tbLabels := cast (get_keyword ('tbLabels', self.settings, '1') as integer);
          self.chars := cast (get_keyword ('chars', self.settings, '60') as integer);

          flag := get_keyword('mark', params, '');
          if (flag <> '') {
            for (i := 0; i < length(params); i := i + 2) {
              if (params[i] = 'cb_item') {
                declare exit handler for sqlstate '*' {
                  rollback work;
                  goto _next;
                };
                commit work;
                if (lcase(BMK.WA.node_type(params[i+1])) = 'f')
                  BMK.WA.folder_flag_set (BMK.WA.node_id(params[i+1]), self.account_id, flag);
                if (lcase(BMK.WA.node_type(params[i+1])) = 'b')
                  BMK.WA.bookmark_flag_set (BMK.WA.node_id(params[i+1]), self.account_id, flag);
              }
              _next:;
            }
          }

          if (get_keyword('URI', self.vc_page.vc_event.ve_params, '') <> '') {
            self.bMode := 'Bookmark/Create';
            self.v_id := -1;
          }
          self.bTab := lcase(get_keyword('tab', e.ve_params, self.bTab));
          if (get_keyword ('tab', e.ve_params, '') = 'shared') {
            self.bNode := BMK.WA.make_node ('u', -1);
            self.bPath := '/' || self.bNode;
          }
          self.bTag := lcase(get_keyword('tag', e.ve_params, ''));
          self.mode_test();
        ]]>
      </v:before-data-bind>
      <v:on-post>
        <![CDATA[
          if (e.ve_button is not null)  {
            if (e.ve_button.vc_name = 'pt_browse') {
              if (get_keyword('pt_toggle', e.ve_params, '') <> '') {
                self.bBookmark := 'pt_toggle_' || get_keyword ('pt_path', e.ve_params);
              } else if (get_keyword('pt_node', e.ve_params, '') <> '') {
                self.bBookmark := 'pt_node_' || get_keyword ('pt_path', e.ve_params);
              }
            } else if (e.ve_button.vc_name = 'pt_tags') {
              self.bBookmark := 'pt_tag_' || self.bTag;
            }
          }
        ]]>
      </v:on-post>

      <!-- Toolbar -->
      <v:template type="simple">
        <?vsp http('<input type="hidden" name="tbHidden" value=""/>'); ?>
        <?vsp
          if (0)
          {
        ?>
            <v:button name="toolbar" action="simple" style="url" value="Submit">
              <v:on-post>
                <![CDATA[
                  declare cmd any;
                  cmd := get_keyword ('tbHidden', e.ve_params, '');
                  if (cmd = 'bookmarks') {
                    if (self.bTab <> 'bookmarks') {
                      self.bNode := BMK.WA.make_node('f', -1);
                      self.bPath := BMK.WA.make_path('', 'f', -1);
                    }
                    self.bTab := 'bookmarks';
                    self.bMode := 'browse';
                  }

                  if (cmd = 'shared') {
                    if (self.bTab <> 'shared') {
                      self.bNode := BMK.WA.make_node('u', -1);
                      self.bPath := BMK.WA.make_path('', 'u', -1);
                    }
                    self.bTab := 'shared';
                    self.bMode := 'browse';
                  }

                  if (cmd = 'Bookmark/Create') {
                    self.bMode := 'Bookmark/Create';
                    self.v_id := -1;
                    self.v_tags := '';
                  }

                  if (cmd = 'Folder/Create') {
                    self.bMode := 'Folder/Create';
                    self.v_id := -1;
                  }

                  if (cmd = 'Smart Folder/Create') {
                    self.bTab := 'bookmarks';
                    self.bMode := 'Smart Folder/Create';
                    self.v_id := -1;
                  }

                  if (cmd = 'import') {
                    self.bMode := 'import';
                    self.bStep := '1';
                    self.v_tag := '';
                    self.v_folder_name := '';
                    self.v_source := -1;
                  }

                  if (cmd = 'export') {
                    self.bMode := 'export';
                  }
                  if (cmd = 'tag') {
                    declare N integer;

                    self.bMode := 'tag';
                    self.bNodes := vector();
                    for (N := 0; N < length(e.ve_params); N := N + 4) {
                      if (e.ve_params[N] = 'cb_item')
                        self.bNodes := vector_concat(self.bNodes, vector(e.ve_params[N+1]));
                    }
                  }
                  if (cmd = 'move') {
                    declare N integer;

                    self.bMode := 'move';
                    self.bNodes := vector();
                    for (N := 0; N < length(e.ve_params); N := N + 4) {
                      if (e.ve_params[N] = 'cb_item')
                        self.bNodes := vector_concat(self.bNodes, vector(e.ve_params[N+1]));
                    }
                  }

                  if (cmd = 'grants') {
                    declare N integer;

                        self.bMode := 'grants';
                    self.v_grants := '';
                    self.bNodes := vector();
                    for (N := 0; N < length(e.ve_params); N := N + 4) {
                      if (e.ve_params[N] = 'cb_item')
                        self.bNodes := vector_concat(self.bNodes, vector(e.ve_params[N+1]));
                    }
                  }

                  if (cmd = 'delete') {
                    declare N integer;
                    declare node any;

                    for (N := 0; N < length(e.ve_params); N := N + 4) {
                      if (e.ve_params[N] = 'cb_item') {
                        node := e.ve_params[N+1];
                        if (BMK.WA.node_type(node) = 'f') {
                          BMK.WA.folder_delete(self.domain_id, BMK.WA.node_id(node));
                        } else if (BMK.WA.node_type(node) = 'b') {
                          BMK.WA.bookmark_delete(self.domain_id, BMK.WA.node_id(node));
                        } else if (BMK.WA.node_type(node) = 's') {
                          BMK.WA.sfolder_delete(self.domain_id, BMK.WA.node_id(node));
                        }
                      }
                    }
                  }
                _end:
                  self.vc_data_bind(e);
       		      ]]>
       		    </v:on-post>
            </v:button>
        <?vsp
          }
        ?>
        <div class="toolbar">
          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''bookmarks'');'" xhtml_title="My Bookmarks" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/bmk_32.png" border="0"/>' || self.toolbarLabel('My Bookmarks');
              ]]>
            </v:before-render>
          </v:url>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''shared'');'" enabled="--self.toolbarEnable('shared')" xhtml_title="Show Shared Bookmarks" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/shared_32.png" border="0"/>' || self.toolbarLabel('Shared Bookmarks');
              ]]>
            </v:before-render>
          </v:url>
          <v:template type="simple" enabled="--case when self.toolbarEnable('shared') then 0 else 1 end">
            <span class="toolbar">
              <img src="image/grey_shared_32.png" border="0" alt="Shared Bookmarks"/><?vsp http(self.toolbarLabel('Shared Bookmarks'));?>
            </span>
          </v:template>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar"/>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''import'');'" enabled="--self.toolbarEnable('import')" xhtml_title="Import" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/impt_32.png" border="0"/>' || self.toolbarLabel('Import');
              ]]>
            </v:before-render>
          </v:url>
          <v:template type="simple" enabled="--case when self.toolbarEnable('import') then 0 else 1 end">
            <span class="toolbar">
              <img src="image/grey_impt_32.png" border="0" alt="Import"/><?vsp http(self.toolbarLabel('Import'));?>
            </span>
          </v:template>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''export'');'" enabled="--self.toolbarEnable('export')" xhtml_title="Export" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/exp_32.png" border="0"/>' || self.toolbarLabel('Export');
              ]]>
            </v:before-render>
          </v:url>
          <v:template type="simple" enabled="--case when self.toolbarEnable('export') then 0 else 1 end">
            <span class="toolbar">
              <img src="image/grey_exp_32.png" border="0" alt="Export"/><?vsp http(self.toolbarLabel('Export'));?>
            </span>
          </v:template>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar"/>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''Bookmark/Create'');'" enabled="--self.toolbarEnable('Bookmark/Create')" xhtml_title="New Folder" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/bmk_add_32.png" border="0"/>' || self.toolbarLabel('New Bookmark');
              ]]>
            </v:before-render>
          </v:url>
          <v:template type="simple" enabled="--case when self.toolbarEnable('Bookmark/Create') then 0 else 1 end">
            <span class="toolbar">
              <img src="image/grey_bmk_add_32.png" border="0" alt="New Bookmark"/><?vsp http(self.toolbarLabel('New Bookmark'));?>
            </span>
          </v:template>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''Folder/Create'');'" enabled="--self.toolbarEnable('Folder/Create')" xhtml_title="New Folder" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/new_fldr_32.png" border="0"/>' || self.toolbarLabel('New Folder');
              ]]>
            </v:before-render>
          </v:url>
          <v:template type="simple" enabled="--case when self.toolbarEnable('Folder/Create') then 0 else 1 end">
            <span class="toolbar">
              <img src="image/grey_new_fldr_32.png" border="0" alt="New Folder"/><?vsp http(self.toolbarLabel('New Folder'));?>
            </span>
          </v:template>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''Smart Folder/Create'');'" enabled="--self.toolbarEnable('Smart Folder/Create')" xhtml_title="New Smart Folder" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/sfolder_32.jpg" border="0"/>' || self.toolbarLabel('New Smart Folder');
              ]]>
            </v:before-render>
          </v:url>
          <v:template type="simple" enabled="--case when self.toolbarEnable('Smart Folder/Create') then 0 else 1 end">
            <span class="toolbar">
              <img src="image/grey_sfolder_32.jpg" border="0" alt="New Smart Folder"/><?vsp http(self.toolbarLabel('New Smart Folder'));?>
            </span>
          </v:template>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar"/>

          <span id="tbTag" class="toolbar" style="display: none">
            <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''tag'');'" enabled="--self.toolbarEnable('tag')" xhtml_title="Tag">
              <v:before-render>
                <![CDATA[
                  control.ufl_value := '<img src="image/tag_32.png" border="0"/>' || self.toolbarLabel('Tag');
                ]]>
              </v:before-render>
            </v:url>
          </span>
          <span id="tbTag_gray" class="toolbar" style="display: inline;">
            <img src="image/grey_tag_32.png" border="0" alt="Tag"/><?vsp http(self.toolbarLabel('Tag'));?>
          </span>

          <span id="tbMove" class="toolbar" style="display: none">
            <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''move'');'" enabled="--self.toolbarEnable('move')" xhtml_title="Move">
              <v:before-render>
                <![CDATA[
                  control.ufl_value := '<img src="image/move_32.png" border="0"/>' || self.toolbarLabel('Move');
                ]]>
              </v:before-render>
            </v:url>
          </span>
          <span id="tbMove_gray" class="toolbar" style="display: inline;">
            <img src="image/grey_move_32.png" border="0" alt="Move"/><?vsp http(self.toolbarLabel('Move'));?>
          </span>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar"/>

          <span id="tbSharing" class="toolbar" style="display: none">
            <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''grants'');'" enabled="--self.toolbarEnable('grants')" xhtml_title="Sharing">
              <v:before-render>
                <![CDATA[
                  control.ufl_value := '<img src="image/grants_32.png" border="0"/>' || self.toolbarLabel('Sharing');
                ]]>
              </v:before-render>
            </v:url>
          </span>
          <span id="tbSharing_gray" class="toolbar" style="display: inline;">
            <img src="image/grey_grants_32.png" border="0" alt="Sharing"/><?vsp http(self.toolbarLabel('Sharing'));?>
          </span>

          <span id="tbDelete" class="toolbar" style="display: none">
            <v:url value="--''" format="%s" url="--'javascript: if (confirmAction(\'Are you sure that you want to delete selected items?\', document.F1, ''cb_'', ''No items were selected for deletion.'')) toolbarPost(''delete'');'" xhtml_title="Delete">
              <v:before-render>
                <![CDATA[
                  control.ufl_value := '<img src="image/del_32.png" border="0"/>' || self.toolbarLabel('Delete');
                ]]>
              </v:before-render>
            </v:url>
          </span>
          <span id="tbDelete_gray" class="toolbar" style="display: inline;">
            <img src="image/grey_del_32.png" border="0" alt="Delete"/><?vsp http(self.toolbarLabel('Delete'));?>
          </span>

        </div>
        <div style="clear: both;"/>
      </v:template>
      <!--=========================================================================-->

      <vm:if test="(self.account_role <> 'public') and (self.bTab <> 'shared')">
        <div class="tabs">
          <div class="tabLabel">
            <v:button action="simple" style="url" value="Folder Tree" xhtml_class="--either(equ(self.bTab, 'bookmarks'), 'tab activeTab2', 'tab tab2')" xhtml_alt="Folder Tree">
              <v:on-post>
                <![CDATA[
                  if (self.bTab <> 'bookmarks') {
                    self.bTab := 'bookmarks';
                    self.bNode := '';
                    self.vc_data_bind (e);
              }
                ]]>
              </v:on-post>
            </v:button>
          </div>
          <div class="tabLabel">
            <v:button action="simple" style="url" value="Tags" xhtml_class="--either(equ(self.bTab, 'tags'), 'tab activeTab2', 'tab tab2')" xhtml_alt="Tags">
              <v:on-post>
                <![CDATA[
                  if (self.bTab <> 'tags') {
                    self.bTab := 'tags';
                    self.bNode := 't';
                    self.bPath := 't';
                    self.vc_data_bind (e);
                }
                ]]>
              </v:on-post>
            </v:button>
          </div>
        </div>
      </vm:if>

      <div class="pane_main">
                <?vsp
              if (0)
              {
                ?>
                <v:button name="pt_tags" action="simple" style="url" value="Submit"/>
                <v:button name="pt_browse" action="simple" style="url" value="Submit">
                  <v:on-post>
                    <![CDATA[
                  declare action, node, path any;

                      path := get_keyword ('pt_path', e.ve_params, '');

                      -- touggle
                  node := get_keyword ('pt_toggle', e.ve_params, get_keyword ('pt_node', e.ve_params, ''));
                      if (node <> '') {
                        if (BMK.WA.vector_contains(self.bState, path)) {
                      if (get_keyword ('pt_toggle', e.ve_params, '') <> '')
                          self.bState := BMK.WA.vector_cut(self.bState, path);
                          if (self.bPath like concat(path, '%')) {
                            self.bNode := node;
                            self.bPath := path;
                          }
                        } else {
                          self.bState := vector_concat (self.bState, vector(path));
                        }
                    self.bMode := 'browse';
                      }

                      -- node
                      node := get_keyword('pt_node', e.ve_params, '');
                      if (node <> '') {
                    self.bMode := 'browse';
                        self.bNode := node;
                        self.bPath := path;
                      }

                  -- action
                  action := get_keyword ('pt_action', e.ve_params, '');
                  if (action <> '') {
                    node := get_keyword ('pt_value', e.ve_params, '');
                    if (action = 'delete') {
                      if (BMK.WA.node_type(node) = 'f') {
                        BMK.WA.folder_delete(self.domain_id, BMK.WA.node_id(node));
                      } else if (BMK.WA.node_type(node) = 'b') {
                        BMK.WA.bookmark_delete(self.domain_id, BMK.WA.node_id(node));
                      } else if (BMK.WA.node_type(node) = 's') {
                        BMK.WA.sfolder_delete(self.domain_id, BMK.WA.node_id(node));
                      }
                    }
                    if (action = 'edit') {
                      if (BMK.WA.node_type(node) = 'f') {
                        self.bMode := 'Folder/Update';
                        self.v_id := BMK.WA.node_id(node);
                      } else if (BMK.WA.node_type(node) = 'b') {
                        self.bMode := 'Bookmark/Properties';
                        self.v_id := BMK.WA.node_id(node);
                      } else if (BMK.WA.node_type(node) = 's') {
                        self.bMode := 'Smart Folder/Update';
                        self.v_id := BMK.WA.node_id(node);
                      }
                    }
                  }


                      self.vc_data_bind (e);
                   ]]>
                  </v:on-post>
                </v:button>
            <?vsp
              }
            ?>
        <div class="pane_left">
          <?vsp
            if (self.bTab = 'bookmarks') {
              if (self.domain_id = -2) {
                self.showTree(1, self.domain_id, self.account_id, BMK.WA.make_node('r', 0), '');
              } else {
                self.showTree(1, self.domain_id, self.account_id, BMK.WA.make_node('r', 1), '');
              }
            } else if ((self.bTab = 'shared') and (self.domain_id <> -1)) {
              self.showTree(1, self.domain_id, self.account_id, BMK.WA.make_node('r', 2), '');
            }
          ?>
          <vm:if test="self.bTab = 'tags'">
            <div style="margin-left:3px; margin-top:3px;">
              <?vsp
                declare tMin, tMax integer;
                declare tClass, tStyle varchar;

                if (is_empty_or_null (self.bTag))
                  self.bTag := BMK.WA.node_suffix (self.bNode);
                select max(TS_COUNT), min(TS_COUNT) into tMax, tMin from BMK..TAGS_STATISTICS where domain_id = self.domain_id and account_id = self.account_id;

                for (select TS_TAG, TS_COUNT from BMK..TAGS_STATISTICS where domain_id = self.domain_id and account_id = self.account_id and TS_TAG <> '' order by TS_TAG) do {
                  tStyle := ODS.WA.tag_style(TS_COUNT, tMin, tMax);
                  tClass := '';
                    if (self.bTag = TS_TAG)
                    tClass := 'nolink_a';
                  http (sprintf ('<a href="#" onclick="javascript: myTags(\'%s\');" name="pt_tag_%s"><span class="%s" style="%s">%s</span></a> ', TS_TAG, TS_TAG, tClass, tStyle, TS_TAG));
                }
              ?>
            </div>
          </vm:if>
        </div>
        <div class="pane_right">
          <v:template type="simple" enabled="--case when (self.bMode = 'browse') then 1 else 0 end">
            <div class="pane_right_sub<?V case when (cast(get_keyword('panes', self.settings, '0') as integer) = 0) then '' else '1' end ?>">
            <?vsp
              declare className, nodeName, image, mt, st, sv any;

              mt := '';
              if (not ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')))
                mt := sprintf('Selected as <select name="mark" onchange="javascript: if (anySelected(this.form, \'cb_item\', \'No posts were selected to mark as \'+this.options[this.selectedIndex].text+\'.\')) {this.form.submit();} else {this.selectedIndex = 0}"><option/><option value="1">read</option><option value="0">unread</option></select>');
              st := sprintf('View <select name="show" onchange="javascript: this.form.submit();"><option value="">all</option><option value="1">read</option><option value="0">unread</option></select>');
              sv := get_keyword('show', self.vc_page.vc_event.ve_params, '');
              st := replace(st, sprintf('value="%s"', sv), sprintf('value="%s" selected="selected"', sv));

              self.mode_test();
              className := 'Root';
              image := 'folder_16.png';
              if (BMK.WA.node_type (self.bNode) = 'f') {
                if (BMK.WA.node_id (self.bNode) >= 0)
                  className := 'Folder';
              } else if (BMK.WA.node_type (self.bNode) = 's') {
                if (BMK.WA.node_id (self.bNode) >= 0) {
                  className := 'Smart Folder';
                  image := 'sfolder_16.jpg';
                }
              } else if (BMK.WA.node_type (self.bNode) = 't') {
                if (BMK.WA.node_suffix (self.bNode) <> '') {
                  className := 'Tag';
                  image := 'tag_16.png';
                }
              } else if (BMK.WA.node_type (self.bNode) = 'u') {
                if (BMK.WA.node_id (self.bNode) >= 0) {
                  className := 'User';
                  image := 'user_16.png';
                } else {
                  className := 'Users';
                  image := 'group_16.png';
                }
              } else if (BMK.WA.node_type (self.bNode) = 'F') {
                if (BMK.WA.node_id (self.bNode) >= 0)
                  className := 'Folder';
              }

              nodeName := null;
              if (BMK.WA.node_type (self.bNode) = 't') {
                  nodeName := 'Tags';
                if (BMK.WA.node_suffix (self.bNode) <> '')
                  nodeName := BMK.WA.node_suffix (self.bNode);
              } else {
                nodeName := self.bName;
              }

                nodeName := BMK.WA.stringCut(coalesce(nodeName, ''), self.chars);
              if (not is_empty_or_null(nodeName)) {
                http('<div id="channel_header">');
                  http(sprintf('<div id="channel_header_left"><img src="image/%s" border="0"/> %s</div>', image, nodeName));
                  http(sprintf('<div id="channel_header_right">%s %s</div>', mt, st));
                http('<br style="clear: both;"/>');
                http('</div>');
              }
            ?>
            <v:data-source name="dsrc" expression-type="sql" nrows="0" initial-offset="0">
              <v:before-data-bind>
                <![CDATA[
                  declare flag, tmp varchar;

                  self.mode_test();

                  control.ds_parameters := null;
                  control.ds_sql := 'select 0 _TYPE, F_ID _ID, \'\' _NODE, F_NAME _NAME, null _URI, null _LAST_UPDATE, null _CREATED, null BD_READ_FLAG from BMK.WA.FOLDER where 1=0';
                  tmp := control.ds_sql;
                  if (BMK.WA.node_type(self.bNode) = 'f') {
                    if (self.domain_id >= 0) {
                      control.ds_sql := 'select *
                                         from (select 0                        _TYPE,
                                                      F_ID                     _ID,
                                                      BMK.WA.make_node(\'f\', F_ID)  _NODE,
                                              F_NAME                   _NAME,
                                              \'\'                     _URI,
                                                        null                           _LAST_UPDATE,
                                                        null                             _CREATED,
                                                        null                             BD_READ_FLAG
                                         from BMK.WA.FOLDER
                                        where F_DOMAIN_ID = <DOMAIN_ID>
                                                  and coalesce(F_PARENT_ID, -1) = <ID>

                                        union

                                               select 1                        _TYPE,
                                                        a.BD_ID                          _ID,
                                                        BMK.WA.make_node(\'b\', a.BD_ID) _NODE,
                                                        a.BD_NAME                        _NAME,
                                                        b.B_URI                          _URI,
                                                        a.BD_LAST_UPDATE                 _LAST_UPDATE,
                                                        a.BD_CREATED                     _CREATED,
                                                        coalesce(c.BD_READ_FLAG, 0)      BD_READ_FLAG
                                                   from BMK.WA.BOOKMARK_DOMAIN a
                                                          join BMK.WA.BOOKMARK b on b.B_ID = a.BD_BOOKMARK_ID
                                                            left join BMK.WA.BOOKMARK_DATA c on c.BD_MODE = 1 and c.BD_OBJECT_ID = <USER_ID> and c.BD_BOOKMARK_ID = a.BD_BOOKMARK_ID
                                                  where a.BD_DOMAIN_ID = <DOMAIN_ID>
                                                    and coalesce(a.BD_FOLDER_ID, -1) = <ID>) x
                                          where 1 = 1';
                      control.ds_sql := replace(control.ds_sql, '<USER_ID>', cast (self.account_id as varchar));
                    control.ds_sql := replace(control.ds_sql, '<DOMAIN_ID>', cast(self.domain_id as varchar));
                    control.ds_sql := replace(control.ds_sql, '<ID>', BMK.WA.node_suffix(self.bNode));

                    } else {
                      control.ds_sql := 'select *
                                           from (select TOP 100
                                                        1                              _TYPE,
                                                        BD_ID                           _ID,
                                                        BMK.WA.make_node(\'b\', BD_ID) _NODE,
                                                        BD_NAME                         _NAME,
                                                        B_URI                          _URI,
                                                        BD_LAST_UPDATE                 _LAST_UPDATE,
                                                        BD_CREATED                     _CREATED,
                                                        0                              BD_READ_FLAG
                                                   from BMK.WA.BOOKMARK_DOMAIN,
                                                        BMK.WA.BOOKMARK,
                                                        DB.DBA.WA_INSTANCE
                                                  where BD_BOOKMARK_ID = B_ID
                                                    and WAI_ID = BD_DOMAIN_ID
                                                    and WAI_IS_PUBLIC = 1
                                                  order by BD_LAST_UPDATE desc) x
                                          where 1 = 1';
                    }

                  } else if ((BMK.WA.node_type(self.bNode) = 's') and (BMK.WA.node_id(self.bNode) = -1)) {
                    control.ds_sql := 'select *
                                         from (select 1                              _TYPE,
                                              SF_ID                    _ID,
                                              BMK.WA.make_node(\'s\', SF_ID) _NODE,
                                              SF_NAME                  _NAME,
                                              \'\'                     _URI,
                                              null                           _LAST_UPDATE,
                                                      null                           _CREATED,
                                                      null                           BD_READ_FLAG
                                         from BMK.WA.SFOLDER
                                                where SF_DOMAIN_ID = <DOMAIN_ID>) x
                                          where 1 = 1';
                    control.ds_sql := replace(control.ds_sql, '<DOMAIN_ID>', cast(self.domain_id as varchar));

                  } else if ((BMK.WA.node_type(self.bNode) = 's') and (BMK.WA.node_id(self.bNode) >= 0)) {
                    declare data any;

                    data := (select SF_DATA from BMK.WA.SFOLDER where SF_DOMAIN_ID = self.domain_id and SF_ID = BMK.WA.node_id(self.bNode));
                    control.ds_sql := BMK.WA.sfolder_sql (self.domain_id, self.account_id, data);

                  } else if ((BMK.WA.node_type (self.bNode) = 't') and not is_empty_or_null (BMK.WA.node_suffix (self.bNode))) {
                    declare data any;

                    BMK.WA.xml_set('tags', data, BMK.WA.node_suffix(self.bNode));
                    control.ds_sql := BMK.WA.sfolder_sql (self.domain_id, self.account_id, data);

                  } else if ((BMK.WA.node_type(self.bNode) = 'u') and (BMK.WA.node_id(self.bNode) = -1)) {
                    control.ds_sql := 'select *
                                         from (select distinct
                                                      1                              _TYPE,
                                              U_ID                     _ID,
                                              BMK.WA.make_node(\'u\', U_ID)  _NODE,
                                              U_NAME                   _NAME,
                                              \'\'                     _URI,
                                              null                           _LAST_UPDATE,
                                                      null                           _CREATED,
                                                      null                           BD_READ_FLAG
                                         from BMK.WA.GRANTS,
                                              DB.DBA.SYS_USERS
                                        where G_GRANTEE_ID = <USER_ID>
                                                  and G_GRANTER_ID = U_ID) x
                                          where 1 = 1';
                    control.ds_sql := replace(control.ds_sql, '<USER_ID>', cast(self.account_id as varchar));

                  } else if ((BMK.WA.node_type(self.bNode) = 'u') and (BMK.WA.node_id(self.bNode) >= 0)) {
                    control.ds_sql := 'select *
                                         from (select 0                        _TYPE,
                                                      F_ID                     _ID,
                                                      BMK.WA.make_node(\'F\', F_ID)  _NODE,
                                                      F_NAME                   _NAME,
                                                      \'\'                     _URI,
                                                      null                           _LAST_UPDATE,
                                                      null                           _CREATED,
                                                      null                           BD_READ_FLAG
                                                 from BMK.WA.FOLDER,
                                                      BMK.WA.GRANTS
                                                where G_OBJECT_TYPE = \'F\'
                                                  and G_OBJECT_ID = F_ID
                                                  and G_GRANTER_ID = <ID>
                                                  and G_GRANTEE_ID = <USER_ID>

                                                union

                                               select 1                        _TYPE,
                                                      a.BD_ID                          _ID,
                                                      BMK.WA.make_node(\'B\', a.BD_ID) _NODE,
                                                      a.BD_NAME                        _NAME,
                                                      b.B_URI                          _URI,
                                                      a.BD_LAST_UPDATE                 _LAST_UPDATE,
                                                      a.BD_CREATED                     _CREATED,
                                                      coalesce(c.BD_READ_FLAG, 0)      BD_READ_FLAG
                                                 from BMK.WA.GRANTS d,
                                                      BMK.WA.BOOKMARK_DOMAIN a
                                                        join BMK.WA.BOOKMARK b on b.B_ID = a.BD_BOOKMARK_ID
                                                          left join BMK.WA.BOOKMARK_DATA c on c.BD_MODE = 1 and c.BD_OBJECT_ID = <USER_ID> and c.BD_BOOKMARK_ID = a.BD_BOOKMARK_ID
                                                where d.G_OBJECT_TYPE = \'B\'
                                                  and d.G_OBJECT_ID = a.BD_ID
                                                  and d.G_GRANTER_ID = <ID>
                                                  and d.G_GRANTEE_ID = <USER_ID>) x
                                          where 1 = 1';
                    control.ds_sql := replace(control.ds_sql, '<ID>', BMK.WA.node_suffix(self.bNode));
                    control.ds_sql := replace(control.ds_sql, '<USER_ID>', cast(self.account_id as varchar));

                  } else if (BMK.WA.node_type(self.bNode) = 'F') {
                    control.ds_sql := 'select *
                                         from (select 0                        _TYPE,
                                                      F_ID                     _ID,
                                                      BMK.WA.make_node(\'F\', F_ID)  _NODE,
                                                      F_NAME                   _NAME,
                                                      \'\'                     _URI,
                                                      null                           _LAST_UPDATE,
                                                      null                           _CREATED,
                                                      null                           BD_READ_FLAG
                                                 from BMK.WA.FOLDER
                                                where coalesce(F_PARENT_ID, -1) = <ID>

                                                union

                                               select 1                        _TYPE,
                                                      a.BD_ID                          _ID,
                                                      BMK.WA.make_node(\'B\', a.BD_ID) _NODE,
                                                      a.BD_NAME                        _NAME,
                                                      b.B_URI                          _URI,
                                                      a.BD_LAST_UPDATE                 _LAST_UPDATE,
                                                      a.BD_CREATED                     _CREATED,
                                                      coalesce(c.BD_READ_FLAG, 0)      BD_READ_FLAG
                                                 from BMK.WA.BOOKMARK_DOMAIN a
                                                        join BMK.WA.BOOKMARK b on b.B_ID = a.BD_BOOKMARK_ID
                                                          left join BMK.WA.BOOKMARK_DATA c on c.BD_MODE = 1 and c.BD_OBJECT_ID = <USER_ID> and c.BD_BOOKMARK_ID = a.BD_BOOKMARK_ID
                                                where coalesce(a.BD_FOLDER_ID, -1) = <ID>) x
                                          where 1 = 1';
                    control.ds_sql := replace(control.ds_sql, '<USER_ID>', cast (self.account_id as varchar));
                    control.ds_sql := replace(control.ds_sql, '<ID>', BMK.WA.node_suffix(self.bNode));

                  }

                  if (tmp = control.ds_sql)
                    goto _end;

                  flag := get_keyword('show', params, '');
                  if (flag <> '')
                    control.ds_sql := concat(control.ds_sql, sprintf(' and ((BD_READ_FLAG is null) or (BD_READ_FLAG = %s))', flag));

                  self.sortChange(get_keyword('sortColumn', e.ve_params, ''));
                  control.ds_sql := concat (control.ds_sql, ' order by _TYPE, ', self.n_order, ' ', self.n_direction, ', _ID');

                _end:;
                ]]>
              </v:before-data-bind>
            </v:data-source>

            <v:data-set name="ds" data-source="self.dsrc" scrollable="1">

              <v:template name="ds_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                  <table id="bookmarks" style="clear: left; width: 100%;" cellspacing="0">
                  <thead class="sortHeader">
                    <tr>
                      <v:template type="simple" enabled="--case when ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')) then 0 else 1 end">
                        <th class="checkbox" width="1%">
                          <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                        </th>
                       </v:template>
                      <th width="1%" class="last">
                        <img src="image/c.gif" border="0"/>
                      </th>
                      <th width="80%">
                        <?vsp self.sortColumn('Name', '_NAME'); ?>
                      </th>
                      <v:template type="simple" enabled="-- equ(cast(get_keyword('column_#2', self.settings, '0') as integer), 1)">
                        <th nowrap="nowrap">
                          <?vsp self.sortColumn('Date Created', '_CREATED'); ?>
                        </th>
                      </v:template>
                      <v:template type="simple" enabled="-- equ(cast(get_keyword('column_#3', self.settings, '1') as integer), 1)">
                        <th nowrap="nowrap">
                          <?vsp self.sortColumn('Last Update', '_LAST_UPDATE'); ?>
                        </th>
                      </v:template>
                    </tr>
                  </thead>
                </table>
              </v:template>

              <v:template name="ds_repeat" type="repeat" name-to-remove="" set-to-remove="">

                <v:template name="ds_browse" type="browse" name-to-remove="table" set-to-remove="both">
                  <table>
                    <?vsp
                      declare S varchar;

                      S := '';
                      if (self.bLocation = ((control as vspx_row_template).te_column_value('_NODE')))
                        S := 'class="td_sel"';
                      http(sprintf('<tr %s>', S));
                    ?>
                      <v:template type="simple" enabled="--case when ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')) then 0 else 1 end">
                        <td align="center" valign="top">
                          <?vsp
                            declare S varchar;

                            S := '';
                            if (self.bLocation = ((control.vc_parent) as vspx_row_template).te_column_value('_NODE'))
                              S := 'checked="checked"';

                            http (sprintf ('<input type="checkbox" name="cb_item" value="%s" %s onclick="selectCheck(this, \'cb_item\')"/>', ((control.vc_parent) as vspx_row_template).te_column_value('_NODE'), S));
                          ?>
                        </td>
                       </v:template>
                      <td valign="top">
                        <?vsp
                          declare node, image, alt any;

                          node := (control as vspx_row_template).te_column_value('_NODE');
                          if (lcase(BMK.WA.node_type(node)) = 'f') {
                            image := 'image/folder_16.png';
                            alt := 'Folder';
                          } else if (lcase(BMK.WA.node_type(node)) = 'b') {
                            image := 'image/web_16.png';
                            alt := 'Bookmark';
                          } else if (BMK.WA.node_type(node) = 's') {
                            image := 'image/sfolder_16.jpg';
                            alt := 'Smart Folder';
                          } else if (BMK.WA.node_type(node) = 'u') {
                            image := 'image/user_16.png';
                            alt := 'User';
                          }
                          http(sprintf('<img style="padding: 0 2px 0 0;" src="%s" border="0" alt="%s"/>', image, alt));
                        ?>
                      </td>
                      <td valign="top">
                          <?vsp
                            if (lcase(BMK.WA.node_type((control as vspx_row_template).te_column_value('_NODE'))) = 'b') {
                              declare id, target, uri, title varchar;

                              id := BMK.WA.node_id ((control as vspx_row_template).te_column_value('_NODE'));
                              uri := (control as vspx_row_template).te_column_value('_URI');
                              title := (control as vspx_row_template).te_column_value('_NAME');
                              if (cast(get_keyword ('panes', self.settings, '0') as integer) = 0) {
                                target := case when (cast(get_keyword ('bookmarkOpen', self.settings, '0') as integer) = 0) then '_blank' else '_self' end;
                                http (sprintf('<a id="%d" href="%s" target="%s" onclick="javascript: openBookmark (\'%d\', \'%d\');" class="%s" title="Full window view of \'%s\'">%s</a>', id, uri, target, id, self.account_id, self.linkClass(node), title, title));
                              } else {
                                http (sprintf('<a id="%d" href="javascript: openIFrame (\'%d\', \'%d\', \'%U\');" class="%s" title="3-Pane view of \'%s\'">%s</a>', id, id, self.account_id, uri, self.linkClass(node), title, title));
                              }
                            }
                          ?>
                          <vm:if test="lcase(BMK.WA.node_type((control as vspx_row_template).te_column_value('_NODE'))) <> 'b'">
                        <v:button action="simple"
                                  style="url"
                                  value="--BMK.WA.stringCut((control.vc_parent as vspx_row_template).te_column_value('_NAME'), self.chars)"
                                  xhtml_title="--BMK.WA.utf2wide((control.vc_parent as vspx_row_template).te_column_value('_NAME'))"
                                      xhtml_class="unread">
                          <v:on-post>
                            <![CDATA[
                              if (not BMK.WA.vector_contains(self.bState, self.bPath))
                                self.bState := vector_concat(self.bState, vector(self.bPath));
                              self.bPath := concat(self.bPath, '/', (control.vc_parent as vspx_row_template).te_column_value('_NODE'));
                              self.bNode := (control.vc_parent as vspx_row_template).te_column_value('_NODE');
                              self.vc_data_bind (e);
                           ]]>
                          </v:on-post>
                        </v:button>
                          </vm:if>
                        <v:url value="--BMK.WA.stringCut((control.vc_parent as vspx_row_template).te_column_value('_NAME'), self.chars)"
                               url="--(control.vc_parent as vspx_row_template).te_column_value('_URI')"
                               format="%s"
                               enabled="--case when (lcase(BMK.WA.node_type((control.vc_parent as vspx_row_template).te_column_value('_NODE'))) = 'b') then 0 else 0 end"
                               xhtml_title="--BMK.WA.utf2wide((control.vc_parent as vspx_row_template).te_column_value('_NAME'))"/>
                        <?vsp
                          declare N integer;
                            declare actions, node, id, uri, title, target, tags any;

                          node := (control as vspx_row_template).te_column_value('_NODE');
                            id := BMK.WA.node_id (node);
                            uri := (control as vspx_row_template).te_column_value('_URI');
                          title := '\'' || (control as vspx_row_template).te_column_value('_NAME') || '\'';

                            actions := '';
                            if (BMK.WA.node_type(node) = 'b') {
                              if (cast(get_keyword ('panes', self.settings, '0') as integer) = 1) {
                                target := case when (cast(get_keyword ('bookmarkOpen', self.settings, '0') as integer) = 0) then '_blank' else '_self' end;
                                actions := sprintf('<a href="%s" target="%s" onclick="javascript: openBookmark (\'%d\', \'%d\');" title="Full window view of %s" class="link_ed">view</a>', uri, target, id, self.account_id, title);
                              }
                            }

                          if (not ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')))
                              actions := actions || either (equ (actions, ''), '', '&nbsp|&nbsp') || sprintf('<a href="javascript: vspxPost (\'pt_browse\', \'pt_action\', \'edit\', \'pt_value\', \'%s\');" title="Edit %s" class="link_ed">edit</a>', node, title);

                            if (not ((self.account_role in ('public', 'guest')) or (self.bTab = 'shared')))
                              actions := actions || either (equ (actions, ''), '', '&nbsp|&nbsp') || sprintf('<a href="javascript: if (confirm (\'Are you sure that you want to delete this item?\')) vspxPost (\'pt_browse\', \'pt_action\', \'delete\', \'pt_value\', \'%s\'); " title="Delete %s" class="link_ed">delete</a>', node, title);

                            http (actions);

                          if (BMK.WA.node_type(node) = 'b') {
                            tags := BMK.WA.tags_select2(self.domain_id, self.account_id, BMK.WA.node_id(node));
                            if (not is_empty_or_null(tags)) {
                              http('<br /><i>Tags: ');
                              tags := split_and_decode (tags, 0, '\0\0,');
                              for (N := 0; N < length(tags); N := N + 1) {
                                http(sprintf('<a href="%s/bookmarks.vspx?sid=%s&realm=%s&tag=%s">%s</a>', BMK.WA.bookmark_url(self.domain_id), self.sid, self.realm, tags[N], tags[N]));
                                if (N <> length(tags)-1)
                                  http(' | ');
                              }
                              http('</i>');
                            }
                          }
                        ?>
                      </td>
                      <v:template type="simple" enabled="-- equ(cast(get_keyword('column_#2', self.settings, '0') as integer), 1)">
                        <td align="right" nowrap="nowrap" valign="top">
                          <v:label value="--BMK.WA.dt_value(((control.vc_parent).vc_parent as vspx_row_template).te_column_value('_CREATED'))" />
                        </td>
                      </v:template>
                      <v:template type="simple" enabled="-- equ(cast(get_keyword('column_#3', self.settings, '1') as integer), 1)">
                        <td align="right" nowrap="nowrap" valign="top">
                          <v:label value="--BMK.WA.dt_value(((control.vc_parent).vc_parent as vspx_row_template).te_column_value('_LAST_UPDATE'))" />
                        </td>
                      </v:template>
                    <?vsp
                      http('</tr>');
                    ?>
                  </table>
                </v:template>

              </v:template>

              <v:template name="ds_footer" type="simple" name-to-remove="table" set-to-remove="top">
                <table>
                </table>
              </v:template>

            </v:data-set>
            <script type="text/javascript">
              <![CDATA[
                coloriseTable('bookmarks');

                var objForm = document.forms['F1'];
                for (var i = 0; i < objForm.elements.length; i++) {
                  var o = objForm.elements[i];
                  if (o != null && o.type == 'checkbox' && !o.disabled && o.name.indexOf ('cb_item') != -1)
                    coloriseRow(getParent(o, 'tr'), o.checked);
                }
                enableToolbars (objForm, 'cb_item');
              ]]>
            </script>
            </div>
            <vm:if test="cast(get_keyword('panes', self.settings, '0') as integer) <> 0">
              <div class="pane_right_sub2" id="bookmark_content">
              </div>
            </vm:if>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'import') then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
               if (self.bStep = '') {
	                self.v_sourceParam_2 := get_keyword ('deliciousUser', self.settings, '');
	                self.v_sourceParam_3 := get_keyword('deliciousPwd', self.settings, '');
                self.v_folder_id := 0;
                if (BMK.WA.node_type(self.bNode) = 'f')
                  self.v_folder_id :=BMK.WA.node_id(self.bNode);
	             }
              ]]>
            </v:before-data-bind>

            <v:template type="simple" enabled="-- case when (self.bStep = '1') then 1 else 0 end">
            <div class="new-form-header">
	              <v:label format="%s" value="Import: Step 1 - Select source type"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th rowspan="3" valign="middle">
	                    <v:label for="i_file" value="Source type"/>
                  </th>
	                  <td nowrap="nowarap">
	                    <v:radio-button name="i_source_0" xhtml_id="i_source_0" group-name="i_source" value="0">
                      <v:before-render>
                        <![CDATA[
	                          control.ufl_selected := either(lte(self.v_source, 0), 1, 0);
                        ]]>
                      </v:before-render>
                    </v:radio-button>
                    <xsl:call-template name="nbsp"/>
                    <b><vm:label for="i_source_0" value="--'File'" /></b>
                  </td>
                </tr>
                <tr>
                  <td nowrap="nowarap">
	                    <v:radio-button name="i_source_1" xhtml_id="i_source_1" group-name="i_source" value="1">
                      <v:before-render>
                        <![CDATA[
                          control.ufl_selected := either(equ(self.v_source, 1), 1, 0);
                        ]]>
                      </v:before-render>
                    </v:radio-button>
                    <xsl:call-template name="nbsp"/>
                    <b><vm:label for="i_source_1" value="--'WebDAV'" /></b>
                  </td>
                </tr>
                <tr>
                  <td nowrap="nowarap">
	                    <v:radio-button name="i_source_2" xhtml_id="i_source_2" group-name="i_source" value="2">
                      <v:before-render>
                        <![CDATA[
                          control.ufl_selected := either(equ(self.v_source, 2), 1, 0);
                        ]]>
                      </v:before-render>
                    </v:radio-button>
                    <xsl:call-template name="nbsp"/>
                    <b><vm:label for="i_source_2" value="--'del.icio.us'" /></b>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
	              <v:button action="simple" value="Next" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
	                    declare tmp any;

	                    tmp := self.v_source;
                    if (self.i_source_0.ufl_selected) {
                      self.v_source := 0;
	                    } else if (self.i_source_1.ufl_selected) {
	                      self.v_source := 1;
	                    } else if (self.i_source_2.ufl_selected) {
	                      self.v_source := 2;
	                    }
	                    if (tmp <> self.v_source)
	                      self.v_sourceParam_1 := '';

                      self.bStep := '2';
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
	              <v:button action="simple" value="Cancel" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
	                    self.bMode := 'browse';
	                    self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
	            </div>
	          </v:template>

            <v:template type="simple" enabled="-- case when (self.bStep = '2') then 1 else 0 end">
	            <div class="new-form-header">
	              <v:label format="%s" value="Import: Step 2 - Source parameters"/>
	            </div>
	            <div class="new-form-body">
	              <table cellspacing="0">
                  <vm:if test="self.v_source = 0">
		                <tr>
		                  <th width="30%">
                        Select file
		                  </th>
		                  <td>
                        <input type="file" name="i_file" size="40"/>
		                  </td>
		                </tr>
                  </vm:if>
                  <vm:if test="self.v_source = 1">
		                <tr>
		                  <th width="30%">
	                      Select WebDAV file
		                  </th>
		                  <td>
	                      <v:text name="i_dav" value="--self.v_sourceParam_1" xhtml_size="40"/>
	                      <v:browse-button value="Browse..." selector="popup_browser.vspx" child-window-options="scrollbars=auto, resizable=yes, menubar=no, height=600, width=800"  browser-options="--sprintf('list_type=details&amp;path=%s&amp;browse_type=res&amp;style_css=css/dav.css&amp;w_title=DAV Browser&amp;title=DAV Browser&amp;lang=en&amp;retname=i_dav', BMK.WA.dav_home(self.account_id))">
	                        <v:field name="i_dav"/>
	                      </v:browse-button>
		                  </td>
		                </tr>
                  </vm:if>
                  <vm:if test="self.v_source = 2">
	                  <tr>
		                  <th width="30%">
	                      <v:label for="i_deliciousUser" value="Delicious: User"/>
	                    </th>
	                    <td>
	                      <v:text name="i_deliciousUser" null-value="--''" value="--self.v_sourceParam_2" />
	                    </td>
	                  </tr>
	                  <tr>
	                    <th>
	                      <v:label for="i_deliciousPwd" value="Password"/>
	                    </th>
	                    <td>
	                      <v:text name="i_deliciousPwd" type="password" null-value="--''" value="--self.v_sourceParam_3" />
	                    </td>
	                  </tr>
	                  <tr>
	                    <th />
	                    <td>
	                      <v:check-box name="i_deliciousReminder" xhtml_id="i_deliciousReminder" is-boolean="1" true-value="1" false-value="0" value="1" />
	                      <vm:label for="i_deliciousReminder" value="Remember this login for future imports"/>
	                    </td>
	                  </tr>
                    <tr>
	                    <th>
                        <v:label for="i_deliciousTag" value="Tag"/>
                      </th>
                      <td>
                        <v:text name="i_deliciousTag" null-value="--''" value="--self.v_sourceParam_4" />
                      </td>
                    </tr>
                  </vm:if>
	              </table>
	            </div>
	            <div class="new-form-footer">
	              <v:button action="simple" value="Back" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                      self.bStep := '1';
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
	              <v:button action="simple" value="Next" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
	                    declare S any;

	                    if (self.v_source = 0) {
                    S := trim(get_keyword('i_file', self.vc_page.vc_event.ve_params, ''));
	                      if (is_empty_or_null (S)) {
	                        self.vc_error_message := 'Please select file from your local file system!';
                        self.vc_is_valid := 0;
                        return;
                      }

	                    } else if (self.v_source = 1) {
	                      self.v_sourceParam_1 := trim(get_keyword ('i_dav', self.vc_page.vc_event.ve_params, ''));
	                      if (self.v_sourceParam_1 not like (BMK.WA.dav_home(self.account_id) || '%')) {
	                        self.vc_error_message := sprintf('Please select file from your WebDAV home directory ''%s''!', BMK.WA.dav_home (self.account_id));
                        self.vc_is_valid := 0;
                        return;
                      }
	                      S := BMK.WA.dav_content (self.v_sourceParam_1);
                      if (isnull(S)) {
                        self.vc_error_message := 'Bad import source!';
                        self.vc_is_valid := 0;
                        return;
                      }

	                    } else if (self.v_source = 2) {
	                      declare url, V any;

	                      self.v_sourceParam_2 := trim (self.i_deliciousUser.ufl_value);
	                      self.v_sourceParam_3 := trim (self.i_deliciousPwd.ufl_value);
	                      self.v_sourceParam_4 := trim (self.i_deliciousTag.ufl_value);
                      if (self.i_deliciousReminder.ufl_selected) {
	                        self.settings := BMK.WA.set_keyword ('deliciousUser', self.settings, self.v_sourceParam_2);
	                        self.settings := BMK.WA.set_keyword ('deliciousPwd', self.settings, self.v_sourceParam_3);
                        insert replacing BMK.WA.SETTINGS(S_ACCOUNT_ID, S_DATA) values(self.account_id, serialize (self.settings));
                      }

                      declare exit handler for sqlstate '*'
                      {
                        self.vc_error_message := 'Cannot connect to del.icio.us server!';
                        self.vc_is_valid := 0;
                        return;
                      };
  		                commit work;

	                      url := 'https://api.del.icio.us/v1/posts/all';
	                      if (self.v_sourceParam_3 <> '')
	                        url := url || '?tag=' || self.v_sourceParam_4;
	                      S := http_client(url, self.v_sourceParam_2, self.v_sourceParam_3, 'GET', null, null, null, null);
                      V := xml_tree_doc (xml_tree (S, 2));
	                      self.vc_error_message := xpath_eval('string(//title)', V);
	                      if (not is_empty_or_null (self.vc_error_message)) {
                        self.vc_is_valid := 0;
                        return;
                    }
                    }

                      -- save content into DAV
                      --
								      DB.DBA.DAV_MAKE_DIR ('/DAV/VAD/Bookmarks/', http_dav_uid (), http_dav_uid () + 1, '110100100R');
								      DB.DBA.DAV_MAKE_DIR ('/DAV/VAD/Bookmarks/Import/', http_dav_uid (), http_dav_uid () + 1, '110100100R');
                      DB.DBA.DAV_RES_UPLOAD_STRSES_INT ('/DAV/VAD/Bookmarks/Import/' || self.sid, S, 'application/jpeg', '110100100R', http_dav_uid (), http_dav_uid () + 1, null, null, 0);

                      self.bStep := '3';
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
	              <v:button action="simple" value="Cancel" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
	                    self.bMode := 'browse';
	                    self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
	            </div>
	          </v:template>

            <v:template type="simple" enabled="-- case when (self.bStep = '3') then 1 else 0 end">
	            <div class="new-form-header">
	              <v:label format="%s" value="Import: Step 3 - Options"/>
	            </div>
	            <div class="new-form-body">
	              <table id="progressHide" cellspacing="0">
	                <tr>
                    <th width="30%">
	                    <v:label for="i_folder_name" value="Folder"/>
	                  </th>
	                  <td colspan="2">
	                    <v:text name="i_folder_name" null-value="''" value="--self.v_folder_name" fmt-function="BMK.WA.utf2wide" xhtml_class="textbox" xhtml_size="40%"/>
	                    <v:data-list name="i_folder_id" value="--self.v_folder_id" sql="select 0 as F_ID, 'Select folder ...' as F_PATH2, '' as F_PATH from WS.WS.SYS_DAV_USER where U_NAME = 'dav' union all select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH" key-column="F_ID" value-column="F_PATH2" xhtml_class="select"/>
	                  </td>
	                </tr>
	                <tr>
	                  <th>
	                    <v:label for="i_tag" value="Comma Delimited Tags"/>
	                  </th>
	                  <td>
	                    <v:text name="i_tag" value="--self.v_tag" xhtml_class="textbox" xhtml_size="60"/>
	                  </td>
	                </tr>
	                <tr>
	                  <th>
	                    My Tags
	                  </th>
	                  <td>
	                    <?vsp
	                      declare _done integer;

	                      _done := 0;
	                      for (select TS_TAG from BMK..TAGS_STATISTICS where domain_id = self.domain_id and account_id = self.account_id and TS_TAG <> '' order by TS_TAG) do {
	                        http (sprintf ('<a href="#" onclick="javascript: addTag(\'%s\', \'i_tag\');">%s</a> ', TS_TAG, TS_TAG));
	                        _done := 1;
	                      }
	                      if (not _done)
	                        http ('no tags');
	                    ?>
	                  </td>
	                </tr>
	              </table>
		            <span id="progressMax" style="display: none;">100</span>
		            <table id="progressTable" cellspacing="0">
		              <tr>
		                <td>
		                  <div id="progressText"></div>
		                </td>
		              </tr>
		              <tr>
		                <td>
		                  <div id="progress"></div>
		                </td>
		              </tr>
		            </table>
	            </div>
	            <div class="new-form-footer">
	              <v:button action="simple" value="Back" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                      self.bStep := '2';
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
	              <v:button action="simple" value="Import" xhtml_class="form-button">
			            <v:on-post>
			              <![CDATA[
                    -- check / create folder
                    self.v_folder_id := self.i_folder_id.ufl_value;
                    self.v_folder_name := trim(self.i_folder_name.ufl_value);
                    if ((self.v_folder_name <> '') and (not BMK.WA.folder_check_name(self.v_folder_name, 1))) {
                      self.vc_error_message := 'Please, enter other folder name. This name conatins bad characters.';
                      self.vc_is_valid := 0;
                      return;
                    }
                    self.v_folder_id := BMK.WA.folder_create(self.domain_id, self.v_folder_name, self.v_folder_id);

                      self.v_tag := BMK.WA.tag_prepare (self.i_tag.ufl_value);
                      if (not BMK.WA.validate_tags(self.v_tag)) {
                        self.vc_error_message := 'The expression is not valid tag(s).';
                        self.vc_is_valid := 0;
                        return;
                    }

                      self.bStep := '4';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
                <input type="button" id="btn_Stop" value="Stop" onclick="javascript: stopState(); return true;" class="form-button" style="display: none;" />
            </div>
	          </v:template>

            <v:template type="simple" enabled="-- case when (self.bStep = '4') then 1 else 0 end">
	            <div class="new-form-header">
	              <v:label format="%s" value="Import: Step 4 - Progress bar"/>
	            </div>
	            <div class="new-form-body">
                <input type="hidden" name="folder_id" value="<?V self.v_folder_id ?>"/>
                <input type="hidden" name="folder_name" value="<?V self.v_folder_name ?>"/>
                <input type="hidden" name="tags" value="<?V self.v_tag ?>"/>
		            <span id="progressMax" style="display: none;">
            <?vsp
										 declare progressMax, S, T, R, V any;

										 progressMax := 0;

								     R := DAV_RES_CONTENT_INT (DAV_SEARCH_ID ('/DAV/VAD/Bookmarks/Import/' || self.sid, 'R'), S, T, 0, 0);
								     S := blob_to_string (S);

										 -- check netscape format
										 --
										 if (isnull(strcasestr(S, '<!doctype netscape-bookmark-file-1>')))
										   goto _xbel;
										 S := replace(S, '<p>', '');
										 S := replace(S, '<HR>', '');
										 S := replace(S, '<DD>', '');
										 S := replace(S, 'FOLDED', '');
										 S := replace(S, '  ', ' ');
										 S := replace(S, '&', '&amp;');
										 V := xtree_doc (S, 2);
										 V := xpath_eval ('//dl', V);
										 if (isnull (V))
										   goto _xbel;
                     progressMax := xpath_eval('count (//a)', V);
										 goto _end;

									 _xbel:;
										 -- check XBEL format
										 --
										 V := xtree_doc (S);
										 V := xpath_eval('/xbel', BMK.WA.string2xml(S));
										 if (isnull (V))
										   goto _delicious;
                     progressMax := xpath_eval('count (//bookmark)', V);
										 goto _end;

									_delicious:;
										 -- check delicious format
										 --
										 V := xtree_doc (S);
										 V := xpath_eval('/posts', V);
										 if (isnull (V))
										   goto _end;
                     progressMax := xpath_eval('count (//post)', V);

									_end:;
										 http (cast (progressMax as varchar));
            ?>
		            </span>
		            <table id="progressTable" cellspacing="0">
		              <tr>
		                <td>
		                  <div id="progressText"></div>
		                </td>
		              </tr>
		              <tr>
		                <td>
		                  <div id="progressBar"></div>
		                </td>
		              </tr>
		            </table>
	            </div>
	            <div class="new-form-footer">
			          <v:button action="simple" name="btn_Background" xhtml_id="btn_Background" value="Background" xhtml_class="form-button">
			            <v:on-post>
			              <![CDATA[
	                    self.bMode := 'browse';
	                    self.vc_data_bind(e);
			               ]]>
			             </v:on-post>
			          </v:button>
                <input type="button" id="btn_Stop" value="Stop" onclick="javascript: stopState(); return true;" class="form-button" />
	            </div>
			        <script type="text/javascript">
			          <![CDATA[
			            initState();
			          ]]>
			        </script>
	          </v:template>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'export') then 1 else 0 end">
            <div class="new-form-header">
              <v:label format="%s" value="Export bookmark(s)"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th rowspan="2" valign="top">
                    <v:label for="e_format" value="Format"/>
                  </th>
                  <td>
                    <input type="radio" name="e_format" id="e_format_0" value="Netscape" checked="checked" onclick="changeExportName('e_file', '.xbel', '.html');"/><xsl:call-template name="nbsp"/><label for="e_format_0">Netscape</label>
                  </td>
                </tr>
                <tr>
                  <td>
                    <input type="radio" name="e_format" id="e_format_1" value="XBEL" onclick="changeExportName('e_file', '.html', '.xbel');"/><xsl:call-template name="nbsp"/><label for="e_format_1">XBEL</label>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="e_file" value="File name"/>
                  </th>
                  <td>
                    <input type="text" name="e_file" value="Bookmarks.html" size="40"/>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Export" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_redirect(sprintf('export.vspx?did=%d&output=BMK&file=%V&format=%s', self.domain_id, get_keyword('e_file', e.ve_params), get_keyword('e_format', e.ve_params)));
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'tag') then 1 else 0 end">
            <div class="new-form-header">
              <v:label format="%s" value="Tag bookmark(s)"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="t_tag" value="Comma Delimited Tags"/>
                  </th>
                  <td>
                    <v:text name="t_tag" null-value="''" value="--self.v_tag" xhtml_class="textbox" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    My Tags
                  </th>
                  <td>
                    <?vsp
                      declare _done integer;

                      _done := 0;
                      for (select TS_TAG from BMK..TAGS_STATISTICS where domain_id = self.domain_id and account_id = self.account_id and TS_TAG <> '' order by TS_TAG) do {
                        http (sprintf ('<a href="#" onclick="javascript: addTag(\'%s\', \'t_tag\');">%s</a> ', TS_TAG, TS_TAG));
                        _done := 1;
                      }
                      if (not _done)
                        http ('no tags');
                    ?>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Tag" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.v_tag := BMK.WA.tag_prepare(self.t_tag.ufl_value);
            			  if (not BMK.WA.validate_tags(self.v_tag)) {
            			    self.vc_is_valid := 0;
                      self.vc_error_message := 'The expression is not valid tag(s).';
            			    return;
            			  }
                    declare N integer;
                    declare tmp any;

                    for (N := 0; N < length(self.bNodes); N := N + 1) {
                      tmp := (select BD_BOOKMARK_ID from BMK.WA.BOOKMARK_DOMAIN where BD_ID = BMK.WA.node_id(self.bNodes[N]));
                      self.v_tags := BMK.WA.tags_select(self.domain_id, self.account_id, tmp);
                      self.v_tags := BMK.WA.tags_join(self.v_tags, self.v_tag);
                      BMK.WA.bookmark_tags(self.domain_id, self.account_id, tmp, self.v_tags);
                    }

                    self.v_tag := '';
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.v_tag := '';
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'move') then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                self.v_folder_id := get_keyword('m_folder_id', self.vc_page.vc_event.ve_params, '');
                self.v_folder_name := get_keyword('m_folder_name', self.vc_page.vc_event.ve_params, '');
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label format="%s" value="Move"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="m_folder_name" value="Move to folder"/>
                  </th>
                  <td>
                    <v:text name="m_folder_name" null-value="''" value="--self.v_folder_name" fmt-function="BMK.WA.utf2wide" xhtml_class="textbox" xhtml_size="40"/>
                    <v:select-list name="m_folder_id">
                      <v:before-data-bind>
                        <![CDATA[
                          declare N integer;

                          (control as vspx_select_list).vsl_items:= vector ();
                          (control as vspx_select_list).vsl_item_values:= vector ();
                          (control as vspx_select_list).vsl_selected_inx := 0;
                          (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector ('Select folder ...'));
                          (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector ('-1'));
                          for (select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH) do {
                            for (N := 0; N < length(self.bNodes); N := N + 1) {
                              if ((BMK.WA.node_type(self.bNodes[N]) = 'f') and (F_PATH like concat(BMK.WA.folder_path (BMK.WA.node_id(self.bNodes[N])), '%')))
                                goto _skip;
                            }
                            (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector (F_PATH2));
                            (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector (cast(F_ID as varchar)));
                          _skip:;
                          }
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Move" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    declare tmp any;

                    declare exit handler for SQLSTATE '*' {
                      if (__SQL_STATE = 'TEST') {
                        self.vc_error_message := BMK.WA.test_clear(__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };
                    declare N integer;

                    self.v_folder_id := self.m_folder_id.ufl_value;
                    self.v_folder_name := trim(self.m_folder_name.ufl_value);
                    if ((self.v_folder_name <> '') and (not BMK.WA.folder_check_name(self.v_folder_name, 1))) {
                      self.vc_error_message := 'Please, enter other folder name. This name conatins bad characters.';
                     	self.vc_is_valid := 0;
                  		return;
                    }

                    self.v_folder_id := BMK.WA.folder_create(self.domain_id, self.v_folder_name, self.v_folder_id);

                    for (N := 0; N < length(self.bNodes); N := N + 1) {
                      if (BMK.WA.node_type(self.bNodes[N]) = 'f') {
                        BMK.WA.folder_parent (BMK.WA.node_id(self.bNodes[N]), self.v_folder_id);
                      } else if (BMK.WA.node_type(self.bNodes[N]) = 'b') {
                        BMK.WA.bookmark_parent(BMK.WA.node_id(self.bNodes[N]), self.v_folder_id);
                      }
                    }

                    self.v_folder_id := 0;
                    self.v_folder_name := '';
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.v_folder_id := 0;
                    self.v_folder_name := '';
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'grants') then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                self.v_grants := get_keyword ('grants', self.vc_page.vc_event.ve_params, self.v_grants);
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label value="--''">
                <v:after-data-bind>
                  <![CDATA[
                    declare N integer;
                    declare name varchar;

                    control.ufl_value := 'Sharings for ';
                    for (N := 0; N < length(self.bNodes); N := N + 1) {
                      if (length(control.ufl_value) < 60) {
                        if (BMK.WA.node_type(self.bNodes[N]) = 'b') {
                          name := (select BD_NAME from BMK.WA.BOOKMARK_DOMAIN where BD_ID = BMK.WA.node_id(self.bNodes[N]));
                        } else if (BMK.WA.node_type(self.bNodes[N]) = 'f') {
                          name := (select F_NAME from BMK.WA.FOLDER where F_ID = BMK.WA.node_id(self.bNodes[N]));
                        }
                        name := '''' || name || '''';
                        if (N <> 0)
                          name := ', ' || name;
                        control.ufl_value := control.ufl_value || name;
                      }
                    }
                  ]]>
                </v:after-data-bind>
              </v:label>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="s_grants" value="User(s)" />
                  </th>
                  <td>
                    <v:text name="s_grants" null-value="--''" value="--self.v_grants" xhtml_class="textbox" xhtml_size="60" xhtml_title="User names must be comma delimited!" />
                    <input type="button" value="Select" onClick="javascript: windowShow('users.vspx?mode=u&dst=m&amp;params=s_grants:s1;',520)" class="button" />
                    <input type="button" value="Clear" onClick="javascript: document.F1.elements['s_grants'].value = ''" class="button" />
                  </td>
                </tr>
                <tr>
                  <th/>
                  <td>
                    <v:check-box name="s_override" initial-checked="self.v_override" xhtml_id="s_override" value="1" />
                    <b><vm:label for="s_override" value="Override current sharings"/></b>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Save" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    declare N integer;

                    self.v_grants := trim(self.s_grants.ufl_value);
                    self.v_override := self.s_override.ufl_selected;

                    for (N := 0; N < length(self.bNodes); N := N + 1)
                      self.shareNode (self.bNodes[N], self.v_grants, self.v_override);

                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when ((self.bMode = 'Bookmark/Create') or (self.bMode = 'Bookmark/Properties')) then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                declare params any;
                params := self.vc_page.vc_event.ve_params;

                declare exit handler for not found goto _end;

                if (isnull(get_keyword ('b_name', params)) and (self.bMode = 'Bookmark/Properties')) {
                  declare tmp any;

                  select BD_BOOKMARK_ID,
                         B_URI,
                         BD_NAME,
                         BD_DESCRIPTION,
                         BD_FOLDER_ID
                    into tmp,
                         self.v_uri,
                         self.v_name,
                         self.v_description,
                         self.v_folder_id
                    from BMK.WA.BOOKMARK_DOMAIN,
                         BMK.WA.BOOKMARK
                   where BD_DOMAIN_ID = self.domain_id
                     and BD_ID = self.v_id
                     and BD_BOOKMARK_ID = B_ID;

                  self.v_tag := '';
                  self.v_tags := BMK.WA.tags_select(self.domain_id, self.account_id, tmp);
                  self.v_folder_name := '';
                  self.v_grants := self.shareSelect (BMK.WA.make_node('b', self.v_id));

                  self.bMode := 'Bookmark/Properties';
                  return;
                }

                if (get_keyword ('dtag', params, '') <> '')
                  self.v_tags := BMK.WA.tag_delete(self.v_tags, cast (get_keyword ('dtag', params, '0') as integer));

              _end:
                self.v_uri := get_keyword ('b_uri', params, get_keyword ('URI', params, 'http://'));
                self.v_name := get_keyword ('b_name', params, get_keyword ('TITLE', params, ''));
                self.v_description := get_keyword ('b_description', params, '');
                self.v_grants := get_keyword ('b_grants', params, self.v_grants);
                self.v_tag := get_keyword('b_tag', params, '');
                self.v_folder_id := 0;
                if (BMK.WA.node_type(self.bNode) = 'f')
                  self.v_folder_id :=BMK.WA.node_id(self.bNode);
                self.v_folder_id := get_keyword ('b_folder_id', params, self.v_folder_id);
                self.v_folder_name := get_keyword ('b_folder_name', params, '');
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label format="%s" value="--self.bMode"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="b_name" value="Name"/>
                  </th>
                  <td>
                    <v:text name="b_name" value="--BMK.WA.utf2wide (self.v_name)" fmt-function="BMK.WA.utf2wide" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="b_uri" value="Link"/>
                  </th>
                  <td>
                    <v:text name="b_uri" null-value="--''" value="--self.v_uri" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="b_description" value="Description"/>
                  </th>
                  <td>
                    <v:textarea name="b_description" null-value="--''" value="--BMK.WA.utf2wide(self.v_description)" fmt-function="BMK.WA.utf2wide" xhtml_cols="45" xhtml_rows="6"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="b_folder_name" value="Folder"/>
                  </th>
                  <td>
                    <v:text name="b_folder_name" null-value="''" value="--self.v_folder_name" fmt-function="BMK.WA.utf2wide" xhtml_class="textbox" xhtml_size="40%"/>
                    <v:data-list name="b_folder_id" value="--self.v_folder_id" sql="select 0 as F_ID, 'Select folder ...' as F_PATH2, '' as F_PATH from WS.WS.SYS_DAV_USER where U_NAME = 'dav' union all select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH" key-column="F_ID" value-column="F_PATH2" xhtml_class="select"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="b_grants" value="Share to user(s)" />
                  </th>
                  <td>
                    <v:text name="b_grants" null-value="--''" value="--self.v_grants" xhtml_class="textbox" xhtml_size="60" xhtml_title="User names must be comma delimited!" />
                    <input type="button" value="Select" onClick="javascript: windowShow('users.vspx?mode=u&dst=m&amp;params=b_grants:s1;',520)" class="button" />
                    <input type="button" value="Clear" onClick="javascript: document.F1.elements['b_grants'].value = ''" class="button" />
                  </td>
                </tr>
                <tr>
                  <script type="text/javascript">
                    function suggestTags ()
                    {
                      window.open ('tags.vspx?sid=<?V self.sid ?>&amp;realm=<?V self.realm ?>&amp;txt=' + escape (document.F1.elements['b_name'].value) + '&amp;txt2=' + escape (document.F1.elements['b_description'].value) + '&amp;fld=b_tags', 'bookmarks_suggest_window', 'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=420, width=500');
                    }
                  </script>
                  <th>
                    <v:label for="b_tags" value="Comma Delimited Tags"/>
                  </th>
                  <td>
                    <v:text name="b_tags" null-value="''" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60"/>
                    <input type="button" value="Suggest" onClick="javascript: suggestTags();" class="button" />
                    <input type="button" value="Clear" onClick="javascript: document.F1.elements['b_tags'].value = ''" class="button" />
                  </td>
                </tr>
                <tr>
                  <th>
                    My Tags
                  </th>
                  <td>
                    <?vsp
                      declare _done integer;

                      _done := 0;
                      for (select TS_TAG from BMK..TAGS_STATISTICS where domain_id = self.domain_id and account_id = self.account_id  and TS_TAG <> '' order by TS_TAG) do {
                        http (sprintf ('<a href="#" onclick="javascript: addTag(\'%s\', \'b_tags\');">%s</a> ', TS_TAG, TS_TAG));
                        _done := 1;
                      }
                      if (not _done)
                        http ('no tags');
                    ?>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Save" xhtml_class="form-button">
                <v:after-data-bind>
                  <![CDATA[
                    if (self.v_return <> '')
                      control.ufl_value := 'Save & Back';
                  ]]>
                </v:after-data-bind>
                <v:on-post>
                  <![CDATA[
                    if (not ((self.bMode = 'Bookmark/Create') or (self.bMode = 'Bookmark/Properties')))
                      return;

                    declare tmp any;

                    declare exit handler for SQLSTATE '*' {
                      if (__SQL_STATE = 'TEST') {
                        self.vc_error_message := BMK.WA.test_clear(__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };

                    self.v_name := BMK.WA.test(self.b_name.ufl_value, vector('name', 'Bookmark Name', 'class', 'varchar', 'type', 'varchar', 'minLength', 1, 'maxLength', 255));
                    self.v_uri := BMK.WA.test(self.b_uri.ufl_value, vector('name', 'Bookmark Link', 'class', 'uri', 'type', 'varchar', 'minLength', 1, 'maxLength', 255));
                    self.v_folder_id := self.b_folder_id.ufl_value;
                    self.v_folder_name := trim(self.b_folder_name.ufl_value);
                    if ((self.v_folder_name <> '') and (not BMK.WA.folder_check_name(self.v_folder_name, 1))) {
                      self.vc_error_message := 'Please, enter other folder name. This name conatins bad characters.';
                     	self.vc_is_valid := 0;
                  		return;
                    }
                    self.v_tags := trim(self.b_tags.ufl_value);
                    BMK.WA.test(self.v_tags, vector('name', 'Tags', 'class', 'tags'));
                    tmp := BMK.WA.tags2vector(self.v_tags);
                    tmp := BMK.WA.vector_unique(tmp);
                    self.v_tags := BMK.WA.vector2tags(tmp);

                    self.v_folder_id := BMK.WA.folder_create(self.domain_id, self.v_folder_name, self.v_folder_id);
                    tmp := BMK.WA.bookmark_update(self.v_id, self.domain_id, self.v_uri, self.v_name, self.v_description, self.v_folder_id);
                    tmp := (select BD_BOOKMARK_ID from BMK.WA.BOOKMARK_DOMAIN where BD_ID = tmp);
                    BMK.WA.bookmark_tags(self.domain_id, self.account_id, tmp, self.v_tags);

                    self.v_grants := trim(self.b_grants.ufl_value);
                    self.shareNode (BMK.WA.make_node('b', self.v_id), self.v_grants, 1);

                    if (self.v_return <> '')
                      self.vc_redirect(self.v_return);
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:after-data-bind>
                  <![CDATA[
                    if (self.v_return <> '')
                      control.ufl_value := 'Back';
                  ]]>
                </v:after-data-bind>
                <v:on-post>
                  <![CDATA[
                    if (self.v_return <> '')
                      self.vc_redirect(self.v_return);
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when ((self.bMode = 'Folder/Create') or (self.bMode = 'Folder/Update')) then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                declare params any;
                params := self.vc_page.vc_event.ve_params;

                 declare exit handler for not found goto _end;

                if (isnull(get_keyword ('f_name', params)) and (self.bMode = 'Folder/Update')) {
                  select F_PARENT_ID,
                         F_NAME
                    into self.v_parent_id,
                         self.v_name
                    from BMK.WA.FOLDER
                   where F_DOMAIN_ID = self.domain_id
                     and F_ID = self.v_id;

                  self.v_grants := self.shareSelect (BMK.WA.make_node('f', self.v_id));
                  self.bMode := 'Folder/Update';
                  return;
                }

              _end:
                self.v_parent_id := 0;
                if (BMK.WA.node_type(self.bNode) = 'f')
                  self.v_parent_id := BMK.WA.node_id(self.bNode);
                self.v_parent_id := cast (get_keyword ('f_parent_id', params, self.v_parent_id) as integer);
                self.v_name := get_keyword ('f_name', params, '');
                self.v_grants := get_keyword ('f_grants', params, self.v_grants);
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label format="%s" value="--self.bMode"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="f_parent" value="Parent folder"/>
                  </th>
                  <td>
                    <v:select-list name="f_parent_id">
                      <v:before-data-bind>
                        <![CDATA[
                          declare S integer;

                          S := '!@#';
                          if (self.v_id >= 0)
                            S := BMK.WA.folder_path (self.v_id);
                          (control as vspx_select_list).vsl_items:= vector ();
                          (control as vspx_select_list).vsl_item_values:= vector ();
                          (control as vspx_select_list).vsl_selected_inx := 0;
                          (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector ('Select folder ...'));
                          (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector ('-1'));
                          for (select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH) do {
                            if (F_PATH like concat (S, '%'))
                              goto _skip;
                            (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector (F_PATH2));
                            (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector (cast(F_ID as varchar)));
                          _skip:;
                          }
                        ]]>
                      </v:before-data-bind>
                      <v:after-data-bind>
                        <![CDATA[
                          declare N integer;

                          N := 0;
                          foreach (any item in (control as vspx_select_list).vsl_item_values) do {
                            if (item = cast (self.v_parent_id as varchar))
                              (control as vspx_select_list).vsl_selected_inx := N;
                            N := N + 1;
                          }
                        ]]>
                      </v:after-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="f_name" value="Folder name"/>
                  </th>
                  <td>
                    <v:text name="f_name" null-value="--''" value="--BMK.WA.utf2wide (self.v_name)" fmt-function="BMK.WA.utf2wide" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="f_grants" value="Share to user(s)" />
                  </th>
                  <td>
                    <v:text name="f_grants" null-value="--''" value="--self.v_grants" xhtml_class="textbox" xhtml_size="60" xhtml_title="User names must be comma delimited!" />
                    <input type="button" value="Select" onClick="javascript: windowShow('users.vspx?mode=u&dst=m&amp;params=f_grants:s1;',520)" class="button" />
                    <input type="button" value="Clear" onClick="javascript: document.F1.elements['f_grants'].value = ''" class="button" />
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Save" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    if (not ((self.bMode = 'Folder/Create') or (self.bMode = 'Folder/Update')))
                      return;

                    declare exit handler for SQLSTATE '*' {
                      if (__SQL_STATE = 'TEST') {
                        self.vc_error_message := BMK.WA.test_clear (__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };

                    self.v_name := BMK.WA.test (self.f_name.ufl_value, vector ('name', 'Folder name', 'class', 'folder', 'type', 'varchar', 'minLength', 1, 'maxLength', 255));
                    self.v_parent_id := cast (self.f_parent_id.ufl_value as integer);
                    if (self.v_parent_id = 0)
                      self.v_parent_id := null;

                    if (BMK.WA.folder_check_unique (self.domain_id, self.v_parent_id, self.v_name, self.v_id))
                      signal('TEST', 'Folder name already exists. Please, enter new name!<>');

                    if ((self.bMode <> 'Folder/Create') and BMK.WA.folder_check_parent(self.domain_id, self.v_id, self.v_parent_id))
                      signal('TEST', 'Please, enter other parent folder. This folder is superior of the selected parent folder!<>');

                    if (self.bMode = 'Folder/Create') {
                      self.v_id := BMK.WA.folder_create2(self.domain_id, self.v_parent_id, self.v_name);
                    } else {
                      update BMK.WA.FOLDER
                         set F_PARENT_ID = self.v_parent_id,
                             F_NAME = self.v_name
                       where F_ID = self.v_id;
                    }

                    self.v_grants := trim(self.f_grants.ufl_value);
                    self.shareNode (BMK.WA.make_node('f', self.v_id), self.v_grants, 1);

                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when ((self.bMode = 'Smart Folder/Create') or (self.bMode = 'Smart Folder/Update')) then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                 declare exit handler for not found goto _end;

                if (isnull(get_keyword ('s_name', self.vc_page.vc_event.ve_params))) {
                  declare data any;

                  select SF_NAME,
                         SF_DATA
                    into self.v_name,
                         data
                    from BMK.WA.SFOLDER
                   where SF_DOMAIN_ID = self.domain_id
                     and SF_ID = self.v_id;

                  self.v_keywords := BMK.WA.xml_get('keywords', data);
                  self.v_expression := BMK.WA.xml_get('expression', data);
                  self.v_tags := BMK.WA.xml_get('tags', data);
                  self.v_folder_id := BMK.WA.xml_get('folder', data);
                  self.bMode := 'Smart Folder/Update';
                  return;
                }

              _end:
                self.v_name := get_keyword('s_name', self.vc_page.vc_event.ve_params, '');
                self.v_keywords := trim(get_keyword('s_keywords', self.vc_page.vc_event.ve_params, ''));
                self.v_expression := trim(get_keyword('s_expression', self.vc_page.vc_event.ve_params, ''));
                self.v_tags := trim(get_keyword('s_tags', self.vc_page.vc_event.ve_params, ''));
                self.v_folder_id := trim(get_keyword ('s_folder_id', self.vc_page.vc_event.ve_params, '0'));
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label format="%s" value="--self.bMode"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="s_name" value="Smart folder name" />
                  </th>
                  <td>
                    <v:text name="s_name" null-value="--''" value="--self.v_name" fmt-function="BMK.WA.utf2wide" xhtml_class="textbox" xhtml_size="60" />
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="s_keywords" value="Space delimited keyword list" />
                  </th>
                  <td>
                    <v:text name="s_keywords" value="--self.v_keywords" xhtml_class="textbox" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="" value="or expression" />
                  </th>
                  <td>
            			  <v:textarea name="s_expression" value="--self.v_expression" xhtml_rows="2" xhtml_cols="50"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="s_tags" value="Comma Delimited Tags" />
                  </th>
                  <td>
                    <v:text name="s_tags" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="s_folder" value="Folder"/>
                  </th>
                  <td>
                    <v:data-list name="s_folder_id" value="--self.v_folder_id" sql="select 0 as F_ID, 'Select folder ...' as F_PATH2, '' as F_PATH from WS.WS.SYS_DAV_USER where U_NAME = 'dav' union all select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH" key-column="F_ID" value-column="F_PATH2" xhtml_class="select"/>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Save" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    if (not ((self.bMode = 'Smart Folder/Create') or (self.bMode = 'Smart Folder/Update')))
                      return;

                    declare tmp any;

                    declare exit handler for SQLSTATE '*' {
                      if (__SQL_STATE = 'TEST') {
                        self.vc_error_message := BMK.WA.test_clear(__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };

                    self.v_name := trim(self.s_name.ufl_value);
                    self.v_keywords := trim(self.s_keywords.ufl_value);
                    self.v_expression := trim(self.s_expression.ufl_value);
                    self.v_tags := trim(self.s_tags.ufl_value);
                    self.v_folder_id := cast(self.s_folder_id.ufl_value as integer);

                    BMK.WA.test(self.v_name, vector('name', 'Smart folder name', 'class', 'folder', 'type', 'varchar', 'minLength', 1, 'maxLength', 255));
                    tmp := coalesce((select SF_ID from BMK.WA.SFOLDER where SF_DOMAIN_ID = self.domain_id and SF_NAME = self.v_name), -1);
                    if (((self.bMode = 'Smart Folder/Create') and (tmp <> -1)) or ((self.bMode = 'Smart Folder/Update') and (tmp <> self.v_id) and (tmp <> -1)))
                      signal('TEST', 'Smart folder name already exists. Please, enter new ''Smart folder name''!<>');
                    BMK.WA.test(self.v_keywords, vector('name', 'Keywords', 'class', 'free-text'));
                    BMK.WA.test(self.v_expression, vector('name', 'Expression', 'class', 'free-text-expression'));
                    BMK.WA.test(self.v_tags, vector('name', ' Tags', 'class', 'tags'));

                    tmp := BMK.WA.ft2vector(self.v_keywords);
                    tmp := BMK.WA.vector_unique(tmp, 2);
                    self.v_keywords := BMK.WA.vector2str(tmp);

                    tmp := BMK.WA.tags2vector(self.v_tags);
                    tmp := BMK.WA.vector_unique(tmp, 2);
                    self.v_tags := BMK.WA.vector2tags(tmp);

                    declare data varchar;

                    BMK.WA.xml_set('keywords', data, self.v_keywords);
                    BMK.WA.xml_set('expression', data, self.v_expression);
                    BMK.WA.xml_set('tags', data, self.v_tags);
                    if (self.v_folder_id <> '0')
                      BMK.WA.xml_set('folder', data, self.v_folder_id);
                    data := BMK.WA.xml2string(data);

                    if (self.bMode = 'Smart Folder/Create') {
                      self.v_id := BMK.WA.sfolder_create(self.domain_id, self.v_name, data);
                    } else {
                      BMK.WA.sfolder_update(self.domain_id, self.v_id, self.v_name, data);
                    }
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

        </div>
      </div>
      <?vsp
        if (self.bBookmark is not null) {
          http ('\n<script type="text/javascript">\n');
          http (sprintf ('if (BrowserDetect.browser != \'Opera\') location.hash = "%s";\n', self.bBookmark));
          http ('</script>\n');
        }
      ?>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
