<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2006 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="bookmarks" decor="template/template.vspx" style="template/template.xsl" fast-render="1" button-anchors="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">

  <v:method name="sortColumn" arglist="in titleName varchar, in columnName varchar">
    <![CDATA[
      declare altStr, directionStr, imageStr varchar;

      if (self.n_order = columnName and self.n_direction = 'desc') {
        directionStr := 'Ascending';
        imageStr := '&nbsp;<img src="image/d.gif" border="0" alt="Down"/>';
      } else if (self.n_order = columnName and self.n_direction = 'asc') {
        directionStr := 'Descending';
        imageStr := '&nbsp;<img src="image/u.gif" border="0" alt="Up"/>';
      } else {
        directionStr := 'Ascending';
        imageStr := '&nbsp;&nbsp;';
      }
      if (self.account_role <> 'public') {
        altStr := sprintf ('Sort Rows on %s in %s Order', titleName, directionStr);
        http (sprintf ('<a href="#" onclick="javascript: myPost (''F1'', ''sortColumn'', ''%s''); return false;" alt="%s" title="%s">%s%s</a>', columnName, altStr, altStr, titleName, imageStr));
      } else {
        http (sprintf ('%s%s', titleName, imageStr));
      }
    ]]>
  </v:method>

  <v:method name="sortChange" arglist="in columnName varchar">
    <![CDATA[
      if (columnName = '')
        return;
      self.ds.vc_reset ();
      if (self.n_order = columnName) {
        self.n_direction := either (equ (self.n_direction, 'asc'), 'desc', 'asc');
      } else {
        self.n_direction := 'asc';
      }
      self.n_order := columnName;
    ]]>
  </v:method>

  <v:method name="linkClass" arglist="inout flag any">
    <![CDATA[
      return either (equ (flag, 1), 'read', 'unread');
    ]]>
  </v:method>

  <v:method name="mode_test" arglist="">
    <![CDATA[
      declare id, folder_id, params any;

      params := self.vc_page.vc_event.ve_params;
      if (not is_empty_or_null (self.bTag)) {
        self.bTab := 'tags';
        self.bNode := 't#' || self.bTag;
      } else if (not is_empty_or_null (get_keyword('link', params, ''))) {
        self.bTab  := 'bookmarks';
        self.bNode := 'p#0';
      } else if (not is_empty_or_null (get_keyword('folder', params, ''))) {
        self.bTab := 'bookmarks';
        self.bMode := 'browse';
        self.bNode := 'f#' || get_keyword('folder', params, '');
        self.bBookmark := 'pt_node_' || self.bNode;
      } else if (not is_empty_or_null (get_keyword('location', params, ''))) {
        self.bTab := 'bookmarks';
        self.bMode := 'browse';
        self.bLocation := 'b#' || get_keyword('location', params);
        folder_id  := coalesce((select BD_FOLDER_ID from BMK.WA.BOOKMARK_DOMAIN where BD_ID = cast(get_keyword('location', params) as integer)), 0);
        self.bNode := 'f#' || cast(folder_id as varchar);
        self.bBookmark := 'pt_node_' || self.bNode;
      }
    ]]>
  </v:method>

  <v:method name="toolbarLabel" arglist="in cmd varchar">
    <![CDATA[
      if (self.tbLabels = 0)
        return '';
      return sprintf('<br /><span class="toolbarLabel">%s</span>', cmd);
    ]]>
  </v:method>

  <v:method name="toolbarEnable" arglist="in cmd varchar">
    <![CDATA[
      return 1;
    ]]>
  </v:method>

  <v:method name="validateNode" arglist="in domain_id integer">
    <![CDATA[
      declare N, node_type, node_id, nodes any;

      node_id := BMK.WA.node_id(self.bNode);
      node_type := BMK.WA.node_type(self.bNode);

      if ((node_type = 'f') and (node_id <> 0) and (exists (select 1 from BMK.WA.FOLDER where F_DOMAIN_ID = domain_id and F_ID = node_id)))
        goto _next;

      if ((node_type = 's') and (node_id <> 0) and (exists (select 1 from BMK.WA.SFOLDER where SF_DOMAIN_ID = domain_id and SF_ID = node_id)))
        goto _next;

      if (self.bNode in ('r#0', 'r#1', 'f#0', 's#0'))
        goto _next;

      self.bNode := 'f#0';
    _next:;
      nodes := split_and_decode(BMK.WA.bmk_path2(domain_id, self.bNode), 0, '\0\0/');
      for (N := 0; N < length(nodes) - 1; N := N + 1)
        if (not BMK.WA.vector_contains(self.bState, nodes[N]))
          self.bState := vector_concat(self.bState, vector(nodes[N]));
    ]]>
  </v:method>

  <v:method name="showTree" arglist="in level integer, in domain_id integer, in node varchar, in path varchar">
    <![CDATA[
      declare N, isOpen integer;
      declare nodes, image, image2, alt, class any;

      if (isnull(self.bState))
        self.bState := vector();
      nodes := BMK.WA.bmk_tree2(domain_id, node, path);
      if (level = 1)
        self.validateNode(domain_id);
      for (N := 0; N < length(nodes); N := N + 3) {
        if (level = 1) {
          http ('<div style="margin-left:3px; margin-top:3px; white-space: nowrap;">');
        } else {
          http ('<div style="margin-left:12px; white-space: nowrap;">');
        }
        image := 'plus.gif';
        image2 := 'folder_16.png';
        alt := 'Open Node';
        if (BMK.WA.vector_contains(self.bState, nodes[N+1])) {
          image := 'minus.gif';
          image2 := 'folder_open_16.png';
          alt := 'Close Node';
        }

        class := 'nolink_b';
        if (nodes[N+1] = self.bNode) {
          class := 'nolink_a';
          self.bName := nodes[N];
        }

        http(sprintf('<a href="#" name="pt_toggle_%s" onclick="javascript: vspxPost (\'pt_browse\', \'pt_toggle\', \'%s\'); return false"><img src="image/%s" border="0" class="nolink" alt="%s" title="%s" /></a>', nodes[N+1], nodes[N+1], image, alt, alt));
        http(sprintf('<a href="#" name="pt_node_%s" onclick="javascript: vspxPost (\'pt_browse\', \'pt_node\', \'%s\'); return false" class="nolink3 %s" alt="%s" title="%s" > <img src="image/%s" border="0" /> %s</a>', nodes[N+1], nodes[N+1], class, nodes[N], nodes[N], image2, nodes[N]));
        if (image = 'minus.gif')
          self.showTree(level+1, domain_id, nodes[N+1], nodes[N+2]);

        http ('</div>');
      }
    ]]>
  </v:method>

  <vm:pagetitle>Bookmarks</vm:pagetitle>
  <vm:pagewrapper>
    <vm:header>
      Bookmarks
    </vm:header>
    <vm:variables>
      <v:variable persist="0" name="n_order" type="varchar" default="'_NAME'" />
      <v:variable persist="0" name="n_direction" type="varchar" default="'desc'" />
      <v:variable persist="0" name="bTag" type="varchar" default="null" />
      <v:variable persist="1" name="bTab" type="varchar" default="'bookmarks'"/>
      <v:variable persist="1" name="bNode" type="varchar" default="'f#0'"/>
      <v:variable persist="temp" name="bName" type="varchar" default="''"/>
      <v:variable persist="temp" name="bLocation" type="any" default="''"/>
      <v:variable persist="0" name="bNodes" type="any" default="null"/>
      <v:variable persist="1" name="bMode" type="varchar" default="'browse'"/>
      <v:variable persist="1" name="bState" type="any" default="null" />
      <v:variable persist="1" name="bBookmark" type="varchar" default="null" />

      <v:variable name="tbLabels" type="integer" default="1" />
      <v:variable name="chars" type="integer" default="60" />

      <v:variable name="v_id"  type="any" default="0"/>
      <v:variable name="v_parent_id" type="varchar" default="'0'"/>
      <v:variable name="v_uri" type="varchar" param-name="URI" default="'http://'"/>
      <v:variable name="v_name" type="varchar" param-name="TITLE" default="''"/>
      <v:variable name="v_oldName" type="varchar" default="''"/>
      <v:variable name="v_description" type="varchar" default="''"/>
      <v:variable name="v_keywords" type="varchar" default="''"/>
      <v:variable name="v_expression" type="varchar" default="''"/>
      <v:variable name="v_tag" type="varchar" default="''"/>
      <v:variable name="v_tags" type="varchar" default="''"/>
      <v:variable name="v_folder_name" type="varchar" default="''"/>
      <v:variable name="v_folder_id" type="varchar" default="'0'"/>
    </vm:variables>
    <vm:pagebody>
      <v:before-data-bind>
        <![CDATA[
          declare settings any;

          settings := BMK.WA.settings(self.account_id);
          self.tbLabels := cast(get_keyword('tbLabels', settings, '1') as integer);
          self.chars := cast(get_keyword('chars', settings, '60') as integer);

          if (get_keyword('URI', self.vc_page.vc_event.ve_params, '') <> '') {
            self.bMode := 'Bookmark/Create';
            self.v_id := 0;
          }
          self.bTab := lcase(get_keyword('tab', e.ve_params, self.bTab));
          self.bTag := lcase(get_keyword('tag', e.ve_params, ''));
          self.mode_test();
        ]]>
      </v:before-data-bind>
      <v:on-post>
        <![CDATA[
          if (e.ve_button is not null)  {
            if (e.ve_button.vc_name = 'pt_browse') {
              if (get_keyword('pt_toggle', e.ve_params, '') <> '') {
                self.bBookmark := 'pt_toggle_' || get_keyword('pt_toggle', e.ve_params);
              } else if (get_keyword('pt_node', e.ve_params, '') <> '') {
                self.bBookmark := 'pt_node_' || get_keyword('pt_node', e.ve_params);
              }
            } else if (e.ve_button.vc_name = 'pt_tags') {
              self.bBookmark := 'pt_tag_' || self.bTag;
            }
          }
        ]]>
      </v:on-post>

      <!-- Toolbar -->
      <v:template type="simple">
        <?vsp http('<input type="hidden" name="tbHidden" value=""/>'); ?>
        <?vsp
          if (0)
          {
        ?>
            <v:button name="toolbar" action="simple" style="url" value="Submit">
              <v:on-post>
                <![CDATA[
                  declare cmd any;
                  cmd := get_keyword ('tbHidden', e.ve_params, '');
                  if (cmd = 'bookmarks') {
                    if (self.bTab <> 'bookmarks')
                      self.bNode := 'f#0';
                    self.bTab := 'bookmarks';
                    self.bMode := 'browse';
                  }
                  if (cmd = 'tags') {
                    if (self.bTab <> 'tags')
                      self.bNode := 't#';
                    self.bTab := 'tags';
                    self.bMode := 'browse';
                  }
                  if (cmd = 'Bookmark/Create') {
                    self.bMode := 'Bookmark/Create';
                    self.v_id := 0;
                    self.v_tags := '';
                  }
                  if (cmd = 'Folder/Create') {
                    self.bMode := 'Folder/Create';
                    self.v_id := 0;
                  }
                  if (cmd = 'Smart Folder/Create') {
                    self.bMode := 'Smart Folder/Create';
                    self.v_id := 0;
                  }
                  if (cmd = 'import') {
                    self.bMode := 'import';
                  }
                  if (cmd = 'export') {
                    self.bMode := 'export';
                  }
                  if (cmd = 'tag') {
                    declare N integer;

                    self.bMode := 'tag';
                    self.bNodes := vector();
                    for (N := 0; N < length(e.ve_params); N := N + 4) {
                      if (e.ve_params[N] = 'cb_item')
                        self.bNodes := vector_concat(self.bNodes, vector(e.ve_params[N+1]));
                    }
                  }
                  if (cmd = 'move') {
                    declare N integer;

                    self.bMode := 'move';
                    self.bNodes := vector();
                    for (N := 0; N < length(e.ve_params); N := N + 4) {
                      if (e.ve_params[N] = 'cb_item')
                        self.bNodes := vector_concat(self.bNodes, vector(e.ve_params[N+1]));
                    }
                  }
                  if (cmd = 'rename') {
                    declare N integer;

                    for (N := 0; N < length(e.ve_params); N := N + 4) {
                      if (e.ve_params[N] = 'cb_item') {
                        self.bMode := 'rename';
                        self.v_id := e.ve_params[N+1];
                        goto _end;
                      }
                    }
                  }
                  if (cmd = 'properties') {
                    declare N integer;
                    declare node any;

                    for (N := 0; N < length(e.ve_params); N := N + 4) {
                      if (e.ve_params[N] = 'cb_item') {
                        node := e.ve_params[N+1];
                        if (BMK.WA.node_type(node) = 'f') {
                          self.bMode := 'Folder/Update';
                          self.v_id := BMK.WA.node_id(node);
                        } else if (BMK.WA.node_type(node) = 'b') {
                          self.bMode := 'Bookmark/Properties';
                          self.v_id := BMK.WA.node_id(node);
                        } else if (BMK.WA.node_type(node) = 's') {
                          self.bMode := 'Smart Folder/Update';
                          self.v_id := BMK.WA.node_id(node);
                        }
                        goto _end;
                      }
                    }
                  }
                  if (cmd = 'delete') {
                    declare N integer;
                    declare node any;

                    for (N := 0; N < length(e.ve_params); N := N + 4) {
                      if (e.ve_params[N] = 'cb_item') {
                        node := e.ve_params[N+1];
                        if (BMK.WA.node_type(node) = 'f') {
                          BMK.WA.folder_delete(self.domain_id, BMK.WA.node_id(node));
                        } else if (BMK.WA.node_type(node) = 'b') {
                          BMK.WA.bookmark_delete(self.domain_id, BMK.WA.node_id(node));
                        } else if (BMK.WA.node_type(node) = 's') {
                          BMK.WA.sfolder_delete(self.domain_id, BMK.WA.node_id(node));
                        }
                      }
                    }
                  }
                _end:
                  self.vc_data_bind(e);
       		      ]]>
       		    </v:on-post>
            </v:button>
        <?vsp
          }
        ?>
        <div class="toolbar">
          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''bookmarks'');'" xhtml_title="Show Bookmarks" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/bmk_32.png" border="0"/>' || self.toolbarLabel('Show Bookmarks');
              ]]>
            </v:before-render>
          </v:url>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''tags'');'" xhtml_title="Show Tags" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/tags_32.png" border="0"/>' || self.toolbarLabel('Show Tags');
              ]]>
            </v:before-render>
          </v:url>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar"/>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''import'');'" enabled="--self.toolbarEnable('import')" xhtml_title="Import" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/impt_32.png" border="0"/>' || self.toolbarLabel('Import');
              ]]>
            </v:before-render>
          </v:url>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''export'');'" enabled="--self.toolbarEnable('export')" xhtml_title="Export" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/exp_32.png" border="0"/>' || self.toolbarLabel('Export');
              ]]>
            </v:before-render>
          </v:url>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar"/>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''Bookmark/Create'');'" enabled="--self.toolbarEnable('new')" xhtml_title="New Folder" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/bmk_add_32.png" border="0"/>' || self.toolbarLabel('New Bookmark');
              ]]>
            </v:before-render>
          </v:url>
          <v:template type="simple" enabled="--case when self.toolbarEnable('Bookmark/Create') then 0 else 1 end">
            <span class="toolbar">
              <img src="image/grey_add_32.png" border="0" alt="New Bookmarkr"/><?vsp http(self.toolbarLabel('New Bookmark'));?>
            </span>
          </v:template>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''Folder/Create'');'" enabled="--self.toolbarEnable('Folder/Create')" xhtml_title="New Folder" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/new_fldr_32.png" border="0"/>' || self.toolbarLabel('New Folder');
              ]]>
            </v:before-render>
          </v:url>
          <v:template type="simple" enabled="--case when self.toolbarEnable('Folder/Create') then 0 else 1 end">
            <span class="toolbar">
              <img src="image/grey_new_fldr_32.png" border="0" alt="New Folder"/><?vsp http(self.toolbarLabel('New Folder'));?>
            </span>
          </v:template>

          <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''Smart Folder/Create'');'" enabled="--self.toolbarEnable('Smart Folder/Create')" xhtml_title="New Folder" xhtml_class="toolbar">
            <v:before-render>
              <![CDATA[
                control.ufl_value := '<img src="image/sfolder_32.jpg" border="0"/>' || self.toolbarLabel('New Smart Folder');
              ]]>
            </v:before-render>
          </v:url>
          <v:template type="simple" enabled="--case when self.toolbarEnable('Smart Folder/Create') then 0 else 1 end">
            <span class="toolbar">
              <img src="image/grey_add_32.png" border="0" alt="New Folder"/><?vsp http(self.toolbarLabel('New Smart Folder'));?>
            </span>
          </v:template>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar"/>

          <span id="tbTag" class="toolbar" style="display: none">
            <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''tag'');'" enabled="--self.toolbarEnable('tag')" xhtml_title="Tag">
              <v:before-render>
                <![CDATA[
                  control.ufl_value := '<img src="image/tag_32.png" border="0"/>' || self.toolbarLabel('Tag');
                ]]>
              </v:before-render>
            </v:url>
          </span>
          <span id="tbTag_gray" class="toolbar" style="display: inline;">
            <img src="image/grey_tag_32.png" border="0" alt="Tag"/><?vsp http(self.toolbarLabel('Tag'));?>
          </span>

          <span id="tbMove" class="toolbar" style="display: none">
            <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''move'');'" enabled="--self.toolbarEnable('move')" xhtml_title="Move">
              <v:before-render>
                <![CDATA[
                  control.ufl_value := '<img src="image/move_32.png" border="0"/>' || self.toolbarLabel('Move');
                ]]>
              </v:before-render>
            </v:url>
          </span>
          <span id="tbMove_gray" class="toolbar" style="display: inline;">
            <img src="image/grey_move_32.png" border="0" alt="Move"/><?vsp http(self.toolbarLabel('Move'));?>
          </span>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar"/>

          <span id="tbRename" class="toolbar" style="display: none">
            <v:url value="--''" format="%s" url="--'javascript: toolbarPost(''rename'');'" enabled="--self.toolbarEnable('rename')" xhtml_title="Rename">
              <v:before-render>
                <![CDATA[
                  control.ufl_value := '<img src="image/renm_32.png" border="0"/>' || self.toolbarLabel('Rename');
                ]]>
              </v:before-render>
            </v:url>
          </span>
          <span id="tbRename_gray" class="toolbar" style="display: inline;">
            <img src="image/grey_renm_32.png" border="0" alt="Rename"/><?vsp http(self.toolbarLabel('Rename'));?>
          </span>

          <span id="tbProperties" class="toolbar" style="display: none">
            <v:url value="--''" format="%s" url="--'javascript: if (anySelected(document.F1, ''cb_'', ''No resources were selected for property changes.'')) toolbarPost(''properties'');'" enabled="--self.toolbarEnable('properties')" xhtml_title="Properties">
              <v:before-render>
                <![CDATA[
                  control.ufl_value := '<img src="image/prop_32.png" border="0"/>' || self.toolbarLabel('Properties');
                ]]>
              </v:before-render>
            </v:url>
          </span>
          <span id="tbProperties_gray" class="toolbar" style="display: inline;">
            <img src="image/grey_prop_32.png" border="0" alt="Properties"/><?vsp http(self.toolbarLabel('Properties'));?>
          </span>

          <span id="tbDelete" class="toolbar" style="display: none">
            <v:url value="--''" format="%s" url="--'javascript: if (confirmAction(\'Are you sure that you want to delete selected items?\', document.F1, ''cb_'', ''No items were selected for deletion.'')) toolbarPost(''delete'');'" xhtml_title="Delete">
              <v:before-render>
                <![CDATA[
                  control.ufl_value := '<img src="image/del_32.png" border="0"/>' || self.toolbarLabel('Delete');
                ]]>
              </v:before-render>
            </v:url>
          </span>
          <span id="tbDelete_gray" class="toolbar" style="display: inline;">
            <img src="image/grey_del_32.png" border="0" alt="Delete"/><?vsp http(self.toolbarLabel('Delete'));?>
          </span>

        </div>
        <div style="clear: both;"/>
      </v:template>
      <!--=========================================================================-->

      <div class="feed_main" style="position: relative;">
        <div style="width: 33.8%; height: 100%; float: left; overflow: auto;">
              <?vsp
            if (self.bTab = 'bookmarks')
              if (self.domain_id = -1) {
                self.showTree(1, self.domain_id, 'r#0', '');
                } else {
                self.showTree(1, self.domain_id, 'r#1', '');
                }
              ?>
          <v:template type="simple" enabled="--either(equ(self.bTab, 'tags'), 1, 0)">
                <?vsp
              if (0)
              {
                ?>
                <v:button name="pt_tags" action="simple" style="url" value="Submit"/>
                <v:button name="pt_browse" action="simple" style="url" value="Submit">
                  <v:on-post>
                    <![CDATA[
                      declare node any;

                      -- touggle
                      node := get_keyword('pt_toggle', e.ve_params, '');
                      if (node <> '') {
                        if (BMK.WA.vector_contains(self.bState, node)) {
                          self.bState := BMK.WA.vector_cut(self.bState, node);
                          if (BMK.WA.bmk_path2(self.domain_id, self.bNode) like concat(BMK.WA.bmk_path2(self.domain_id, node), '%'))
                            self.bNode := node;
                        } else {
                          self.bState := vector_concat(self.bState, vector(node));
                        }
                      }

                      -- node
                      node := get_keyword('pt_node', e.ve_params, '');
                      if (node <> '') {
                        self.bMode := 'browse';
                        self.bNode := node;
                      }

                      self.vc_data_bind (e);
                   ]]>
                  </v:on-post>
                </v:button>
            <?vsp
              }
            ?>
            <div style="margin-left:3px; margin-top:3px;">
              <?vsp
                declare ts_max, ts_size integer;
                declare ts_class varchar;

                if (is_empty_or_null (self.bTag))
                  self.bTag := BMK.WA.node_suffix (self.bNode);
                ts_max := 1;
                for (select TS_TAG, TS_COUNT from BMK..TAGS_STATISTICS where domain_id = self.domain_id and account_id = self.account_id order by TS_TAG) do {
                  if (TS_TAG = '') {
                    ts_max := TS_COUNT;
                  } else {
              	    ts_size  := ((150.00 * TS_COUNT) / ts_max) + 100;
                    ts_class := 'nolink_b';
                    if (self.bTag = TS_TAG)
                      ts_class := 'nolink_a';
                    http (sprintf ('<a href="#" onclick="javascript: myTags(\'%s\');" name="pt_tag_%s"><span class="%s" style="font-size: %d%s;">%s</span></a> ', TS_TAG, TS_TAG, ts_class, ts_size, '%', TS_TAG));
                  }
                }
              ?>
            </div>
          </v:template>
        </div>
        <div style="width: 66%; height: 100%; float: right; overflow: auto; border: solid #7f94a5; border-width: 0px 0px 0px 1px;">
          <v:template type="simple" enabled="--case when (self.bMode = 'browse') then 1 else 0 end">
            <?vsp
              declare className, nodeName any;

              self.mode_test();
              className := 'Root';
              if (BMK.WA.node_type (self.bNode) = 'f') {
                if (BMK.WA.node_id (self.bNode) <> 0)
                  className := 'Folder';
              } else if (BMK.WA.node_type (self.bNode) = 's') {
                if (BMK.WA.node_id (self.bNode) <> 0)
                  className := 'Smart Folder';
              } else if (BMK.WA.node_type (self.bNode) = 't') {
                if (BMK.WA.node_suffix (self.bNode) <> '')
                  className := 'Tag';
              }

              nodeName := null;
              if (BMK.WA.node_type (self.bNode) = 't') {
                  nodeName := 'Tags';
                if (BMK.WA.node_suffix (self.bNode) <> '')
                  nodeName := BMK.WA.node_suffix (self.bNode);
              } else {
                nodeName := self.bName;
              }

              http(sprintf('<div id="channel_header">&nbsp;<b>%s: %s</b></div>', className, coalesce(nodeName, '')));
            ?>
            <v:data-source name="dsrc" expression-type="sql" nrows="0" initial-offset="0">
              <v:before-data-bind>
                <![CDATA[
                  declare read_flag, keep_flag varchar;

                  self.mode_test();

                  control.ds_parameters := null;
                  control.ds_sql := 'select 0 _TYPE, F_ID _ID, \'\' _NODE, F_NAME _NAME, \'\' _URI from BMK.WA.FOLDER where 1=0';
                  if (BMK.WA.node_type(self.bNode) = 'f') {
                    control.ds_sql := 'select _TYPE,
                                              _ID,
                                              _NODE,
                                              _NAME,
                                              _URI,
                                              _LAST_UPDATE
                                         from (select 0                        _TYPE,
                                                      F_ID                     _ID,
                                              sprintf(\'f#%d\', F_ID)  _NODE,
                                              F_NAME                   _NAME,
                                              \'\'                     _URI,
                                              null                    _LAST_UPDATE
                                         from BMK.WA.FOLDER
                                        where F_DOMAIN_ID = <DOMAIN_ID>
                                          and coalesce(F_PARENT_ID, 0) = <ID>
                                        union
                                               select 1                        _TYPE,
                                                      BD_ID                    _ID,
                                              sprintf(\'b#%d\', BD_ID) _NODE,
                                              BD_NAME                  _NAME,
                                              B_URI                    _URI,
                                              BD_LAST_UPDATE           _LAST_UPDATE
                                         from BMK.WA.BOOKMARK_DOMAIN,
                                              BMK.WA.BOOKMARK
                                        where BD_DOMAIN_ID = <DOMAIN_ID>
                                          and BD_BOOKMARK_ID = B_ID
                                                  and coalesce(BD_FOLDER_ID, 0) = <ID>) x';
                    control.ds_sql := replace(control.ds_sql, '<DOMAIN_ID>', cast(self.domain_id as varchar));
                    control.ds_sql := replace(control.ds_sql, '<ID>', cast(BMK.WA.node_id(self.bNode) as varchar));

                  } else if ((BMK.WA.node_type(self.bNode) = 's') and (BMK.WA.node_id(self.bNode) = 0)) {
                    control.ds_sql := 'select 1                        _TYPE,
                                              SF_ID                    _ID,
                                              sprintf(\'s#%d\', SF_ID) _NODE,
                                              SF_NAME                  _NAME,
                                              \'\'                     _URI,
                                              null                    _LAST_UPDATE
                                         from BMK.WA.SFOLDER
                                        where SF_DOMAIN_ID = <DOMAIN_ID>';
                    control.ds_sql := replace(control.ds_sql, '<DOMAIN_ID>', cast(self.domain_id as varchar));

                  } else if ((BMK.WA.node_type(self.bNode) = 's') and (BMK.WA.node_id(self.bNode) <> 0)) {
                    declare data any;

                    data := (select SF_DATA from BMK.WA.SFOLDER where SF_DOMAIN_ID = self.domain_id and SF_ID = BMK.WA.node_id(self.bNode));
                    control.ds_sql := BMK.WA.sfolder_sql (self.domain_id, self.account_id, data);

                  } else if ((BMK.WA.node_type (self.bNode) = 't') and not is_empty_or_null (BMK.WA.node_suffix (self.bNode))) {
                    declare data any;

                    BMK.WA.xml_set('tags', data, BMK.WA.node_suffix(self.bNode));
                    control.ds_sql := BMK.WA.sfolder_sql (self.domain_id, self.account_id, data);
                  }

                  self.sortChange(get_keyword('sortColumn', e.ve_params, ''));
                  control.ds_sql := concat (control.ds_sql, ' order by _TYPE, ', self.n_order, ' ', self.n_direction, ', _ID');
                _end:;
                ]]>
              </v:before-data-bind>
            </v:data-source>

            <v:data-set name="ds" data-source="self.dsrc" scrollable="1">

              <v:template name="ds_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                <table id="bookmarks" style="width: 100%;" cellspacing="0">
                  <thead class="sortHeader">
                    <tr>
                       <v:template type="simple" enabled="--either(equ(self.account_role, 'public'), 0, 1)">
                        <th class="checkbox" width="1%">
                          <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                        </th>
                       </v:template>
                      <th width="1%" class="last">&nbsp;</th>
                      <th>
                        <?vsp self.sortColumn('Name', '_NAME'); ?>
                      </th>
                    </tr>
                  </thead>
                </table>
              </v:template>

              <v:template name="ds_repeat" type="repeat" name-to-remove="" set-to-remove="">

                <v:template name="ds_browse" type="browse" name-to-remove="table" set-to-remove="both">
                  <table>
                    <tr>
                       <v:template type="simple" enabled="--either(equ(self.account_role, 'public'), 0, 1)">
                        <td align="center">
                          <?vsp
                            declare S varchar;

                            S := '';
                            if (self.bLocation = ((control.vc_parent) as vspx_row_template).te_column_value('_NODE'))
                              S := 'checked="checked"';

                            http (sprintf ('<input type="checkbox" name="cb_item" value="%s" %s onclick="selectCheck(this, \'cb_item\')"/>', ((control.vc_parent) as vspx_row_template).te_column_value('_NODE'), S));
                          ?>
                        </td>
                       </v:template>
                      <td>
                        <?vsp
                          declare node, image, alt any;

                          node := (control as vspx_row_template).te_column_value('_NODE');
                          if (BMK.WA.node_type(node) = 'f') {
                            image := 'image/folder_16.png';
                            alt := 'Folder';
                          } else if (BMK.WA.node_type(node) = 'b') {
                            image := 'image/web_16.png';
                            alt := 'Bookmark';
                          } else if (BMK.WA.node_type(node) = 's') {
                            image := 'image/sfolder_16.jpg';
                            alt := 'Smart Folder';
                          }
                          http(sprintf('<img src="%s" border="0" alt="%s" width="16"/>', image, alt));
                        ?>
                      </td>
                      <td>
                        <v:button action="simple"
                                  style="url"
                                  value="--BMK.WA.stringCut((control.vc_parent as vspx_row_template).te_column_value('_NAME'), self.chars)"
                                  enabled="--case when (BMK.WA.node_type((control.vc_parent as vspx_row_template).te_column_value('_NODE')) = 'b') then 0 else 1 end"
                                  xhtml_title="--BMK.WA.utf2wide((control.vc_parent as vspx_row_template).te_column_value('_NAME'))">
                          <v:on-post>
                            <![CDATA[
                              self.bMode := 'browse';
                              self.bNode := (control.vc_parent as vspx_row_template).te_column_value('_NODE');
                              self.vc_data_bind (e);
                           ]]>
                          </v:on-post>
                        </v:button>
                        <v:url value="--BMK.WA.stringCut((control.vc_parent as vspx_row_template).te_column_value('_NAME'), self.chars)"
                               url="--(control.vc_parent as vspx_row_template).te_column_value('_URI')"
                               format="%s"
                               enabled="--case when (BMK.WA.node_type((control.vc_parent as vspx_row_template).te_column_value('_NODE')) = 'b') then 1 else 0 end"
                               xhtml_title="--BMK.WA.utf2wide((control.vc_parent as vspx_row_template).te_column_value('_NAME'))"/>
                      </td>
                    </tr>
                  </table>
                </v:template>

              </v:template>

              <v:template name="ds_footer" type="simple" name-to-remove="table" set-to-remove="top">
                <table>
                </table>
              </v:template>

            </v:data-set>
            <script type="text/javascript">
              <![CDATA[
                coloriseTable('bookmarks');

                var objForm = document.forms['F1'];
                for (var i = 0; i < objForm.elements.length; i++) {
                  var o = objForm.elements[i];
                  if (o != null && o.type == 'checkbox' && !o.disabled && o.name.indexOf ('cb_item') != -1)
                    coloriseRow(getParent(o, 'tr'), o.checked);
                }
                enableToolbars (objForm, 'cb_item');
              ]]>
            </script>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'import') then 1 else 0 end">
            <div class="new-form-header">
              <v:label format="%s" value="Import bookmark(s)"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="i_file" value="Source"/>
                  </th>
                  <td width="1%" nowrap="nowarap">
                    <input type="radio" name="i_source" id="i_source_0" value="0" checked="checked" /><xsl:call-template name="nbsp"/><b><vm:label for="i_source_0" value="--'File'" /></b>
                  </td>
                  <td>
                    <input type="file" name="i_file" onchange="javascript: F1.i_source[0].checked=true;" onfocus="javascript: F1.i_source[0].checked=true;" size="40"/>
                  </td>
                </tr>
                <tr>
                  <th />
                  <td nowrap="nowarap">
                    <input type="radio" name="i_source" id="i_source_1" value="1" /><xsl:call-template name="nbsp"/><b><vm:label for="i_source_1" value="--'WebDAV'" /></b>
                  </td>
                  <td>
                    <v:text name="i_dav" value="--''" xhtml_onfocus="javascript: F1.i_source[1].checked=true;" xhtml_size="40"/><v:browse-button value="Browse..."
                      selector="popup_browser.vspx"
                      child-window-options="scrollbars=auto, resizable=yes, menubar=no, height=600, width=800"
                      browser-options="--sprintf('list_type=details&amp;path=%s&amp;browse_type=res&amp;style_css=css/dav.css&amp;w_title=DAV Browser&amp;title=DAV Browser&amp;lang=en&amp;retname=i_dav', BMK.WA.dav_home(self.account_id))">
                      <v:field name="i_dav" />
                    </v:browse-button>
                  </td>
                </tr>
                <tr>
                  <th />
                  <td nowrap="nowarap">
                    <input type="radio" name="i_source" id="i_source_2" value="2" /><xsl:call-template name="nbsp"/><b><vm:label for="i_source_2" value="--'del.icio.us'" /></b>
                  </td>
                  <td />
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Import" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    declare S, uri any;

                    S := '';
                    if (get_keyword ('i_source', self.vc_page.vc_event.ve_params, '-1') = '0') {
                    S := trim(get_keyword('i_file', self.vc_page.vc_event.ve_params, ''));
                    } else if (get_keyword ('i_source', self.vc_page.vc_event.ve_params, '-1') = '1') {
                      uri := trim(get_keyword('i_dav', self.vc_page.vc_event.ve_params, ''));
                      if (uri not like concat(BMK.WA.dav_home(self.account_id),'%')) {
                        self.vc_error_message := sprintf('Please select file from your home directory ''%s''', BMK.WA.dav_home(self.account_id));
                        self.vc_is_valid := 0;
                        return;
                      }
                      uri := concat(BMK.WA.host_url(), uri);
                      S := BMK.WA.dav_content(uri);
                      if (isnull(S)) {
                        self.vc_error_message := 'Bad import source';
                        self.vc_is_valid := 0;
                        return;
                      }
                    } else if (get_keyword ('i_source', self.vc_page.vc_event.ve_params, '-1') = '2') {
                      declare deliciousUser, deliciousPwd, errorMsg varchar;
                      declare settings, hdr, V any;

                      settings := BMK.WA.settings(self.account_id);
                      deliciousUser := get_keyword('deliciousUser', settings, '');
                      deliciousPwd := get_keyword('deliciousPwd', settings, '');

                      declare exit handler for sqlstate '*'
                      {
                        self.vc_error_message := 'Cannot connect to del.icio.us server';
                        self.vc_is_valid := 0;
                        return;
                      };
  		                commit work;
                      S := http_get('http://del.icio.us/api/posts/all?', hdr, 'POST', sprintf ('Content-Type: text/xml\r\nDepth: 1\r\nAuthorization: Basic %s', encode_base64 (concat(deliciousUser, ':', deliciousPwd))));
                      V := xml_tree_doc (xml_tree (S, 2));
                      errorMsg := xpath_eval('string(//title)', V);
                      if (errorMsg is not null and errorMsg <> '') {
                        self.vc_error_message := errorMsg;
                        self.vc_is_valid := 0;
                        return;
                    }
                    }

                    self.v_folder_id := null;
                    if (BMK.WA.node_type(self.bNode) = 'f')
                      self.v_folder_id := BMK.WA.node_id(self.bNode);
                    BMK.WA.bookmark_import(self.domain_id, self.account_id, self.v_folder_id, S);

                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'export') then 1 else 0 end">
            <div class="new-form-header">
              <v:label format="%s" value="Export bookmark(s)"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th rowspan="2" valign="top">
                    <v:label for="e_format" value="Format"/>
                  </th>
                  <td>
                    <input type="radio" name="e_format" id="e_format_0" value="Netscape" checked="checked" onclick="changeExportName('e_file', '.xbel', '.html');"/><xsl:call-template name="nbsp"/><label for="e_format_0">Netscape</label>
                  </td>
                </tr>
                <tr>
                  <td>
                    <input type="radio" name="e_format" id="e_format_1" value="XBEL" onclick="changeExportName('e_file', '.html', '.xbel');"/><xsl:call-template name="nbsp"/><label for="e_format_1">XBEL</label>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="e_file" value="File name"/>
                  </th>
                  <td>
                    <input type="text" name="e_file" value="Bookmarks.html" size="40"/>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Export" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_redirect(sprintf('export.vspx?did=%d&output=BMK&file=%V&format=%s', self.domain_id, get_keyword('e_file', e.ve_params), get_keyword('e_format', e.ve_params)));
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'tag') then 1 else 0 end">
            <div class="new-form-header">
              <v:label format="%s" value="Tag bookmark(s)"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="t_tag" value="Tag"/>
                  </th>
                  <td>
                    <v:text name="t_tag" null-value="--''" value="--self.v_tag" xhtml_size="60"/>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Tag" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.v_tag := BMK.WA.tag_prepare(self.t_tag.ufl_value);
            			  if (not BMK.WA.validate_tags(self.v_tag)) {
            			    self.vc_is_valid := 0;
            			    self.vc_error_message := 'The expression is not valid tag.';
            			    return;
            			  }
                    declare N integer;
                    declare tmp any;

                    for (N := 0; N < length(self.bNodes); N := N + 1) {
                      tmp := (select BD_BOOKMARK_ID from BMK.WA.BOOKMARK_DOMAIN where BD_ID = BMK.WA.node_id(self.bNodes[N]));
                      self.v_tags := BMK.WA.tags_select(self.domain_id, self.account_id, tmp);
                      self.v_tags := BMK.WA.tags_join(self.v_tags, self.v_tag);
                      BMK.WA.bookmark_tags(self.domain_id, self.account_id, tmp, self.v_tags);
                    }

                    self.v_tag := '';
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.v_tag := '';
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'move') then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                self.v_folder_id := get_keyword('m_folder_id', self.vc_page.vc_event.ve_params, '');
                self.v_folder_name := get_keyword('m_folder_name', self.vc_page.vc_event.ve_params, '');
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label format="%s" value="Move"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="m_folder_name" value="Move to folder"/>
                  </th>
                  <td>
                    <v:text name="m_folder_name" null-value="''" value="--self.v_folder_name" xhtml_class="textbox" xhtml_size="40"/>
                    <v:select-list name="m_folder_id">
                      <v:before-data-bind>
                        <![CDATA[
                          declare N integer;

                          (control as vspx_select_list).vsl_items:= vector ();
                          (control as vspx_select_list).vsl_item_values:= vector ();
                          (control as vspx_select_list).vsl_selected_inx := 0;
                          (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector ('Select folder ...'));
                          (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector ('0'));
                          for (select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH) do {
                            for (N := 0; N < length(self.bNodes); N := N + 1) {
                              if ((BMK.WA.node_type(self.bNodes[N]) = 'f') and (F_PATH like concat(BMK.WA.folder_path(self.domain_id, BMK.WA.node_id(self.bNodes[N])), '%')))
                                goto _skip;
                            }
                            (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector (F_PATH2));
                            (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector (cast(F_ID as varchar)));
                          _skip:;
                          }
                        ]]>
                      </v:before-data-bind>
                    </v:select-list>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Move" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    declare tmp any;

                    declare exit handler for SQLSTATE '*' {
                      if (__SQL_STATE = 'TEST') {
                        self.vc_error_message := BMK.WA.test_clear(__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };
                    declare N integer;

                    self.v_folder_id := self.m_folder_id.ufl_value;
                    self.v_folder_name := trim(self.m_folder_name.ufl_value);
                    if ((self.v_folder_name <> '') and (not BMK.WA.folder_check_name(self.v_folder_name, 1))) {
                      self.vc_error_message := 'Please, enter other folder name. This name conatins bad characters.';
                     	self.vc_is_valid := 0;
                  		return;
                    }

                    self.v_folder_id := BMK.WA.folder_create(self.domain_id, self.v_folder_name, self.v_folder_id);

                    for (N := 0; N < length(self.bNodes); N := N + 1) {
                      if (BMK.WA.node_type(self.bNodes[N]) = 'f') {
                        BMK.WA.folder_parent(self.domain_id, BMK.WA.node_id(self.bNodes[N]), self.v_folder_id);
                      } else if (BMK.WA.node_type(self.bNodes[N]) = 'b') {
                        BMK.WA.bookmark_parent(BMK.WA.node_id(self.bNodes[N]), self.v_folder_id);
                      }
                    }

                    self.v_folder_id := 0;
                    self.v_folder_name := '';
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.v_folder_id := 0;
                    self.v_folder_name := '';
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when (self.bMode = 'rename') then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                declare exit handler for not found goto _end;

                if (isnull(get_keyword('r_name', self.vc_page.vc_event.ve_params))) {
                  if (BMK.WA.node_type(self.v_id) = 'b') {
                    self.v_name := (select BD_NAME from BMK.WA.BOOKMARK_DOMAIN where BD_ID = BMK.WA.node_id(self.v_id));
                  } else if (BMK.WA.node_type(self.v_id) = 'f') {
                    self.v_name := (select F_NAME from BMK.WA.FOLDER where F_ID = BMK.WA.node_id(self.v_id));
                  } else if (BMK.WA.node_type(self.v_id) = 's') {
                    self.v_name := (select SF_NAME from BMK.WA.SFOLDER where SF_ID = BMK.WA.node_id(self.v_id));
                  }
                  self.v_oldName := self.v_name;
                  return;
                }

              _end:
                self.v_name := get_keyword('r_name', self.vc_page.vc_event.ve_params, '');
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label format="%s" value="Rename"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label value="Old Name"/>
                  </th>
                  <td>
                    <v:label value="--self.v_oldName"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="r_name" value="New Name"/>
                  </th>
                  <td>
                    <v:text name="r_name" null-value="--''" value="--self.v_name" xhtml_size="60"/>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Rename" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    declare tmp any;

                    declare exit handler for SQLSTATE '*' {
                      if (__SQL_STATE = 'TEST') {
                        self.vc_error_message := BMK.WA.test_clear(__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };

                    self.v_name := trim(self.r_name.ufl_value);
                    if (BMK.WA.node_type(self.v_id) = 'b') {
                      BMK.WA.test(self.v_name, vector('name', 'Bookmark', 'class', 'varchar', 'type', 'varchar', 'minLength', 1, 'maxLength', 60));
                      update BMK.WA.BOOKMARK_DOMAIN set BD_NAME = self.v_name where BD_ID = BMK.WA.node_id(self.v_id);

                    } else if (BMK.WA.node_type(self.v_id) = 'f') {
                      BMK.WA.test(self.v_name, vector('name', 'Folder name', 'class', 'folder', 'type', 'varchar', 'minLength', 1, 'maxLength', 60));
                      self.v_parent_id := (select F_PARENT_ID from BMK.WA.FOLDER where F_ID = BMK.WA.node_id(self.v_id));
                      if (BMK.WA.folder_check_unique(self.domain_id, self.v_parent_id, self.v_name, BMK.WA.node_id(self.v_id)))
                        signal('TEST', 'Folder name already exists. Please, enter new name!<>');
                      update BMK.WA.FOLDER set F_NAME = self.v_name where F_ID = BMK.WA.node_id(self.v_id);

                    } else if (BMK.WA.node_type(self.v_id) = 's') {
                      BMK.WA.test(self.v_name, vector('name', 'Smart folder name', 'class', 'folder', 'type', 'varchar', 'minLength', 1, 'maxLength', 60));
                      tmp := coalesce((select SF_ID from BMK.WA.SFOLDER where SF_DOMAIN_ID = self.domain_id and SF_NAME = self.v_name), -1);
                      if ((tmp <> BMK.WA.node_id(self.v_id)) and (tmp <> -1))
                        signal('TEST', 'Smart folder name already exists. Please, enter new name!<>');
                      update BMK.WA.SFOLDER set SF_NAME = self.v_name where SF_ID = BMK.WA.node_id(self.v_id);
                    }

                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when ((self.bMode = 'Bookmark/Create') or (self.bMode = 'Bookmark/Properties')) then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                declare exit handler for not found goto _end;

                if (isnull(get_keyword('b_name', self.vc_page.vc_event.ve_params))) {
                  declare tmp any;

                  select BD_BOOKMARK_ID,
                         B_URI,
                         BD_NAME,
                         BD_DESCRIPTION,
                         BD_FOLDER_ID
                    into tmp,
                         self.v_uri,
                         self.v_name,
                         self.v_description,
                         self.v_folder_id
                    from BMK.WA.BOOKMARK_DOMAIN,
                         BMK.WA.BOOKMARK
                   where BD_DOMAIN_ID = self.domain_id
                     and BD_ID = self.v_id
                     and BD_BOOKMARK_ID = B_ID;

                  self.v_tag := '';
                  self.v_tags := BMK.WA.tags_select(self.domain_id, self.account_id, tmp);
                  self.v_folder_name := '';
                  self.bMode := 'Bookmark/Properties';
                  return;
                }

                if (get_keyword('dtag', self.vc_page.vc_event.ve_params, '') <> '')
                  self.v_tags := BMK.WA.tag_delete(self.v_tags, cast(get_keyword('dtag', self.vc_page.vc_event.ve_params, '0') as integer));

              _end:
                self.v_uri := get_keyword('b_uri', self.vc_page.vc_event.ve_params, get_keyword('URI', self.vc_page.vc_event.ve_params, 'http://'));
                self.v_name := get_keyword('b_name', self.vc_page.vc_event.ve_params, get_keyword('TITLE', self.vc_page.vc_event.ve_params, ''));
                self.v_description := get_keyword('b_description', self.vc_page.vc_event.ve_params, '');
                self.v_tag := get_keyword('b_tag', params, '');
                self.v_folder_id := 0;
                if (BMK.WA.node_type(self.bNode) = 'f')
                  self.v_folder_id :=BMK.WA.node_id(self.bNode);
                self.v_folder_id := get_keyword('b_folder_id', self.vc_page.vc_event.ve_params, self.v_folder_id);
                self.v_folder_name := get_keyword('b_folder_name', self.vc_page.vc_event.ve_params, '');
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label format="%s" value="--self.bMode"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="b_name" value="Name"/>
                  </th>
                  <td>
                    <v:text name="b_name" null-value="--''" value="--BMK.WA.utf2wide(self.v_name)" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="b_uri" value="Link"/>
                  </th>
                  <td>
                    <v:text name="b_uri" null-value="--''" value="--self.v_uri" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="b_tag" value="Tags"/>
                  </th>
                  <td>
                    <v:text name="b_tag" null-value="''" value="--self.v_tag" xhtml_class="textbox" xhtml_size="20%"/>
                    <v:button action="simple" style="image" value="image/add_16.png" xhtml_alt="Add Tag">
                      <v:on-post>
                        <![CDATA[
                          declare tag_id integer;

                          self.v_tag := BMK.WA.tag_prepare(self.b_tag.ufl_value);
            			        if (not BMK.WA.validate_tags(self.v_tag)) {
            			          self.vc_is_valid := 0;
            			          self.vc_error_message := 'The expression is not valid tag.';
            			          return;
            			        }
                          self.v_tags := BMK.WA.tags_join(self.v_tags, self.v_tag);
                          self.vc_data_bind(e);
                          self.b_tag.ufl_value := '';
               		      ]]>
               		    </v:on-post>
                    </v:button>
                    <?vsp
                      declare i integer;
                      declare tags any;

                      tags := BMK.WA.tags2vector(self.v_tags);
                      for (i := 0; i < length(tags); i := i + 1) {
                        http(sprintf(', %s ', tags[i]));
                        http(sprintf('<a href="#" onclick="javascript: myPost(\'F1\', \'dtag\', \'%d\'); return false"><img src="image/del_16.png" border="0" alt="Delete Tag" title="Delete Tag" /></a>', i));
                      }
                    ?>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="b_description" value="Description"/>
                  </th>
                  <td>
                    <v:textarea name="b_description" null-value="--''" value="--BMK.WA.utf2wide(self.v_description)" xhtml_cols="50" xhtml_rows="8"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="b_folder_name" value="Folder"/>
                  </th>
                  <td>
                    <v:text name="b_folder_name" null-value="''" value="--self.v_folder_name" xhtml_class="textbox" xhtml_size="40%"/>
                    <v:data-list name="b_folder_id" value="--self.v_folder_id" sql="select 0 as F_ID, 'Select folder ...' as F_PATH2, '' as F_PATH from WS.WS.SYS_DAV_USER where U_NAME = 'dav' union all select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH" key-column="F_ID" value-column="F_PATH2" xhtml_class="select"/>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Save" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    if (not ((self.bMode = 'Bookmark/Create') or (self.bMode = 'Bookmark/Properties')))
                      return;

                    declare tmp any;

                    declare exit handler for SQLSTATE '*' {
                      if (__SQL_STATE = 'TEST') {
                        self.vc_error_message := BMK.WA.test_clear(__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };

                    self.v_name := BMK.WA.test(self.b_name.ufl_value, vector('name', 'Bookmark Name', 'class', 'varchar', 'type', 'varchar', 'minLength', 1, 'maxLength', 60));
                    self.v_uri := BMK.WA.test(self.b_uri.ufl_value, vector('name', 'Bookmark Link', 'class', 'uri', 'type', 'varchar', 'minLength', 1, 'maxLength', 100));
                    self.v_folder_id := self.b_folder_id.ufl_value;
                    self.v_folder_name := trim(self.b_folder_name.ufl_value);
                    if ((self.v_folder_name <> '') and (not BMK.WA.folder_check_name(self.v_folder_name, 1))) {
                      self.vc_error_message := 'Please, enter other folder name. This name conatins bad characters.';
                     	self.vc_is_valid := 0;
                  		return;
                    }

                    self.v_folder_id := BMK.WA.folder_create(self.domain_id, self.v_folder_name, self.v_folder_id);
                    tmp := BMK.WA.bookmark_update(self.v_id, self.domain_id, self.v_uri, self.v_name, self.v_description, self.v_folder_id);
                    tmp := (select BD_BOOKMARK_ID from BMK.WA.BOOKMARK_DOMAIN where BD_ID = tmp);
                    BMK.WA.bookmark_tags(self.domain_id, self.account_id, tmp, self.v_tags);

                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when ((self.bMode = 'Folder/Create') or (self.bMode = 'Folder/Update')) then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                 declare exit handler for not found goto _end;

                if (isnull(get_keyword('f_name', self.vc_page.vc_event.ve_params))) {
                  select F_PARENT_ID,
                         F_NAME
                    into self.v_parent_id,
                         self.v_name
                    from BMK.WA.FOLDER
                   where F_DOMAIN_ID = self.domain_id
                     and F_ID = self.v_id;

                  self.bMode := 'Folder/Update';
                  return;
                }

              _end:
                self.v_parent_id := 0;
                if (BMK.WA.node_type(self.bNode) = 'f')
                  self.v_parent_id := BMK.WA.node_id(self.bNode);
                self.v_parent_id := cast (get_keyword ('f_parent_id', self.vc_page.vc_event.ve_params, self.v_parent_id) as integer);
                self.v_name := get_keyword ('f_name', self.vc_page.vc_event.ve_params, '');
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label format="%s" value="--self.bMode"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="f_parent" value="Parent folder"/>
                  </th>
                  <td>
                    <v:select-list name="f_parent_id">
                      <v:before-data-bind>
                        <![CDATA[
                          declare S integer;

                          S := '!@#';
                          if (self.v_id <> 0)
                            S := BMK.WA.folder_path (self.domain_id, self.v_id);
                          (control as vspx_select_list).vsl_items:= vector ();
                          (control as vspx_select_list).vsl_item_values:= vector ();
                          (control as vspx_select_list).vsl_selected_inx := 0;
                          (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector ('Select folder ...'));
                          (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector ('0'));
                          for (select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH) do {
                            if (F_PATH like concat (S, '%'))
                              goto _skip;
                            (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector (F_PATH2));
                            (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector (cast(F_ID as varchar)));
                          _skip:;
                          }
                        ]]>
                      </v:before-data-bind>
                      <v:after-data-bind>
                        <![CDATA[
                          declare N integer;

                          N := 0;
                          foreach (any item in (control as vspx_select_list).vsl_item_values) do {
                            if (item = cast (self.v_parent_id as varchar))
                              (control as vspx_select_list).vsl_selected_inx := N;
                            N := N + 1;
                          }
                        ]]>
                      </v:after-data-bind>
                    </v:select-list>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="f_name" value="Folder name"/>
                  </th>
                  <td>
                    <v:text name="f_name" null-value="--''" value="--BMK.WA.utf2wide (self.v_name)" xhtml_size="60"/>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Save" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    if (not ((self.bMode = 'Folder/Create') or (self.bMode = 'Folder/Update')))
                      return;

                    declare exit handler for SQLSTATE '*' {
                      if (__SQL_STATE = 'TEST') {
                        self.vc_error_message := BMK.WA.test_clear (__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };

                    self.v_name := BMK.WA.test (self.f_name.ufl_value, vector ('name', 'Folder name', 'class', 'folder', 'type', 'varchar', 'minLength', 1, 'maxLength', 60));
                    self.v_parent_id := cast (self.f_parent_id.ufl_value as integer);
                    if (self.v_parent_id = 0)
                      self.v_parent_id := null;

                    if (BMK.WA.folder_check_unique (self.domain_id, self.v_parent_id, self.v_name, self.v_id))
                      signal('TEST', 'Folder name already exists. Please, enter new name!<>');

                    if ((self.bMode <> 'Folder/Create') and BMK.WA.folder_check_parent(self.domain_id, self.v_id, self.v_parent_id))
                      signal('TEST', 'Please, enter other parent folder. This folder is superior of the selected parent folder!<>');

                    if (self.bMode = 'Folder/Create') {
                      BMK.WA.folder_create2(self.domain_id, self.v_parent_id, self.v_name);
                    } else {
                      update BMK.WA.FOLDER
                         set F_PARENT_ID = self.v_parent_id,
                             F_NAME = self.v_name
                       where F_ID = self.v_id;
                    }
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

          <v:template type="simple" enabled="--case when ((self.bMode = 'Smart Folder/Create') or (self.bMode = 'Smart Folder/Update')) then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                 declare exit handler for not found goto _end;

                if (isnull(get_keyword('f_name', self.vc_page.vc_event.ve_params))) {
                  declare data any;

                  select SF_NAME,
                         SF_DATA
                    into self.v_name,
                         data
                    from BMK.WA.SFOLDER
                   where SF_DOMAIN_ID = self.domain_id
                     and SF_ID = self.v_id;

                  self.v_keywords := BMK.WA.xml_get('keywords', data);
                  self.v_expression := BMK.WA.xml_get('expression', data);
                  self.v_tags := BMK.WA.xml_get('tags', data);
                  self.v_folder_id := BMK.WA.xml_get('folder', data);
                  self.bMode := 'Smart Folder/Update';
                  return;
                }

              _end:
                self.v_name := get_keyword('s_name', self.vc_page.vc_event.ve_params, '');
                self.v_keywords := trim(get_keyword('s_keywords', self.vc_page.vc_event.ve_params, ''));
                self.v_expression := trim(get_keyword('s_expression', self.vc_page.vc_event.ve_params, ''));
                self.v_tags := trim(get_keyword('s_tags', self.vc_page.vc_event.ve_params, ''));
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label format="%s" value="--self.bMode"/>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="s_name" value="Smart folder name" />
                  </th>
                  <td>
                    <v:text name="s_name" null-value="--''" value="--self.v_name" xhtml_class="textbox" xhtml_size="60" />
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="s_keywords" value="Space delimited keyword list" />
                  </th>
                  <td>
                    <v:text name="s_keywords" value="--self.v_keywords" xhtml_class="textbox" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="" value="or expression" />
                  </th>
                  <td>
            			  <v:textarea name="s_expression" value="--self.v_expression" xhtml_rows="2" xhtml_cols="50"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="s_tags" value="Comma delimited tags" />
                  </th>
                  <td>
                    <v:text name="s_tags" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="s_folder" value="Folder"/>
                  </th>
                  <td>
                    <v:data-list name="s_folder_id" value="--self.v_folder_id" sql="select 0 as F_ID, 'Select folder ...' as F_PATH2, '' as F_PATH from WS.WS.SYS_DAV_USER where U_NAME = 'dav' union all select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH" key-column="F_ID" value-column="F_PATH2" xhtml_class="select"/>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
              <v:button action="simple" value="Save" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    if (not ((self.bMode = 'Smart Folder/Create') or (self.bMode = 'Smart Folder/Update')))
                      return;

                    declare tmp any;

                    declare exit handler for SQLSTATE '*' {
                      if (__SQL_STATE = 'TEST') {
                        self.vc_error_message := BMK.WA.test_clear(__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };

                    self.v_name := trim(self.s_name.ufl_value);
                    self.v_keywords := trim(self.s_keywords.ufl_value);
                    self.v_expression := trim(self.s_expression.ufl_value);
                    self.v_tags := trim(self.s_tags.ufl_value);
                    self.v_folder_id := cast(self.s_folder_id.ufl_value as integer);

                    BMK.WA.test(self.v_name, vector('name', 'Smart folder name', 'class', 'folder', 'type', 'varchar', 'minLength', 1, 'maxLength', 60));
                    tmp := coalesce((select SF_ID from BMK.WA.SFOLDER where SF_DOMAIN_ID = self.domain_id and SF_NAME = self.v_name), '');
                    if (((self.bMode = 'Smart Folder/Create') and (tmp <> '')) or ((self.bMode = 'Smart Folder/Update') and (tmp <> self.v_id) and (tmp <> '')))
                      signal('TEST', 'Smart folder name already exists. Please, enter new ''Smart folder name''!<>');
                    BMK.WA.test(self.v_keywords, vector('name', 'Keywords', 'class', 'free-text'));
                    BMK.WA.test(self.v_expression, vector('name', 'Expression', 'class', 'free-text-expression'));
                    BMK.WA.test(self.v_tags, vector('name', ' Tags', 'class', 'tags'));

                    tmp := BMK.WA.ft2vector(self.v_keywords);
                    tmp := BMK.WA.vector_unique(tmp, 2);
                    self.v_keywords := BMK.WA.vector2str(tmp);

                    tmp := BMK.WA.tags2vector(self.v_tags);
                    tmp := BMK.WA.vector_unique(tmp, 2);
                    self.v_tags := BMK.WA.vector2tags(tmp);

                    declare data varchar;

                    BMK.WA.xml_set('keywords', data, self.v_keywords);
                    BMK.WA.xml_set('expression', data, self.v_expression);
                    BMK.WA.xml_set('tags', data, self.v_tags);
                    if ((self.v_folder_id <> '0') and (self.v_folder_id <> '0'))
                      BMK.WA.xml_set('folder', data, self.v_folder_id);
                    data := BMK.WA.xml2string(data);

                    if (self.bMode = 'Smart Folder/Create') {
                      self.v_id := BMK.WA.sfolder_create(self.domain_id, self.v_name, data);
                    } else {
                      BMK.WA.sfolder_update(self.domain_id, self.v_id, self.v_name, data);
                    }
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.bMode := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

        </div>
      </div>
      <?vsp
        if (self.bBookmark is not null) {
          http ('\n<script type="text/javascript">\n');
          http (sprintf ('location.hash = "%s";\n', self.bBookmark));
          http ('</script>\n');
        }
      ?>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
