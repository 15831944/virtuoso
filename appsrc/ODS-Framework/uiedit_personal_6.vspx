<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2006 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="user_edit_buss"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
        style="index.xsl"
        xmlns:xhtml="http://www.w3.org/1999/xhtml"
        xmlns:vm="http://www.openlinksw.com/vspx/ods/"
        xmlns:v="http://www.openlinksw.com/vspx/">

  <v:method name="favorites2json" arglist="">
    <![CDATA[
      declare fID, fOntology, fItems any;
      declare fItemTypes vector;

      fID := 0;
      fOntology := '';
      fItemTypes := vector ();
      fItems := vector ();
      for (select WUF_ID, WUF_TYPE, WUF_CLASS, deserialize (WUF_PROPERTIES) WUF_PROPERTIES from DB.DBA.WA_USER_FAVORITES where WUF_U_ID = self.u_id order by WUF_TYPE) do
      {
        if (fOntology <> WUF_TYPE)
        {
          if (fOntology <> '')
            fItemTypes := vector_concat (fItemTypes, vector (vector_concat (self.jsonObject(), vector ('id', cast (fID as varchar), 'ontology', fOntology, 'items', fItems))));
          fID := fID + 1;
          fOntology := WUF_TYPE;
          fItems := vector ();
        }
        fItems := vector_concat (fItems, vector (vector_concat (self.jsonObject(), vector ('id', cast (WUF_ID as varchar), 'className', WUF_CLASS, 'properties', WUF_PROPERTIES))));
      }
      if (length (fItems))
        fItemTypes := vector_concat (fItemTypes, vector (vector_concat (self.jsonObject(), vector ('id', cast (fID as varchar), 'ontology', fOntology, 'items', fItems))));
      return ODS..obj2json (fItemTypes, 10);
	  ]]>
	</v:method>

  <v:method name="savePersonal_6" arglist="">
    <![CDATA[
      if (self.vc_is_valid = 0)
        return;

      declare params any;
      declare N, M, L integer;
      declare re, reParts any;
      declare ontologies, IDs any;
      declare ontology, ontologyNo, ontologyName, ontologyItems any;
      declare item, itemID, itemNo, itemName, itemProperties any;
      declare property, propNo, propName, propValue, propType any;

      params := self.vc_page.vc_event.ve_params;
      IDs := vector ();
      ontologies := vector ();
      for (N := 0; N < length (params); N := N + 4)
      {
        if (not isstring(params[N+1]) or trim (params[N+1]) = '')
          goto _skip;
        re := 'r_fld_2_([0-9]+)';
        if (regexp_like(params[N], re))
        {
          reParts := regexp_parse(re, params[N], 0);
          ontologyNo := subseq (params[N], reParts[2], reParts[3]);
          ontologyName := trim (params[N+1]);
          ontologyItems := vector ();
          for (M := 0; M < length (params); M := M + 4)
          {
            if (not isstring(params[M+1]) or trim (params[M+1]) = '')
              goto _skip2;
            re := 'r_item_'||ontologyNo||'_fld_2_([0-9]+)';
            if (regexp_like(params[M], re))
            {
              reParts := regexp_parse(re, params[M], 0);
              itemNo := subseq (params[M], reParts[2], reParts[3]);
              itemName := trim (params[M+1]);
              itemID := cast (get_keyword ('r_item_'||ontologyNo||'_fld_1_'||itemNo, params, -1) as integer);
              if (itemID <> -1)
                IDs := vector_concat (IDs, vector (itemID));
              itemProperties := vector ();
              for (L := 0; L < length (params); L := L + 4)
              {
                if (not isstring(params[L+1]) or trim (params[L+1]) = '')
                  goto _skip3;
                re := 'r_item_'||ontologyNo||'_prop_'||itemNo||'_fld_1_([0-9]+)';
                if (regexp_like(params[L], re))
                {
                  reParts := regexp_parse(re, params[L], 0);
                  propNo := subseq (params[L], reParts[2], reParts[3]);
                  propName := trim (params[L+1]);
                  propValue := get_keyword ('r_item_'||ontologyNo||'_prop_'||itemNo||'_fld_2_'||propNo, params);
                  propType := get_keyword ('r_item_'||ontologyNo||'_prop_'||itemNo||'_fld_3_'||propNo, params, 'data');
                  property := vector_concat (self.jsonObject(), vector ('name', propName, 'value', propValue, 'type', propType));
                  itemProperties := vector_concat (itemProperties, vector (property));
                }
              _skip3:;
              }
              item := vector ('id', itemID, 'className', itemName, 'properties', itemProperties);
              ontologyItems := vector_concat (ontologyItems, vector (item));
            }
          _skip2:;
          }
          ontology := vector ('ontology', ontologyName, 'items', ontologyItems);
          ontologies := vector_concat (ontologies, vector (ontology));
        }
      _skip:;
      }
      delete from DB.DBA.WA_USER_FAVORITES where WUF_U_ID = self.u_id and not ODS.ODS_API.vector_contains(IDs, WUF_ID);
      for (N := 0; N < length (ontologies); N := N + 1)
      {
        ontology := ontologies[N];
        ontologyItems := get_keyword ('items', ontology);
        for (M := 0; M < length (ontologyItems); M := M + 1)
        {
          item := ontologyItems[M];
          itemID := get_keyword ('id', item);
          if (itemID = -1)
          {
            insert into DB.DBA.WA_USER_FAVORITES (WUF_TYPE, WUF_CLASS, WUF_PROPERTIES, WUF_U_ID)
              values (get_keyword ('ontology', ontology), get_keyword ('className', item), serialize (get_keyword ('properties', item)), self.u_id);
          } else {
            update DB.DBA.WA_USER_FAVORITES
               set WUF_TYPE = get_keyword ('ontology', ontology),
                   WUF_CLASS = get_keyword ('className', item),
                   WUF_PROPERTIES = serialize (get_keyword ('properties', item))
             where WUF_ID = itemID;
          }
        }
      }
    ]]>
  </v:method>

  <v:before-data-bind>
    <![CDATA[
      declare tmp any;

      if (e.ve_is_post and e.ve_button = self.page_form)
      {
        self.usr_personal_6.vc_focus := 1;
        self.usr_personal_6.vc_set_childs_focus(1, e);
      }
    ]]>
  </v:before-data-bind>

  <v:form name="usr_personal_6" type="simple" method="POST" action="uiedit.vspx?page=2">
    <div>
      <table class="ctl_grp">
        <tr>
          <td width="800px">
            <table id="r_tbl" class="listing">
              <thead>
                <tr class="listing_header_row">
                  <th>
                    <div style="width: 16px;"><![CDATA[&nbsp;]]></div>
                  </th>
                  <th width="100%">
                    Favorite Type
                  </th>
                  <th width="80px">
                    Action
                  </th>
                </tr>
              </thead>
              <tbody id="r_tbody">
                <tr id="r_tr_no">
                  <td></td>
                  <td colspan="2">
                    <b><i>No Favorite Types</i></b>
          </td>
        </tr>
              </tbody>
      </table>
            <input type="hidden" id="r_no" name="r_no" value="1" />
          </td>
          <td valign="top" nowrap="nowrap">
            <input type="button" value="Add" onclick="javascript: updateRow('r', null, {fld_1: {mode: 12, cssText: 'display: none;'}, fld_2: {mode: 5, labelValue: 'New Type: ', cssText: 'width: 95%;'}, btn_1: {mode: 5, cssText: 'margin-left: 2px; margin-right: 2px;'}, btn_2: {mode: 6, cssText: 'margin-left: 2px; margin-right: 2px;'}});" />
          </td>
        </tr>
      </table>
      <script type="text/javascript">
        <![CDATA[
          ODSInitArray.push ( function () {
            OAT.Loader.loadFeatures(["ajax2", "json", "ws", "combolist"], function(){
              RDF.itemTypes = <?vsp http (self.favorites2json ()); ?>;
              RDF.showItemTypes();
            });
          });
        ]]>
      </script>
      <br />
      <div>
        <v:button name="user_c_personal_6" value="Cancel" action="simple" xhtml_onclick="javascript: return initLoadProfile();">
          <v:on-post>
            self.vc_redirect (sprintf ('uhome.vspx?ufname=%U&amp;l=1', self.u_name));
          </v:on-post>
        </v:button>
        <v:button name="user_s_personal_6" value="Save" action="simple" xhtml_onclick="return validateInputs(this);">
          <v:on-post>
            <![CDATA[
              self.savePersonal_6();
            ]]>
          </v:on-post>
        </v:button>
        <v:button name="user_sn_personal_6" value="Save and Next" action="simple" xhtml_onclick="return validateInputs(this);">
          <v:on-post>
            <![CDATA[
              self.savePersonal_6();
              if (self.vc_is_valid)
   		          self.vc_redirect ('uiedit.vspx?page=2');
            ]]>
          </v:on-post>
        </v:button>
      </div>
    </div>
  </v:form>
</v:page>
