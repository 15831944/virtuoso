<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2006 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="user_edit_pwd"
  doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
  fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
  style="index.xsl"
  xmlns:xhtml="http://www.w3.org/1999/xhtml"
  xmlns:vm="http://www.openlinksw.com/vspx/ods/"
  xmlns:v="http://www.openlinksw.com/vspx/">

    <v:variable persist="0" name="secretq" type="varchar" default="''"/>
    <v:variable persist="0" name="secreta" type="varchar" default="''"/>
    <v:variable persist="0" name="oid_urlv" type="varchar" default="''"/>
  <v:variable persist="0" name="certificate_login" type="integer" default="0"/>
  <v:variable persist="0" name="certificate_content" type="varchar" default="null"/>
    <v:variable persist="0" name="sioc_limit" type="int" default="10"/>
    <v:variable persist="0" name="no_pwd" type="int" default="0"/>
    <v:before-data-bind>
      <![CDATA[
      declare pwd, node_id, tmp varchar;

      SELECT WAUI_SEC_QUESTION,
             WAUI_SEC_ANSWER,
             pwd_magic_calc (U_NAME, U_PASSWORD, 1),
	     WAUI_OPENID_URL,
	           WAUI_CERT_LOGIN,
	     WAUI_CERT
        INTO self.secretq,
             self.secreta,
             pwd,
	     self.oid_urlv,
	           self.certificate_login,
	     self.certificate_content
        FROM WA_USER_INFO,
             DB.DBA.SYS_USERS
       where WAUI_U_ID = U_ID
         and U_NAME = self.u_name;
	self.sioc_limit := coalesce (USER_GET_OPTION (self.u_name, 'SIOC_POSTS_QUERY_LIMIT'), 10);

	tmp := uuid ();
	node_id := subseq (tmp, strrchr (tmp, '-'));
	if (pwd like '%'||node_id and regexp_match ('[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}', pwd) is not null)
	  self.no_pwd := 1;
        else
	  self.no_pwd := 0;
      ]]>
    </v:before-data-bind>

  <v:form name="usr_pwd" type="simple" method="POST" action="uiedit.vspx?page=3">
    <table  class="ctl_grp">
              <tr>
                <td colspan="2" align="left">
                  <h3>Password Settings</h3>
                </td>
              </tr>
	      <?vsp if (not self.no_pwd) { ?>
              <tr>
                <th><label for="opwd1">Old password</label></th>
                <td>
                  <v:text xhtml_id="opwd1" name="opwd1" value="" type="password" error-glyph="*"/>
                </td>
              </tr>
              <?vsp } ?>
              <tr>
                <th><label for="npwd1">New password</label></th>
                <td>
                  <v:text error-glyph="*" name="npwd1" value="" type="password"/>
                </td>
              </tr>
              <tr>
                <th><label for="npwd2">Repeat password</label></th>
                <td>
                  <v:text error-glyph="*" name="npwd2" value="" type="password"/>
                </td>
              </tr>
              <tr>
                <td colspan="2" class="ctrl">
		      <span class="fm_ctl_btn">
                  <v:button name="user_pwd_change1111" value="Change" action="simple">
                    <v:on-post>
			<![CDATA[
			declare pwd_match int;

                  if (self.vc_is_valid = 0)
                    return;

			declare exit handler for not found
			{
			  signal ('22023', 'Internal error, user does not exists');
			};

			select equ (pwd_magic_calc (U_NAME, U_PASSWORD, 1), self.opwd1.ufl_value) into pwd_match
                    from SYS_USERS
                   where U_NAME = self.u_name and U_IS_ROLE = 0;

			if (not pwd_match and not self.no_pwd)
			  {
                    self.opwd1.vc_error_message := sprintf ('The old password for "%s" was not correct.', self.u_name);
			    self.opwd1.ufl_failed := 1;
			    self.npwd1.ufl_failed := 1;
			    self.npwd2.ufl_failed := 1;
			    self.vc_is_valid := 0;
			    self.npwd1.ufl_value := '';
			    self.npwd2.ufl_value := '';
			    self.opwd1.ufl_value := '';
			    return;
		          }

                        if ( length(self.npwd1.ufl_value) < 1 or length(self.npwd1.ufl_value) > 255)
                        {
                          self.npwd1.vc_error_message := 'The password value cannot be empty or to be longer than 255 chars';
                          self.vc_is_valid := 0;
                          return;
                  }
                        if (self.npwd1.ufl_value = self.npwd2.ufl_value and length (self.npwd1.ufl_value))
                        {
			  if (self.no_pwd)
			    {
			      self.opwd1.ufl_value := (SELECT pwd_magic_calc (U_NAME, U_PASSWORD, 1)
			    	FROM DB.DBA.SYS_USERS where U_NAME = self.u_name);
			    }
			  USER_CHANGE_PASSWORD (self.u_name, self.opwd1.ufl_value, self.npwd1.ufl_value);
			    self.opwd1.ufl_value := '';
			  self.msg_msg := 'The password was changed successfully';
			  self.pwd_msg.vc_data_bind (e);
                        }
                        else
                        {
                    self.npwd2.vc_error_message := 'The new values for the password did not match.  Please re-enter all fields.';
                          self.vc_is_valid := 0;
			  self.npwd2.ufl_failed := 1;
			  self.opwd1.ufl_failed := 1;
			  self.npwd2.ufl_failed := 1;
                        }
		        self.npwd1.ufl_value := '';
			self.npwd2.ufl_value := '';
			self.opwd1.ufl_value := '';
                      ]]>
                    </v:on-post>
                  </v:button>
		 </span>
                </td>
              </tr>

              <tr>
                <td colspan="2" align="left">
                  <h3>OpenID</h3>
                </td>
              </tr>
              <tr>
                <th><label for="oid_url1">OpenID URL</label></th>
                <td nowrap="nowrap">
          <v:text error-glyph="*" xhtml_id="oid_url1" name="oid_url1" value="--self.oid_urlv" xhtml_size="100" xhtml_class="_validate_ _url_ _canEmpty_" xhtml_onblur="javascript: validateField(this);" />
                  <div style="display:inline; color:red;"><v:error-summary match="oid_url1" /></div>
                </td>
              </tr>
              <tr>
		<td colspan="2" class="ctrl">
		  <span class="fm_ctl_btn">
            <v:button name="bt_set6" value="Save OpenID" action="simple" xhtml_onclick="return validateInputs(this);">
              <v:on-post>
                <![CDATA[
                  if (self.vc_is_valid = 0)
                    return;

			declare err any;

                  err := ODS..openid_url_set (self.u_id, self.oid_url1.ufl_value);
			if (err is not null)
			  {
                            self.vc_is_valid := 0;
			    self.vc_error_message := err;
			    return;
			  }
                  self.vc_redirect ('uiedit.vspx?page=3');
                      ]]>
                    </v:on-post>
		</v:button>
	    </span>
                </td>
              </tr>

              <tr>
                <td colspan="2" align="left">
                  <h3>Password Recovery</h3>
                </td>
              </tr>
              <tr>
                <th><label for="sec_question">Secret question</label></th>
                <td nowrap="nowrap">
                  <v:text error-glyph="*" name="sec_question" xhtml_id="sec_qst" value="--self.secretq">
                    <v:validator test="length" min="0" max="800" message="Security question cannot be longer then 800 chars" empty-allowed="1" name="vv_secq1"/>
            <v:validator test="sql" expression="length(trim(self.sec_question.ufl_value)) > 800" name="vv_secq2" message="Security question cannot be longer then 800 chars"/>
                  </v:text>
                  <script type="text/javascript">
                      function setSecQuestion()
                      {
                        var S = document.getElementById('dummy_1233211_dummy');
                        var V = S[S.selectedIndex].value;

                        document.getElementById('sec_qst').value = V;
                      }
                  </script>
                  <select name="dummy_1233211_dummy" id="dummy_1233211_dummy" onchange="setSecQuestion()">
                    <option value="">~pick predefined~</option>
                    <option VALUE="First Car">First Car</option>
                    <option VALUE="Mothers Maiden Name">Mothers Maiden Name</option>
                    <option VALUE="Favorite Pet">Favorite Pet</option>
                    <option VALUE="Favorite Sports Team">Favorite Sports Team</option>
                  </select>
                  <div style="display:inline; color:red;"><v:error-summary match="sec_question" /></div>
                </td>
              </tr>
              <tr>
                <th><label for="sec_answer">Secret answer</label></th>
                <td nowrap="nowrap">
                  <v:text error-glyph="*" xhtml_id="sec_answer" name="sec_answer" value="--self.secreta">
            <v:validator test="length" min="0" max="800" message="Security answer cannot be longer then 800 chars" name="vv_seca1" empty-allowed="1"/>
                  </v:text>
                  <div style="display:inline; color:red;"><v:error-summary match="sec_answer" /></div>
                </td>
              </tr>
              <tr>
                <td colspan="2" class="ctrl">
		      <span class="fm_ctl_btn">
                  <v:button name="user_sset" value="Save" action="simple">
                    <v:on-post>
                      <![CDATA[
                  if(self.vc_is_valid = 0)
                    return;

                        WA_USER_EDIT (self.u_name, 'SEC_QUESTION', self.sec_question.ufl_value);
                        WA_USER_EDIT (self.u_name, 'SEC_ANSWER', self.sec_answer.ufl_value);
                  self.vc_redirect ('uiedit.vspx?page=3');
                      ]]>
                    </v:on-post>
		</v:button>
	    </span>
                </td>
              </tr>
              <tr>
                <td colspan="2" align="left">
                  <h3>Applications restrictions</h3>
                </td>
              </tr>
              <tr>
                <th><label for="sioc_limit1">SIOC query result limit</label></th>
                <td nowrap="nowrap">
                  <v:text error-glyph="*" xhtml_id="sioc_limit1" name="sioc_limit1" value="--self.sioc_limit" >
            <v:validator test="value" min="1" max="1000" message="Positive number between 1 and 1000 is required" name="vv_sioca1" empty-allowed="0"/>
                  </v:text>
                  <div style="display:inline; color:red;"><v:error-summary match="sioc_limit" /></div>
                </td>
              </tr>
              <tr>
                <td colspan="2" class="ctrl">
		      <span class="fm_ctl_btn">
			<v:button name="bt_cncl_5" value="Cancel" action="simple">
			  <v:on-post>
			    self.vc_redirect (sprintf ('uhome.vspx?ufname=%U&amp;l=1', self.u_name));
			  </v:on-post>
			</v:button>
                  <v:button name="bt_set1" value="Save Restrictions" action="simple">
                    <v:on-post>
                      <![CDATA[
                  if(self.vc_is_valid = 0)
                    return;

                        USER_SET_OPTION (self.u_name, 'SIOC_POSTS_QUERY_LIMIT', atoi (self.sioc_limit1.ufl_value));
                  self.vc_redirect ('uiedit.vspx?page=3');
                      ]]>
                    </v:on-post>
		</v:button>
	    </span>
                </td>
              </tr>
      <tr>
        <td colspan="2" align="left">
          <h3>X.509 Certificate</h3>
        </td>
      </tr>
      <tr>
	  <td colspan="2" align="left">
	      <?vsp if (length (self.certificate_content)) { ?>
	      <div>
		  <label>Subject:</label>
		  <?vsp
		  http_value (get_certificate_info (2, cast(self.certificate_content as varchar), 0, ''),'b');
		  ?>
	      </div>
	      <div>
		  <label>Agent ID:</label>
		  <?vsp
		          http_value (replace (get_certificate_info (7, cast(self.certificate_content as varchar), 0, '', '2.5.29.17'), 'URI:', ''),'b');
		  ?>
	      </div>
	      <?vsp } ?>
	    <v:textarea name="cert1" value="--self.certificate_content" xhtml_cols="70" xhtml_rows="20" />
	    <?vsp if (not length (self.certificate_content) and xenc_key_exists ('id_rsa')) { ?>
	    <iframe id="cert" src="cert.vsp?sid=<?V self.sid ?>" width="200" height="200" frameborder="0" scrolling="no">
	       <p>Your browser does not support iframes.</p>
	   </iframe>
	   <?vsp } ?>
	</td>
      </tr>
      <tr>
	      <td colspan="2" align="left">
          <label>
            <v:check-box name="cert_login" value="1" xhtml_id="cert_login" >
             <v:after-data-bind>
               if (not e.ve_is_post)
                 control.ufl_selected := self.certificate_login;
             </v:after-data-bind>
            </v:check-box>
            <b>Enable Automatic FOAF+SSL Login</b>
          </label>
 	      </td>
      </tr>
      <tr>
        <td colspan="2" class="ctrl">
          <span class="fm_ctl_btn">
            <v:button name="bt_cncl_6" value="Cancel" action="simple">
              <v:on-post>
                self.vc_redirect (sprintf ('uhome.vspx?ufname=%U&amp;l=1', self.u_name));
              </v:on-post>
            </v:button>
            <v:button name="bt_set2" value="Save Certificate" action="simple">
              <v:on-post>
                <![CDATA[
		  declare agent varchar;
                  if(self.vc_is_valid = 0)
                    return;
                  agent := get_certificate_info (7, self.cert1.ufl_value, 0, '', '2.5.29.17');
                  if (agent is null and length (self.cert1.ufl_value))
		    {
                      self.vc_is_valid := 0;
		      self.vc_error_message := 'The certificate must be in PEM format and must have Alternate Name attribute.';
		      return;
		    }
                  WA_USER_EDIT (self.u_name, 'WAUI_CERT_LOGIN', self.cert_login.ufl_selected);
                  WA_USER_EDIT (self.u_name, 'WAUI_CERT', self.cert1.ufl_value);

                  self.vc_redirect ('uiedit.vspx?page=3');
                ]]>
              </v:on-post>
            </v:button>
            <v:button name="bt_set3" value="Remove Certificate" action="simple">
              <v:on-post>
                <![CDATA[
                  if (self.vc_is_valid = 0)
                    return;
                  WA_USER_EDIT (self.u_name, 'WAUI_CERT_LOGIN', 0);
                  WA_USER_EDIT (self.u_name, 'WAUI_CERT', NULL);

                  self.vc_redirect ('uiedit.vspx?page=3');
                ]]>
              </v:on-post>
            </v:button>
          </span>
        </td>
      </tr>
    </table>
    </v:form>
</v:page>
