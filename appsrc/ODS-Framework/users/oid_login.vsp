<?vsp
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2006 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
--

  declare url, cnt, this_page, trust_root, xt, hdr, host any;
  declare setup_url, check_immediate any;
  declare oid_action, oid_mode, oid_srv, oid_delegate, oid_handle, oid_sig, oid_signed, oid_key varchar;
  declare oid_identity, oid_mail, oid_nickname, oid_fullname, oid_birthday, oid_gender, oid_postcode, oid_country, oid_tz varchar;

  oid_action := {?'openid_action'};
  oid_identity := {?'openid_url'};
  oid_mode := {?'openid.mode'};

  host := http_request_header (lines, 'Host');
  this_page := 'http://' || host || http_path () || sprintf ('?openid_action=%s', oid_action);;
  trust_root := 'http://' || host;

  http_header ('Cache-Control: private, proxy-revalidate\r\n');

  -- start handshake
  if (oid_identity is not null) {
    url := trim(oid_identity);
    declare exit handler for sqlstate '*' {
      http ('{err_code: "openid.url", err_text: "The URL cannot be retrieved"}');
      return;
    };
    if (not length (url) or url not like 'http%://%') {
      http ('{err_code: "openid.url", err_text: "Invalid URL"}');
      return;
    }
  again:
    hdr := null;
    cnt := DB.DBA.HTTP_CLIENT_EXT (url=>url, headers=>hdr);
    if (hdr [0] like 'HTTP/1._ 30_ %') {
      declare loc any;
   	  loc := http_request_header (hdr, 'Location', null, null);
 	    url := WS.WS.EXPAND_URL (url, loc);
      oid_identity := url;
 	    goto again;
    }
    xt := xtree_doc (cnt, 2);
    oid_srv := cast (xpath_eval ('//link[@rel="openid.server"]/@href', xt) as varchar);
    oid_delegate := cast (xpath_eval ('//link[@rel="openid.delegate"]/@href', xt) as varchar);

    if (oid_srv is null) {
      http ('{err_code: "openid.server", err_text: "The OpenID server cannot be located"}');
      return;
    }

    if (oid_delegate is not null)
      oid_identity := oid_delegate;
    check_immediate := sprintf ('%s?openid.mode=associate', oid_srv);
    cnt := http_client (url=>check_immediate);
    cnt := split_and_decode (cnt, 0, '\0\0\x0A:');
    oid_handle := get_keyword ('assoc_handle', cnt, null);
    oid_key := get_keyword ('mac_key', cnt, '');
    check_immediate := sprintf ('%s?openid.mode=checkid_setup&openid.identity=%U&openid.return_to=%U&openid.trust_root=%U', oid_srv, oid_identity, this_page, trust_root);
    if (length (oid_handle))
      check_immediate := check_immediate || sprintf ('&openid.assoc_handle=%U', oid_handle);
    if (oid_action = 'login') {
      check_immediate := check_immediate || sprintf ('&openid.sreg.optional=%U', 'nickname');
    } else if (oid_action = 'authenticate') {
      check_immediate := check_immediate || sprintf ('&openid.sreg.optional=%U', 'email,fullname,nickname,dob,gender,postcode,country,timezone');
    } else if (oid_action = 'register') {
      check_immediate := check_immediate || sprintf ('&openid.sreg.optional=%U', 'email,fullname,nickname,dob,gender,postcode,country,timezone');
    }
    http (sprintf ('{checkid_immediate_url: "%s", id_server: "%s", clean_identity_url: "%s", openid_key: "%s" }', check_immediate, oid_srv, oid_identity, oid_key));

  } else if (oid_mode = 'id_res') {
    setup_url := {?'openid.user_setup_url'};
    oid_sig := {?'openid.sig'};
    if (oid_sig is null) {
?>
<html>
  <body>
    <script>
      if (parent.location.host == location.host)
        parent.OpenID_callback_fail("<?vsp http (coalesce (setup_url, '')); ?>");
    </script>
  </body>
</html>
<?vsp
    } else {
      declare pUser, S varchar;

      oid_identity := {?'openid.identity'};
      if (oid_action = 'login') {
        S := DB.DBA.ODS_USER_LOGIN (null, null, oid_identity, 1);
      } else if ((oid_action = 'authenticate') or (oid_action = 'register')) {
	      declare uid, N, M integer;

        oid_mail := {?'openid.sreg.email'};
        oid_nickname := {?'openid.sreg.nickname'};
        oid_fullname := {?'openid.sreg.fullname'};
        oid_birthday := {?'openid.sreg.dob'};
        oid_gender := {?'openid.sreg.gender'};
        oid_postcode := {?'openid.sreg.postcode'};
        oid_country := {?'openid.sreg.country'};
        oid_tz := {?'openid.sreg.timezone'};

        -- generate unique user name
	      N := 1;
	      pUser := oid_nickname;
      _again:
	      M := (select count(*) from DB.DBA.SYS_USERS where U_NAME = pUser);
	      if (M > 0) {
		      pUser := oid_nickname || cast (N as varchar);
		      N := N + 1;
		      goto _again;
	      }

        if (oid_action = 'authenticate') {
          declare sStream any;

          sStream := string_output();
          http ('<root>', sStream);

          DB.DBA.ODS_ERROR_XML (sStream, 'OK', 'OK');
          http ('<oid>', sStream);
          http (sprintf('<identity>%s</identity>', oid_identity), sStream);
          http (sprintf('<uid>%s</uid>', pUser), sStream);
          http (sprintf('<mail>%s</mail>', oid_mail), sStream);
          if (length (oid_fullname))
            http (sprintf('<fullname>%V</fullname>', oid_fullname), sStream);
          if (length (oid_birthday))
            http (sprintf('<birthday>%V</birthday>', oid_birthday), sStream);
          if (length (oid_gender))
            http (sprintf('<gender>%V</gender>', oid_gender), sStream);
          if (length (oid_postcode))
            http (sprintf('<postcode>%V</postcode>', oid_postcode), sStream);
          if (length (oid_country))
            http (sprintf('<country>%V</country>', oid_country), sStream);
          if (length (oid_tz))
            http (sprintf('<tz>%V</tz>', oid_tz), sStream);
          http ('</oid>', sStream);

          http ('</root>', sStream);
          S := string_output_string (sStream);
        } else {
          S := DB.DBA.ODS_USER_REGISTER (pUser, uuid (), oid_mail, oid_identity, oid_fullname, oid_birthday, oid_gender, oid_postcode, oid_country, oid_tz, 1);
        }
      }
?>
<html>
  <body>
    <script>
      if (window.opener) {
        var pwin = window.opener;
        if (pwin.OpenID_callback_pass) {
          pwin.OpenID_callback_pass("<?vsp http (S); ?>");
      	  window.close();
        } else {
          alert("Error: browser weirdness. Please report this.");
        }
      }
    </script>
  </body>
</html>
<?vsp
   }
 } else if (oid_mode = 'cancel') {
?>
<html>
  <body>
    <script>
      if (window.opener) {
        var win = window.opener;
        if (win.OpenID_callback_pass) {
      	  window.close();
        } else {
          alert("Error: browser weirdness. Please report this.");
        }
      }
    </script>
  </body>
</html>
<?vsp
 } else {
?>
<html>
  <body>
    <script>
      if (parent.location.host == location.host)
        parent.OpenID_general_error({err_code: "gen_error",err_text: "Unexpected error occured when estabilishing OpenID sequence."});
    </script>
  </body>
</html>
<?vsp
}
?>
