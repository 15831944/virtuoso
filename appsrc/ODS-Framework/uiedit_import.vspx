<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2006 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="foaf-import-page"
        xmlns:vm="http://www.openlinksw.com/vspx/ods/"
        xmlns:v="http://www.openlinksw.com/vspx/"
        style="index.xsl"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  <v:method name="ldap2_value" arglist="inout data any">
    <![CDATA[
      return case when isstring (data) then data else data[0] end;
	  ]]>
	</v:method>

  <v:method name="ldap2_pattern" arglist="in maps any, in pattern any">
    <![CDATA[
      declare N integer;

      for (N := 0; N < length (maps); N := N + 2)
        if (maps [N+1] = pattern)
          return maps [N];

      return '';
	  ]]>
	</v:method>

  <v:method name="ldap2_data" arglist="inout data any, in pattern any">
    <![CDATA[
      declare M integer;

      for (M := 0; M < length (data); M := M + 2)
        if (data[M] = pattern)
          return self.ldap2_value (data[M+1]);

      return null;
	  ]]>
	</v:method>

  <v:method name="check_title" arglist="inout title any">
    <![CDATA[
      declare M integer;
      declare V any;

      V := vector ('Mr', 'Mrs', 'Dr', 'Ms');
      for (M := 0; M < length (V); M := M + 1)
        if (lcase (title) like (lcase (V[M])|| '%'))
          return V[M];

      return '';
	  ]]>
	</v:method>

  <v:method name="vector_contains" arglist="in aVector any, in aValue varchar">
    <![CDATA[
      declare N integer;

      for (N := 0; N < length(aVector); N := N + 1)
        if (aValue = aVector[N])
          return 1;
      return 0;
	  ]]>
	</v:method>

  <v:variable name="iTitle" type="varchar" default="null" />
  <v:variable name="iName" type="varchar" default="null" />
  <v:variable name="iFirstName" type="varchar" default="null" />
  <v:variable name="iFamily_name" type="varchar" default="null" />
  <v:variable name="iMbox" type="varchar" default="null" />
  <v:variable name="iGender" type="varchar" default="null" />
  <v:variable name="iBirthday" type="varchar" default="null" />
  <v:variable name="iLat" type="varchar" default="null" />
  <v:variable name="iLng" type="varchar" default="null" />
  <v:variable name="iIcqChatID" type="varchar" default="null" />
  <v:variable name="iMsnChatID" type="varchar" default="null" />
  <v:variable name="iAimChatID" type="varchar" default="null" />
  <v:variable name="iYahooChatID" type="varchar" default="null" />
  <v:variable name="iWorkplaceHomepage" type="varchar" default="null" />
  <v:variable name="iHomepage" type="varchar" default="null" />
  <v:variable name="iPhone" type="varchar" default="null" />
  <v:variable name="iResume" type="varchar" default="null" />
  <v:variable name="iInterests" type="varchar" default="null" />
  <v:variable name="iTopicInterests" type="varchar" default="null" />
  <v:variable name="iOnlineAccounts" type="varchar" default="null" />
  <v:variable name="iSameAs" type="varchar" default="null" />

  <v:variable name="show_data" type="int" default="0" />
  <v:variable name="ab_domain" type="int" default="null" />

  <v:variable name="i_source" type="any" default="-1" />
  <v:variable name="i_lName" type="varchar" default="''" />

  <v:form type="simple" method="POST" xhtml_enctype="multipart/form-data" action="uiedit.vspx?page=8">
    <v:before-data-bind>
      self.ab_domain := (select top 1 WAI_ID from WA_MEMBER, WA_INSTANCE where WAM_INST = WAI_NAME and WAM_USER = self.u_id and WAM_APP_TYPE = 'AddressBook' and WAM_MEMBER_TYPE = 1);
    </v:before-data-bind>
    <div>
      <fieldset>
        <table cellspacing="0">
          <tr>
            <td nowrap="nowrap">
              <v:radio-button name="i_source_0" xhtml_id="i_source_0" group-name="i_source" value="0">
                <v:before-render>
                  <![CDATA[
                    control.ufl_selected := either (lte(self.i_source, 0), 1, 0);
                  ]]>
                </v:before-render>
              </v:radio-button>
              <xsl:call-template name="nbsp" />
              <b><label for="i_source_0">Personal URI (Web ID)</label></b>
            </td>
            <td>
              <v:text name="foaf_url" xhtml_id="foaf_url" value="" xhtml_onfocus="javascript: document.forms[0].i_source[0].checked=true;" xhtml_size="70"/>
            </td>
          </tr>
          <tr>
            <td nowrap="nowrap">
              <v:radio-button name="i_source_1" xhtml_id="i_source_1" group-name="i_source" value="1">
                <v:before-render>
                  <![CDATA[
                    control.ufl_selected := either (equ(self.i_source, 1), 1, 0);
                  ]]>
                </v:before-render>
              </v:radio-button>
              <xsl:call-template name="nbsp" />
              <b><label for="i_source_1">LDAP Server</label></b>
            </td>
            <td>
              <v:data-list name="f_lName"
                           value="--self.i_lName"
                           key-column="LS_NAME"
                           value-column="LS_NAME"
                           sql="select '' as LS_NAME from SYS_USERS where U_ID = 0 union all select LS_NAME from LDAP..LDAP_SERVERS where LS_USER_ID = self.u_id"
                           xhtml_onfocus="javascript: document.forms[0].i_source[1].checked=true;" />
            </td>
          </tr>
        </table>
        <br/>
        <v:button action="simple" name="bt_imp" value="Import" enabled="--equ (self.show_data, 0)">
          <v:on-post><![CDATA[
            self.show_data := 0;
            commit work;

            if (self.i_source_0.ufl_selected)
            {
              declare data any;

              self.i_source := 0;
              data := ODS.ODS_API.get_foaf_data_array (self.foaf_url.ufl_value, 0);
              if (length (data) = 0)
                data := ODS.ODS_API.get_foaf_data_array (self.foaf_url.ufl_value, 1);
              if (length (data) = 0)
              {
                self.vc_error_message := 'The specified URL doesn\'t contains personal FOAF profile.';
                self.vc_is_valid := 0;
                return;
                }
              self.iTitle := get_keyword ('title', data);
              self.iName := get_keyword ('name', data);
              self.iFirstName := coalesce (get_keyword ('firstName', data), get_keyword ('givenName', data));
              self.iFamily_name := get_keyword ('family_name', data);
              self.iMbox := get_keyword ('mbox', data);
              self.iGender := get_keyword ('gender', data);
              self.iBirthday := get_keyword ('birthday', data);
              self.iLat := get_keyword ('lat', data);
              self.iLng := get_keyword ('lng', data);
              self.iIcqChatID := get_keyword ('icqChatID', data);
              self.iMsnChatID := get_keyword ('msnChatID', data);
              self.iAimChatID := get_keyword ('aimChatID', data);
              self.iYahooChatID := get_keyword ('yahooChatID', data);
              self.iWorkplaceHomepage := get_keyword ('workplaceHomepage', data);
              self.iHomepage := get_keyword ('homepage', data);
              self.iPhone := get_keyword ('phone', data);
              self.iResume := get_keyword ('resume', data);
              self.iInterests := get_keyword ('interest', data);
              self.iTopicInterests := get_keyword ('topic_interest', data);
              self.iOnlineAccounts := get_keyword ('onlineAccounts', data);
              self.iSameAs := get_keyword ('sameAs', data);

                self.show_data := 1;
                control.vc_data_bind (e);
              }
            else if (self.i_source_1.ufl_selected)
            {
              self.i_source := 1;

              declare N, M integer;
              declare tmp, data, V, i_lHost, i_lPort, i_lBase_dn, i_lBind_dn, i_lPassword, i_lMaps, i_lSearch, i_lData any;

              self.i_lName := self.f_lName.ufl_value;
              if (self.i_lName <> '')
              {
                select LS_HOST,
                       LS_PORT,
                       LS_BASE_DN,
                       LS_BIND_DN,
                       LS_PASSWORD,
                       deserialize (LS_MAPS)
                  into i_lHost,
                       i_lPort,
                       i_lBase_dn,
                       i_lBind_dn,
                       i_lPassword,
                       i_lMaps
                  from LDAP..LDAP_SERVERS
                 where LS_NAME = self.i_lName
                   and LS_USER_ID = self.u_id;

                connection_set ('LDAP_VERSION', 2);
                tmp := split_and_decode (i_lBind_dn, 0, '\0\0\,');
                i_lSearch := '(cn=*)';
                if (length (tmp) > 0)
                  i_lSearch := tmp[0];

                i_lData := ldap_search ('ldap://' || i_lHost || ':' || i_lPort, 0, i_lBase_dn, i_lSearch, i_lBind_dn, i_lPassword);
                for (N := 0; N < length (i_lData); N := N + 2)
                {
          	      if (i_lData [N] = 'entry')
          	      {
          	        data := i_lData [N+1];

                    self.iTitle := self.check_title (self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_TITLE')));
                    self.iName := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_FULL_NAME'));
                    self.iFirstName := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_FIRST_NAME'));;
                    self.iFamily_name := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_LAST_NAME'));;
                    self.iMbox := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_MAIL'));;
                    self.iGender := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_GENDER'));;
                    self.iLat := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_H_LAT'));;
                    self.iLng := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_H_LNG'));;
                    self.iIcqChatID := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_ICQ'));;
                    self.iMsnChatID := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_MSN'));;
                    self.iAimChatID := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_AIM'));;
                    self.iYahooChatID := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_YAHOO'));;
                    self.iWorkplaceHomepage := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_B_WEB'));;
                    self.iHomepage := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_WEB'));;
                    self.iPhone := self.ldap2_data (data, self.ldap2_pattern (i_lMaps, 'P_H_PHONE'));;

                    self.show_data := 2;
                    goto _exit2;
                  }
                }
              }
            _exit2:;
              if (self.show_data = 0)
              {
                self.vc_is_valid := 0;
                self.vc_error_message := 'The specified LDAP server doesn\'t contains personal data.';
              } else {
                control.vc_data_bind (e);
              }
            }
          ]]></v:on-post>
        </v:button>
      </fieldset>
    </div>
    <v:template name="iTemplate_0" type="simple" condition="self.show_data">
      <fieldset>
        Please confirm importing of the following data in your personal profile.<br />
        The corresponding existing data will be replaced.
      </fieldset>
      <table class="listing">
        <tr class="listing_header_row">
          <th>Field</th>
          <th>value</th>
        </tr>
        <v:template name="iTemplate_01" type="simple" condition="length (self.iTitle)">
          <tr>
            <td>Title</td>
            <td><?V self.iTitle ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_02"  type="simple" condition="length (self.iFirstName)">
          <tr>
            <td>First Name</td>
            <td><?V wa_utf8_to_wide (self.iFirstName) ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_03" type="simple" condition="length (self.iFamily_name)">
          <tr>
            <td>Family Name</td>
            <td><?V wa_utf8_to_wide (self.iFamily_name) ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_04" type="simple" condition="length (self.iMBox)">
          <tr>
            <td>E-mail</td>
            <td><?V self.iMBox ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_05" type="simple" condition="length (self.iGender)">
          <tr>
            <td>Gender</td>
            <td><?V self.iGender ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_06" type="simple" condition="length (self.iBirthday)">
          <tr>
            <td>Birthday</td>
            <td><?V self.iBirthday ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_07" type="simple" condition="length (self.iLng)">
          <tr>
            <td>Geo position</td>
            <td><?V self.iLat ?>;<?V self.iLng ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_08" type="simple" condition="length (self.iIcqChatID)">
          <tr>
            <td>ICQ</td>
            <td><?V wa_utf8_to_wide (self.iIcqChatID) ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_09" type="simple" condition="length (self.iMsnChatID)">
          <tr>
            <td>MSN</td>
            <td><?V wa_utf8_to_wide (self.iMsnChatID) ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_10" type="simple" condition="length (self.iAimChatID)">
          <tr>
            <td>AIM</td>
            <td><?V wa_utf8_to_wide (self.iAimChatID) ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_11" type="simple" condition="length (self.iYahooChatID)">
          <tr>
            <td>Yahoo</td>
            <td><?V wa_utf8_to_wide (self.iYahooChatID) ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_12" type="simple" condition="length (self.iWorkplaceHomepage)">
          <tr>
            <td>Workplace Homepage</td>
            <td><?V self.iWorkplaceHomepage ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_13" type="simple" condition="length (self.iHomepage)">
          <tr>
            <td>Homepage</td>
            <td><?V self.iHomepage ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_14" type="simple" condition="length (self.iPhone)">
          <tr>
            <td>Phone</td>
            <td><?V self.iPhone ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_15" type="simple" condition="length (self.iResume)">
          <tr>
            <td>Resume</td>
            <td><?V self.iResume ?></td>
          </tr>
        </v:template>
        <v:template name="iTemplate_16" type="simple" condition="length (self.iInterests)">
          <tr>
            <td valign="top">Resource URI indicating thing of interest</td>
            <td>
              <?vsp
                for (select fld1, fld2 from DB.DBA.WA_USER_INTERESTS (txt) (fld1 varchar, fld2 varchar) P where txt = self.iInterests) do
            	  {
            	    if (length (fld1))
            	    {
            	      http (fld1);
            	      if (length (fld2))
            		      http (sprintf (' (%s)', fld2));
            	      http ('<br />');
            	    }
            	  }
              ?>
            </td>
          </tr>
        </v:template>
        <v:template name="iTemplate_17" type="simple" condition="length (self.iTopicInterests)">
          <tr>
            <td valign="top">Web page URL indicating a topic of interest   </td>
            <td>
              <?vsp
                for (select fld1, fld2 from DB.DBA.WA_USER_INTERESTS (txt) (fld1 varchar, fld2 varchar) P where txt = self.iTopicInterests) do
            	  {
            	    if (length (fld1))
            	    {
            	      http (fld1);
            	      if (length (fld2))
            		      http (sprintf (' (%s)', fld2));
            	      http ('<br />');
            	    }
            	  }
              ?>
            </td>
          </tr>
        </v:template>
        <v:template name="iTemplate_18" type="simple" condition="length (self.iOnlineAccounts)">
          <tr>
            <td valign="top">Online Accounts</td>
            <td>
              <?vsp
                for (select fld1, fld2 from DB.DBA.WA_USER_INTERESTS (txt) (fld1 varchar, fld2 varchar) P where txt = self.iOnlineAccounts) do
            	  {
            	    if (length (fld1))
            	    {
            	      http (fld1);
            	      if (length (fld2))
            		      http (sprintf (' (%s)', fld2));
            	      http ('<br />');
            	    }
            	  }
              ?>
            </td>
          </tr>
        </v:template>
        <v:template name="iTemplate_19" type="simple" condition="length (self.iSameAs)">
          <tr>
            <td valign="top">Other Identity URIs (synonyms)</td>
            <td>
              <?vsp
                for (select fld1, fld2 from DB.DBA.WA_USER_INTERESTS (txt) (fld1 varchar, fld2 varchar) P where txt = self.iSameAs) do
            	  {
            	    if (length (fld1))
            	    {
            	      http (fld1);
            	      http ('<br />');
            	    }
            	  }
              ?>
            </td>
          </tr>
        </v:template>
      </table>
      <v:button action="simple" name="bt_imp2" value="Save">
        <v:on-post>
          <![CDATA[
            --WA_USER_EDIT (self.u_name, 'WAUI_BIRTHDAY', dt);
            WA_USER_EDIT (self.u_name, 'WAUI_TITLE', self.iTitle);
            WA_USER_EDIT (self.u_name, 'WAUI_FIRST_NAME', self.iFirstName);
            WA_USER_EDIT (self.u_name, 'WAUI_LAST_NAME', self.iFamily_name);
            WA_USER_EDIT (self.u_name, 'WAUI_FULL_NAME', self.iName);
            WA_USER_EDIT (self.u_name, 'E_MAIL', self.iMBox);
            WA_USER_EDIT (self.u_name, 'WAUI_GENDER', self.iGender);
            WA_USER_EDIT (self.u_name, 'WAUI_WEBPAGE', self.iHomepage);

            WA_USER_EDIT (self.u_name, 'WAUI_ICQ', self.iIcqChatID);
            WA_USER_EDIT (self.u_name, 'WAUI_AIM', self.iAimChatID);
            WA_USER_EDIT (self.u_name, 'WAUI_YAHOO', self.iYahooChatID);
            WA_USER_EDIT (self.u_name, 'WAUI_MSN', self.iMsnChatID);

            WA_USER_EDIT (self.u_name, 'WAUI_BORG_HOMEPAGE', self.iworkplaceHomepage);
            WA_USER_EDIT (self.u_name, 'WAUI_HPHONE', self.iPhone);
            WA_USER_EDIT (self.u_name, 'WAUI_LAT', self.iLat);
            WA_USER_EDIT (self.u_name, 'WAUI_LNG', self.iLng);

            if (self.show_data = 1)
            {
              WA_USER_EDIT (self.u_name, 'WAUI_FOAF', self.iSameAs);
              WA_USER_EDIT (self.u_name, 'WAUI_RESUME', self.iResume);
              WA_USER_EDIT (self.u_name, 'WAUI_INTERESTS', self.iInterests);
              WA_USER_EDIT (self.u_name, 'WAUI_INTEREST_TOPICS', self.iTopicInterests);
              if (length (self.iOnlineAccounts))
              {
                delete from DB.DBA.WA_USER_OL_ACCOUNTS where WUO_U_ID = self.u_id;
                for (select fld1, fld2 from DB.DBA.WA_USER_INTERESTS (txt) (fld1 varchar, fld2 varchar) P where txt = self.iOnlineAccounts) do
            	  {
            	    if (length (fld1))
            	    {
                    insert into DB.DBA.WA_USER_OL_ACCOUNTS ( WUO_NAME, WUO_URL, WUO_U_ID, WUO_TYPE)
                      values (fld1, fld2, self.u_id, 'P');
            	    }
            	  }
              }
            }

            commit work;
            self.vc_redirect ('uiedit.vspx?page=10');
          ]]>
        </v:on-post>
      </v:button>
      <v:button action="simple" name="bt_imp3" value="Cancel">
        <v:on-post><![CDATA[
          self.vc_redirect ('uiedit.vspx?page=10');
        ]]></v:on-post>
      </v:button>
    </v:template>
  </v:form>
</v:page>
