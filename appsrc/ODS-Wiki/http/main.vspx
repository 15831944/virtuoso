<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2006 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="processes_page" on-deadlock-retry="3"
	decor="wiki_decor.vspx" style="wiki_style.xsl"
	xmlns:v="http://www.openlinksw.com/vspx/"
	xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <v:on-init>
    set isolation='committed';
  </v:on-init>
  <vm:pagewrapper>
    <vm:pagebody>
<?vsp
{
  declare _uid integer;
  dbg_obj_print (connection_get ('vspx_user'));
  
  _uid := WV.WIKI.VSPXGETUID (connection_get ('vspx_user'), self.sid);
  dbg_obj_print (_uid);
  if (_uid = 0)
    return;
  declare _page, _cluster, _local_name, _attach, _base_adjust varchar;
  declare _cmd varchar;
  declare _topic_id varchar;
  declare _text varchar;
  declare _title varchar;
  declare _uname, _md5 varchar;
  declare _attachment varchar;
  declare _topic_op varchar;
  declare _rename varchar;
  declare _is_new varchar;

  if ({?'hrefdisable'} = 'on')
    {
      http ('
<p><b>You did not save the changes you have made in the page you edit.</b><br />
The link you just hit is disabled to prevent you from surfing the web before saving your changes.<br/>
To save your changes, press <b>"Back"</b> button of your browser and press <b>"Save"</b> button at the bottom of that page.<br/>
To cancel your changes, press "Back" button twice.</p>' );
      return;
    }    
  _cmd := {?'command'};
  _title := {?'title'};
  _topic_id := self.TopicId;
  _text := {?'text'};
  _attachment := {?'att'};
  _topic_op := coalesce ({?'topic_rename'}, {?'topic_mv'}, {?'topic_rm'}, {?'mops_rename'});
  _is_new := {?'is_new'};

  WV.WIKI.VSPDECODEWIKIPATH (path, _page, _cluster, _local_name, _attach, _base_adjust);
--  dbg_obj_print (path, _page, _cluster, _local_name, _attach, _base_adjust);
again:
  if (_local_name like 'Category%')
    {
	_cmd := 'refby';
	_topic := WV.WIKI.CATEGORYINFO();
    }
  else
	_topic := WV.WIKI.TOPICINFO();
  _topic.ti_raw_title := _title;
  if (_topic_id is not null)
    {
      _topic.ti_id := cast (_topic_id as integer);
      _topic.ti_find_metadata_by_id ();
    }
  else
    {
      _topic.ti_cluster_name := _cluster;
      _topic.ti_fill_cluster_by_name();
      _topic.ti_local_name := _local_name;
      _topic.ti_find_id_by_local_name();
      _topic.ti_find_metadata_by_id ();
--      _topic.ti_http_debug_print('info about current topic');
    }
  if (_topic.ti_res_id = 0)
    {
      if (_title is not null)
        {
          _topic.ti_raw_title := _title;
          _topic.ti_find_id_by_raw_title ();
	  if (_topic.ti_id = 0)
	    {
	      _topic.ti_default_cluster := _cluster;
              _topic.ti_raw_name := _title;
              _topic.ti_parse_raw_name ();
              _topic.ti_fill_cluster_by_name ();
	      _topic.ti_find_id_by_local_name ();
            }
	}
      else
        {
	  _topic.ti_default_cluster := _cluster;
          _topic.ti_raw_name := _local_name;
          _topic.ti_parse_raw_name ();
          _topic.ti_fill_cluster_by_name ();
	  _topic.ti_find_id_by_local_name ();
        }
      _topic.ti_find_metadata_by_id ();
    }
  if (_topic.ti_raw_title is null)
    _topic.ti_raw_title := concat (_topic.ti_cluster_name, '.', _topic.ti_local_name);

  if (_cmd = 'save' or _cmd = 'Save' or _cmd = 'Save changes')
    {
      declare _filename, _retval any;
      declare perms varchar;
      perms := WV.WIKI.GETDEFAULTPERMS (_uid, _topic.ti_cluster_id);
      _topic.ti_text := _text;
      _filename := coalesce (
	(select RES_NAME from WS.WS.SYS_DAV_RES where RES_ID = _topic.ti_res_id),
	concat (_topic.ti_local_name,'.txt') );
      if (0 = WV.WIKI.CHECKWRITEACCESS (_uid, _topic.ti_res_id, _topic.ti_cluster_id))
    	{
	  WV.WIKI.VSPREPORTFAILEDREADACCESS (path, params, lines, _topic.ti_cluster_name, _topic.ti_local_name, '');
	  goto do_nothing;
	}
      
      declare eff_uid int;
      eff_uid := coalesce ((select RES_OWNER from WS.WS.SYS_DAV_RES where RES_ID = _topic.ti_res_id), _uid);
      _retval := DB.DBA.DAV_RES_UPLOAD (WS.WS.COL_PATH(_topic.ti_col_id) || _filename, _text, 'text/plain', perms, eff_uid, 'WikiUser', 'dav', (select pwd_magic_calc (U_NAME, U_PWD, 1) from WS.WS.SYS_DAV_USER where U_ID = http_dav_uid()));
      if ({?'ReleaseLock'} is not null)
	WV.WIKI.RELEASELOCK (_topic.ti_id, _uid);
      if ({?'is_new'} is null)
	WV.WIKI.ADDHISTORYITEM (_topic, _filename, 'Update', '');
      else 
	WV.WIKI.ADDHISTORYITEM (_topic, _filename, 'Create', '');
      commit work;
      _cmd := 'saved';
      goto again;
    }
  if (_cmd = 'relogin' or _cmd = 'ReLogin' or _cmd = 'Re-Login')
    {
      declare _rnd integer;
      _rnd := cast ({?'rnd'} as integer);
      if (exists (select 1 from WV.WIKI.TMP where "TmpId" = _rnd))
        delete from WV.WIKI.TMP where "TmpId" = _rnd;
      else
        {
          insert into WV.WIKI.TMP ("TmpId") values (_rnd);
          commit work;
          _uid := WV.WIKI.VSPCHECKWEBAUTH (path, params, vector (aref (lines, 0)));
          return;
        }
    }
  if (_cmd = 'do_attach')
    {
      declare filename,mime_type varchar;
	dbg_obj_print ('di_att');
      filename := get_keyword ('filename', get_keyword ('attr-filepath', params));
      mime_type := get_keyword ('Content-Type', get_keyword ('attr-filepath', params));
      if (filename is not null)
	{
	  declare arr any;
	  arr := split_and_decode (filename, 0, '\0\0\\');
	  if (arr is not null)
	    filename := arr[length(arr)-1];
	}
      WV.WIKI.ATTACH (_uid, filename, mime_type,
			      _topic.ti_id,
			  {?'filepath'}, 
			  {?'comment'});
      WV.WIKI.ADDHISTORYITEM (_topic, null, 'Attach', filename);
      _cmd := 'attach';
    }	
  if (_cmd = 'attach')
    {
	WV.WIKI.VSPTOPICATTACH (path,params,lines, _uid, _base_adjust, _topic.ti_id,
		 vector ('sid', self.sid, 'realm', self.realm));
 	goto make_footer;
    }	
  if (_attachment is not null)
    {
      if (_cmd = 'manage')
	WV.WIKI.VSPATTACHMENTMANAGE (path,params,lines, _uid, _base_adjust,_topic.ti_id,_attachment,
		 vector ('sid', self.sid, 'realm', self.realm));
      else if (_cmd = 'delete')
	{
	  WV.WIKI.ADDHISTORYITEM (_topic, null, 'DeleteAttach', _attachment);
	  WV.WIKI.ATTACHMENTACTION (_uid, _topic.ti_id, _attachment, _cmd);
	  _cmd := 'manage';
	  _attachment := null;
	  goto again;
	} 
      else
	{
	  WV.WIKI.VSPATTACHMENTVIEW (_uid, _topic.ti_id, _attachment);
	  return;
	}
      goto do_nothing;
    }
  WV.WIKI.VSPHEADER (path,params,lines, _topic.ti_raw_title);
  if (_cmd = 'edit' or _cmd = 'Edit')
    {
      declare _lock_uid int;
      if (_topic.ti_id = 0)
	WV.WIKI.VSPTOPICCREATE (path,params,lines, _uid, _base_adjust, 'Main', _topic.ti_raw_title,
		 vector ('sid', self.sid, 'realm', self.realm));
      else
	{
	  if (0 = WV.WIKI.CHECKWRITEACCESS (_uid, _topic.ti_res_id, _topic.ti_cluster_id))
	    {	
	      WV.WIKI.VSPREPORTFAILEDREADACCESS (path, params, lines, _topic.ti_cluster_name, _topic.ti_local_name, '');
	      goto do_nothing;
	    }
	  if (0 = (_lock_uid := WV.WIKI.GETLOCK (_topic.ti_id, _uid)))
		WV.WIKI.VSPTOPICEDIT (path,params,lines, _uid, _base_adjust, _topic.ti_id,
			 vector ('sid', self.sid, 'realm', self.realm));
	  else
		WV.WIKI.APPSIGNAL (11001, 'The resource is locked by ' || (select "UserName" from WV.WIKI.APPSIGNAL where "UserId" = _lock_uid), vector ());
	}

      goto make_footer;
    }
  if (_cmd = 'index' or _cmd = 'Index')
    {
      WV.WIKI.VSPCLUSTERINDEX (path,params,lines, _uid, _base_adjust, _topic.ti_id,  vector ('sid', self.sid, 'realm', self.realm) );
      goto make_footer;
    }
  if (_cmd = 'preview' or _cmd = 'Preview' or _cmd = 'Preview changes')
    {
      WV.WIKI.VSPTOPICPREVIEW (path,params,lines, _uid, _base_adjust, _topic.ti_id, _topic.ti_raw_title, _text, {?'is_new'}, vector ('sid', self.sid, 'realm', self.realm) );
      goto make_footer;
    }
  if (_cmd = 'refby' or _cmd = 'RefBy' or _cmd = 'Ref-By' or _cmd = 'Referers')
    {
      if (_local_name like 'Category%')
	WV.WIKI.VSPTOPICCATEGORY (path,params,lines, _uid, _base_adjust, _topic.ti_id
		, vector ('sid', self.sid, 'realm', self.realm) );
      else
	WV.WIKI.VSPTOPICREFERERS (path,params,lines, _uid, _base_adjust, _topic.ti_id
		, vector ('sid', self.sid, 'realm', self.realm) );
      goto make_footer;
    }
  if (_cmd = 'AddEdit')
    {
      WV.WIKI.VSPTOPICEDIT (path,params,lines,_uid,_base_adjust, _topic.ti_id);
      goto make_footer;
    }
  if (_cmd = 'mops')
    {
      if (_topic_op is not null) 
	{
	  if (_topic_op like 'Delete%')
	    {
	      WV.WIKI.DELETETOPIC (_topic.ti_id);
	      _topic_id := null;
	      _cluster := 'Main';
	      _local_name := 'WelcomeVisitors';
	    }
	  else if (_topic_op like 'Rename%')
	    {
	      http_value (WV.WIKI.VSPXSLT ('VspTopicRename.xslt',
		 WV.WIKI.DOCCLUSTERS(),
		 vector_concat ( vector ('uid', _uid, 'baseadjust', _base_adjust, 'rnd', rand (999999999)), _topic.ti_xslt_vector(), vector ('sid', {?'sid'}, 'realm', {?'realm'}) ) ) );
	      goto make_footer;
	    }
	  else if (_topic_op like 'Confirm Rename') {
	    WV.WIKI.RENAMETOPIC (_topic.ti_id, cast ({?'new_cluster'} as int), {?'new_name'});
	    _local_name := 'WelcomeVisitors';
	    _cluster := 'Main';
	  } else if (_topic_op like 'Set%')
	    WV.WIKI.TOPICSETPARENT (_topic.ti_id, cast ({?'parent'} as integer));
	  _topic_op := null;
	  _cmd := null;
	  goto again;
	}

	http_value (
	    WV.WIKI.VSPXSLT ( 'VspTopicMoreOps.xslt',
	    WV.WIKI.DOCCHILDSANDPARENTS (_topic.ti_cluster_id, _topic.ti_id),
	    vector_concat ( vector ('uid', _uid, 'baseadjust', _base_adjust, 'rnd', rand (999999999)), _topic.ti_xslt_vector(), vector ('sid', self.sid, 'realm', self.realm)) ) );
      goto make_footer;
    }
  if (_cmd = 'show_mail')
    {
      WV.WIKI.VSPMAILVIEW (path,params,lines, _uid, _base_adjust, _topic.ti_id, atoi ({?'user_id'}), atoi ({?'m_id'}),
		 vector ('sid', self.sid, 'realm', self.realm));
      goto make_footer;
    }
	


create_or_view:
--  _topic.ti_http_debug_print('info about current topic');
  if (_topic.ti_id = 0)
    WV.WIKI.VSPTOPICCREATE (path,params,lines, _uid, _base_adjust, 'Main', _topic.ti_raw_title,
	 vector ('sid', self.sid, 'realm', self.realm));
  else
    WV.WIKI.VSPTOPICVIEW (path,params,lines, _uid, _base_adjust, _topic.ti_id,
	 vector ('sid', self.sid, 'realm', self.realm,
		 'acs', coalesce ({?'acs'}, 1),
		 'sort', coalesce ({?'sort'}, -1),
		 'col', coalesce ({?'col'}, -1)));
make_footer:    
  --declare _searchmode, _searchtext varchar;
  --WV.WIKI.VSPFOOTER (path,params,lines);
	;
do_nothing:
	;
}
      ?> 
    </vm:pagebody>
  </vm:pagewrapper>
  <vm:pagetitle>aa<?vsp http (_topic.ti_raw_title); ?></vm:pagetitle>
</v:page>

