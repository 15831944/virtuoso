<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2006 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
?>
<?vsp
{
  set http_charset='utf-8';
  declare _uid integer;
  declare _sid, _realm, _user varchar;
  _sid := coalesce ({?'sid'}, '');
  _realm := coalesce ({?'realm'}, '');
  if ({?'submit'} = 'Logout')
    {
      delete from DB.DBA.VSPX_SESSION 
        where vs_sid = _sid
	  and vs_realm = _realm;
      commit work;
      http_request_status ('HTTP/1.1 302 Found');
      http_header (sprintf('Location: %s?lastop=Logout\r\n', http_path()));
      return;
    }
  connection_set ('WIKI params', params);

  
  declare _cluster, _local_name, _attach, _base_adjust varchar;
  declare _cmd varchar;
  declare _topic_id varchar;
  declare _topic WV.WIKI.TOPICINFO;
  declare _text varchar;
  declare _title varchar;
  declare _uname, _md5 varchar;
  declare _attachment varchar;
  declare _topic_op varchar;
  declare _rename varchar;
  declare _is_new varchar;
  declare _page varchar;
  declare _error, _referer varchar;
  declare _path_details any;

  _error := null;
  --dbg_obj_princ (http_path());
  _path_details := WV.WIKI.VSPDECODEWIKIPATH (path, _page, _cluster, _local_name, _attachment, _base_adjust, lines);
  
  params := vector_concat (params, _path_details);
  -- WV.WIKI.VSPDECODEWIKIPATH2 (params, _cluster, _local_name, _attachment, lines);
  connection_set ('WIKIV BaseAdjust', _base_adjust);
  _attachment := coalesce (_attachment, get_keyword ('att', params));
  
  _uid := WV.WIKI.VSPXGETUID (connection_get ('vspx_user'), _realm, _sid);
  _user := (select U_NAME from DB.DBA.SYS_USERS where U_ID = _uid);
  if (_user = 'WikiGuest')
    params := WV.WIKI.VECTOR_DROP_KEYWORD (
	WV.WIKI.VECTOR_DROP_KEYWORD (params, 'sid'),
	'realm');

  
  _cmd :=  {?'command'};
  if (_cmd is not null)
    _cmd := WV.WIKI.TRANSLATE_COMMAND (_cmd);
    
  _title := {?'title'};
  if (_title is not null)
	_title := trim (_title);

  _topic_id := {?'TopicId'};
  _text := null;
  if ({?'text'} is not null)
    _text := {?'text'};
    -- _text := serialize_to_UTF8_xml (xtree_doc ({?'text'}, 2, '', 'UTF-8'));
  _topic_op := coalesce ({?'topic_rename'}, {?'topic_mv'}, {?'topic_rm'}, {?'mops_rename'});
  _is_new := {?'is_new'};

  if ({?'goto_title'} is not null)
    {
      _local_name := null;
--      _title := WV.WIKI.NORMALIZETOWIKIWORD (trim ({?'goto_title'}));
      _title := WV.WIKI.CONVERTTITLETOWIKIWORD(trim ({?'goto_title'}));
    }  
  --dbg_obj_print (_cluster);
  
again:
  _topic := WV.WIKI.TOPICINFO();
  _topic.ti_raw_title := _title;
  if (_topic_id is not null)
    {
      _topic.ti_id := cast (_topic_id as integer);
      _topic.ti_find_metadata_by_id ();
    }
  else
    {
      _topic.ti_cluster_name := _cluster;
      _topic.ti_fill_cluster_by_name();
      _topic.ti_local_name := _local_name;
      _topic.ti_find_id_by_local_name();
      _topic.ti_find_metadata_by_id ();
--      _topic.ti_http_debug_print('info about current topic');
    }
  if (_topic.ti_res_id = 0)
    {
      if (_title is not null)
        {
          _topic.ti_raw_title := _title;
          _topic.ti_find_id_by_raw_title ();
	  if (_topic.ti_id = 0)
	    {
	      _topic.ti_default_cluster := _cluster;
              _topic.ti_raw_name := _title;
              _topic.ti_parse_raw_name ();
              _topic.ti_fill_cluster_by_name ();
	      _topic.ti_find_id_by_local_name ();
            }
	}
      else
        {
	  _topic.ti_default_cluster := _cluster;
          _topic.ti_raw_name := _local_name;
          _topic.ti_parse_raw_name ();
          _topic.ti_fill_cluster_by_name ();
	  _topic.ti_find_id_by_local_name ();
        }
      _topic.ti_find_metadata_by_id ();
    }
  if (_topic.ti_raw_title is null)
    _topic.ti_raw_title := concat (_topic.ti_cluster_name, '.', _topic.ti_local_name);
  if ({?'__SQL_STATE'} is not null)
    {
       __SQL_STATE := {?'__SQL_STATE'};
       __SQL_MESSAGE := {?'__SQL_MESSAGE'};
       _referer := 'Unknown';
       goto error_report;
    }
  declare deadlock_cnt int;
  deadlock_cnt := 5;
 
  declare exit handler for sqlstate '*' {
	  if ( (__SQL_STATE = '42001') and (deadlock_cnt > 0))
	    {
--		dbg_obj_princ ('deadlock count: ', deadlock_cnt);
		deadlock_cnt := deadlock_cnt - 1;
		rollback work;
		goto cont;
	    }
	  if (__SQL_STATE = 'WVRLD')
	    {
	      -- dbg_obj_print ('reload: ', _sid, _realm);
	      http_request_status ('HTTP/1.1 302 Found');
	      http_header (sprintf('Location: ?sid=%s&realm=%s&%V\r\n',
		_sid, _realm,
		__SQL_MESSAGE));
	      return;
	    }
	  declare sql_state, sql_message varchar;
	  if (_topic.ti_col_id <> 0)
	    _referer :=  coalesce (http_request_header (lines, 'Referer'), 'Unknown');
	  else 
	    _referer := 'Unknown';
error_report:
	  sql_state := __SQL_STATE;
	  sql_message := __SQL_MESSAGE;
	  if (sql_state = '42WV9')
	    {
--		sql_state := 'Application Error';
		sql_message := subseq (sql_message, 0, strchr (sql_message, '\n'));
	    }
	  WV.WIKI.VSPHEADER (path,params,lines, _topic, _base_adjust);	 
	  declare _ext_params any;
	  _ext_params := _topic.ti_xslt_vector (WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
	  http_value (WV.WIKI.VSPXSLT ('PostProcess.xslt', 
 	 	WV.WIKI.VSPXSLT ( 'VspReportError.xslt',
		XMLELEMENT ('error', 
			XMLATTRIBUTES (sql_state as "State"),
			sql_message),
		_ext_params),
	    _ext_params, WV.WIKI.CLUSTERPARAM ( _topic.ti_cluster_id , 'skin', 'default')));
	  WV.WIKI.VSPFOOTER (path,params,lines);
	  return;
  };
cont:
  if ({?'goto_title'} is not null)
	WV.WIKI.CHECKWIKIWORD (_title);
--  dbg_obj_princ (_topic);

  -- later make real error check...
  if (_topic.ti_col_id = 0)
	WV.WIKI.APPSIGNAL (11001, 'Cluster ' || _cluster || ' does not exist, please create it before creating any page in this cluster', vector ());

  if (WV.WIKI.FROZEN (_topic))
    return;
  if (_cmd like 'wa_redirect%')
    {
 	declare sid, realm, vspx_user varchar;
	vspx_user := (select U_NAME from DB.DBA.SYS_USERS where U_ID = _uid);
	if (vspx_user = 'WikiGuest')
	  {
	    sid := '';
	    realm := '';
	  }
	  
	         
	declare wa_home_link varchar;
	wa_home_link := registry_get ('wa_home_link');
	if (isinteger(wa_home_link))
	 wa_home_link :='/wa/';
        http_request_status ('HTTP/1.1 302 Found');
	if (_cmd = 'wa_redirect')
	        http_header (sprintf('Location: %s/uiedit.vspx?sid=%s&realm=wa\r\n',
			wa_home_link, sid));
	else if (_cmd = 'wa_redirect_add_user')
	  {
	    http_header (sprintf('Location: %s/members.vspx?wai_id=%ld&sid=%s&realm=wa\r\n',
	      wa_home_link, 
	      (select WAI_ID from DB.DBA.WA_INSTANCE where WAI_NAME = {?'name'}),
	      sid));
	  }
	else if (_cmd = 'wa_redirect2')
	        http_header (sprintf('Location: %s/?sid=%s&realm=wa\r\n',
                        wa_home_link, sid));
	else if (_cmd = 'wa_redirect_user_home')
	        http_header (sprintf('Location: %s/uhome.vspx?sid=%s&realm=wa\r\n',
                        wa_home_link, sid));
	return;

    }
  if (_cmd = 'dav_redirect')
    {
	if (not exists (select HP_LPATH from DB.DBA.HTTP_PATH where HP_LPATH = '/conductor'))
	  WV.WIKI.APPSIGNAL (11001, 'Conductor package needs to be installed to perform this operation.', vector ());
        declare sid,vspx_user varchar;
	vspx_user := (select U_NAME from DB.DBA.SYS_USERS where U_ID = _uid);
        sid := md5 (concat (datestring (now ()), http_client_ip (), http_path ()));
        insert into DB.DBA.VSPX_SESSION (VS_REALM, VS_SID, VS_UID, VS_STATE, VS_EXPIRY)
                values ('virtuoso_admin', sid, vspx_user, serialize (vector ('vspx_user', vspx_user)), now());
        commit work;
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: /conductor/popup_browser.vspx?sid=%s&realm=virtuoso_admin&path=%s\r\n',
			sid,
                        'DAV/VAD/wiki/' || _topic.ti_cluster_name ));
    }
  --dbg_obj_princ (_cmd);
  if (_cmd like 'temp-%')
    {
	--dbg_obj_princ ('_topic:', _topic);
       WV.WIKI.VSPTOPICVIEW_TEMP (path, lines, _topic, 
	 vector_concat (WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust),
	 	-- NOTE: acs, sort, col can be specified in "params"
		-- following parameter values took place when parameters are not specified
		 vector ('acs', 1,
		 	 'sort', 1,
			 'col', -1)),
	 _cmd);
	--dbg_obj_princ ('_cmd:', _cmd);
       return;
    }
  if ((not _topic.ti_res_id) and (_cmd is not null) and (_cmd not in ('preview', 'save', 'edit', 'cancel')))
    WV.WIKI.APPSIGNAL (11002, 'Topic has been removed or deleted', vector());
  if (_topic.ti_res_id and _cmd is not null)
     WV.WIKI.CHECKREADACCESS (_uid, _topic.ti_res_id, _topic.ti_cluster_id, _topic.ti_col_id, 'Owner of this cluster does not allow you to browse this topic');

  if (_cmd = 'text')
    {
	http_header ('Content-Type: text/plain\r\n');
	http (_topic.ti_text);
	return;
    }  
  if (_cmd = 'xml')
    {
	http_header ('Content-Type: text/xml\r\n');
	http ('<?xml version="1.0"?>');
	http (serialize_to_UTF8_xml (
	  XMLELEMENT ('topic',
	   XMLATTRIBUTES (_topic.ti_cluster_name as "cluster",
		_topic.ti_local_name as "name"),
	    _topic.ti_get_entity (null, 0))));
	return;
    }  
  if (_cmd = 'plain-html')
    {
	WV.WIKI.VSPTOPICVIEW_PLAIN (path, lines, _topic,
	 vector_concat (WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust),
	 	-- NOTE: acs, sort, col can be specified in "params"
		-- following parameter values took place when parameters are not specified
		 vector ('acs', 1,
		 	 'sort', 1,
			 'col', -1)));

	return;
    }  

  if (_cmd = 'cancel')
    {
      if (_topic.ti_id <> 0)
        WV.WIKI.RELEASELOCK (DB.DBA.DAV_SEARCH_PATH (_topic.ti_res_id, 'R'), _user);
      else
        _local_name := WV.WIKI.CLUSTERPARAM (_topic.ti_cluster_name, 'index-page', 'WelcomeVisitors');
      _cmd := null;
      goto again;
    }
  if (_cmd = 'save')
    {
      declare _filename, _retval any;
      _text := WV.WIKI.DELETE_SYSINFO_FOR (_text, NULL);      
      _topic.ti_text := _text;
      _filename := coalesce (
	(select RES_NAME from WS.WS.SYS_DAV_RES where RES_ID = _topic.ti_res_id),
	concat (_topic.ti_local_name,'.txt') );
      WV.WIKI.CHECKWRITEACCESS (_uid, _topic.ti_res_id, _topic.ti_cluster_id, _topic.ti_col_id, 'Edit is not allowed by owner of this cluster.');
      connection_set ('HTTP_CLI_UID', _user);
      declare _res int;
      _res := WV.WIKI.UPLOADPAGE (_topic.ti_col_id, _filename, _text, (select COL_OWNER from WS.WS.SYS_DAV_COL where COL_ID = _topic.ti_col_id), _topic.ti_cluster_id, _user );
      dbg_obj_princ (_topic, DB.DBA.DAV_PERROR (_res));
      DB.DBA.DAV_CHECKIN_INT (_topic.ti_full_path(), null, null, 0);
      commit work;
      if ((_topic.ti_id = 0) and ({?'ReleaseLock'} is null)) 
	{
	  WV.WIKI.GETLOCK (WS.WS.COL_PATH(_topic.ti_col_id) || _filename, _user);
	}
      if ({?'ReleaseLock'} is not null)
	WV.WIKI.RELEASELOCK (WS.WS.COL_PATH(_topic.ti_col_id) || _filename, _user);
      if (_topic.ti_id <> 0)
	WV.WIKI.ADDHISTORYITEM (_topic, _filename, 'Update', '', _user);
      else 
	WV.WIKI.ADDHISTORYITEM (_topic, _filename, 'Create', '', _user);
      WV.WIKI.INC_COMMITCOUNTER (_uid);
      commit work;
      _cmd := 'saved';
      goto again;
    }
  WV.WIKI.VSPHEADER (path,params,lines, _topic, _base_adjust);
content:
  if (_error is not null) {
    http ('<div class="error"><span>' || _error || '</span></div>');
  }
  _error := null;
  if (_cmd = 'diff')
    {
      WV.WIKI.VSPDIFF (path,lines,_topic,
        WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
      goto make_footer;
    }
  else if (_cmd = 'do_attach')
    {
      WV.WIKI.CHECKREADACCESS (_uid, _topic.ti_res_id, _topic.ti_cluster_id, _topic.ti_col_id);
      declare filename,mime_type varchar;
      filename := get_keyword ('filename', get_keyword ('attr-filepath', params));
      mime_type := get_keyword ('Content-Type', get_keyword ('attr-filepath', params));
      if (filename is not null)
	{
	  declare arr any;
	  arr := split_and_decode (filename, 0, '\0\0\\');
	  if (arr is not null)
	    filename := arr[length(arr)-1];
	}
      if (length ({?'filepath'}) = 0)
	{
	  _error := 'Can not attach empty file';
	  _cmd := 'attach';
	  goto again;
   	}
      WV.WIKI.ATTACH2 (_uid, filename, mime_type,
			      _topic.ti_id,
			  {?'filepath'}, 
			  {?'comment'});
      if ({?'createlink'} is not null)
	WV.WIKI.ADDLINK (_topic, mime_type, _uid, filename, _user);
	
      WV.WIKI.ADDHISTORYITEM (_topic, null, 'Attach', filename, _user);
      _cmd := 'attach';
    }	
  if (_cmd = 'attach')
    {
	WV.WIKI.VSPTOPICATTACH (path, lines, _topic,
		 WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
 	goto make_footer;
    }	
  if (_attachment is not null)
    {
      if (_cmd = 'manage')
	WV.WIKI.VSPATTACHMENTMANAGE (path, lines, _topic,_attachment,
		 WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
      else if (_cmd = 'delete')
	{
	  if ({?'submit'} = 'Yes')
	    {
	      WV.WIKI.CHECKWRITEACCESS (_uid, _topic.ti_res_id, _topic.ti_cluster_id, _topic.ti_col_id, 'Additional operations are not allowed by owner of this cluster');

	      if ({?'dellinks'} is not null)
		 WV.WIKI.DELETEATTACHMENTLINKS (_topic, _uid, _attachment);
	      WV.WIKI.ADDHISTORYITEM (_topic, null, 'DeleteAttach', _attachment, _user);
	      WV.WIKI.ATTACHMENTACTION (_uid, _topic.ti_id, _attachment, _cmd);
	    }
	  _cmd := 'manage';
	  _attachment := null;
	  goto again;
	} 
      else if (_cmd = 'delete_conf')
	{
 	  WV.WIKI.CHECKWRITEACCESS (_uid, _topic.ti_res_id, _topic.ti_cluster_id, _topic.ti_col_id, 'Additional operations are not allowed by owner of this cluster');

	  WV.WIKI.VSPHEADER (path,params,lines, _topic, _base_adjust);	 
	  WV.WIKI.VSPDELETECONFIRM(path, lines, _topic, _attachment,
		WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
	}
      else
	{
	  WV.WIKI.VSPATTACHMENTVIEW (_uid, _topic.ti_id, _attachment);
	  return;
	}
      goto do_nothing;
    }
  if (_cmd = 'edit')
    {
      declare _filename varchar;
      _topic.ti_text := _text;
      _filename := coalesce (
	(select RES_NAME from WS.WS.SYS_DAV_RES where RES_ID = _topic.ti_res_id),
	concat (_topic.ti_local_name,'.txt') );
      WV.WIKI.CHECKWRITEACCESS (_uid, _topic.ti_res_id, _topic.ti_cluster_id, _topic.ti_col_id, 'Edit is not allowed by owner of this cluster.');
      declare _lock_uid int;
      if (_topic.ti_id = 0)
	WV.WIKI.VSPTOPICCREATE (path, lines, _cluster, _topic.ti_raw_title,
		 WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
      else
	{
	  if (0 = (_lock_uid := WV.WIKI.GETLOCK (WS.WS.COL_PATH(_topic.ti_col_id) || _filename, _user)))
		WV.WIKI.VSPTOPICEDIT (path, lines, _topic,
				WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
	  else
		WV.WIKI.APPSIGNAL (11001, 'The resource &path; is locked', vector ('path', WS.WS.COL_PATH(_topic.ti_col_id) || _filename));
	}

      goto make_footer;
    }
  if (_cmd = 'index')
    {
      if (not _topic.ti_id)
	{
	  _cmd := 'edit';
	  goto content;
	}
      WV.WIKI.VSPCLUSTERINDEX (path, lines, _topic,  
	WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust) );
      goto make_footer;
    }
  if (_cmd = 'preview')
    {
      if (get_keyword ('kupu', params) is not null)
	{
	  _text := get_keyword ('kupu', params);
	  declare _nodes any;
	  _nodes := xpath_eval ('//body/node()', xtree_doc (_text), 0);
	  _text := '';
	  foreach (any _xt in _nodes) do
	    {
	      _text := _text || replace (serialize_to_UTF8_xml (_xt), ' xmlns="http://www.w3.org/1999/xhtml"', '');
	    }
  	  --dbg_obj_princ (_text);
	}

      WV.WIKI.VSPTOPICPREVIEW (path, lines, _topic.ti_id, _topic.ti_raw_title, _text, {?'is_new'}, WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust), _cluster );
      goto make_footer;
    }
  if (_cmd like 'refby%')
    {
      WV.WIKI.VSPTOPICREFERERS (path, lines, _topic,
        WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
      goto make_footer;
    }
  if (_cmd = 'show_mail')
    {
      WV.WIKI.VSPMAILVIEW (path, lines, _topic, atoi ({?'user_id'}), atoi ({?'m_id'}),
		 WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
      goto make_footer;
    }
	


create_or_view:
--  _topic.ti_http_debug_print('info about current topic');
  if (_topic.ti_id = 0)
    {
      WV.WIKI.VSPTOPICCREATE (path, lines, _cluster, _topic.ti_raw_title,
	 WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust));
    }
  else
   {
     if (WV.WIKI.VSPTOPICVIEW (path, lines, _topic,
	 vector_concat (WV.WIKI.MAKE_PARAMS (_user, _uid, params, _base_adjust),
	 	-- NOTE: acs, sort, col can be specified in "params"
		-- following parameter values took place when parameters are not specified
		 vector ('acs', 1,
		 	 'sort', 1,
				 'col', -1))))
	   WV.WIKI.VSPFOOTER (path, params, lines);
	 return;
   }
make_footer:    
  WV.WIKI.VSPFOOTER (path,params,lines);
	;
do_nothing:
	;
}
?>


