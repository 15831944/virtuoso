/*
 *  neworde.sql
 *
 *  $Id$
 *
 *  TPC-C Transactions new-order transaction stored procedure
 *
 *  (C)Copyright 1998 OpenLink Software.
 *  All Rights Reserved.
 *
 *  The copyright above and this notice must be preserved in all
 *  copies of this source code.  The copyright above does not
 *  evidence any actual or intended publication of this source code.
 *
 *  This is unpublished proprietary trade secret of OpenLink Software.
 *  This source code may not be copied, disclosed, distributed, demonstrated
 *  or licensed except as authorized by OpenLink Software.
 */
 
create or replace procedure new_order_proc (
       w_id_         in integer,
       d_id_         in integer,
       c_id_         in integer,
       o_ol_cnt_     in integer,
       o_all_local_  in integer,
       i_id1_   in integer, s_w_id1_   in integer, ol_qty1_   in integer,
       i_id2_   in integer, s_w_id2_   in integer, ol_qty2_   in integer,
       i_id3_   in integer, s_w_id3_   in integer, ol_qty3_   in integer,
       i_id4_   in integer, s_w_id4_   in integer, ol_qty4_   in integer,
       i_id5_   in integer, s_w_id5_   in integer, ol_qty5_   in integer,
       i_id6_   in integer, s_w_id6_   in integer, ol_qty6_   in integer,
       i_id7_   in integer, s_w_id7_   in integer, ol_qty7_   in integer,
       i_id8_   in integer, s_w_id8_   in integer, ol_qty8_   in integer,
       i_id9_   in integer, s_w_id9_   in integer, ol_qty9_   in integer,
       i_id10_  in integer, s_w_id10_  in integer, ol_qty10_  in integer 
)
as
  w_tax_	numeric(4,4);
  d_tax_	numeric(4,4);
  c_last_	char(16);
  c_credit_	char(2);
  c_discount_	numeric(4,4);
  i_price_	numeric(5,2);
  i_name_	char(24);
  i_data_	char(50);
  o_entry_d_	date;
  remote_flag_	integer;
  s_quantity_	integer ;
  s_data_	char(50);
  s_dist_	char(24);
  li_no_	integer;
  o_id_		integer;
  commit_flag_	integer;
  li_id_	integer;
  li_s_w_id_	integer;
  li_qty_	integer;
  ol_number_	integer;
  c_id_local_	integer;
  dif_qty_	integer;
  s_cnt_remote_	integer;
  s_dist_01_	char(24);
  s_dist_02_	char(24);
  s_dist_03_	char(24);
  s_dist_04_	char(24);
  s_dist_05_	char(24);
  s_dist_06_	char(24);
  s_dist_07_	char(24);
  s_dist_08_	char(24);
  s_dist_09_	char(24);
  s_dist_10_	char(24);
  s_s_quantity_	integer;
begin
--	  set transaction;
      /* get district tax and next available order id and update */
	  /* plus initialize local variables */
      update district
             set d_next_o_id  = d_next_o_id + 1
             where d_w_id = w_id_ and d_id = d_id_ 
			 returning
			 d_tax,
			 d_next_o_id,
			 sysdate,
			 0,
			 1
			 into
			 d_tax_,
			 o_id_,
			 o_entry_d_,
			 li_no_,
			 commit_flag_;

      /* process orderlines */
      while li_no_ < o_ol_cnt_ loop

         /* Set i_id, s_w_id and qty for this lineitem */
                li_no_ := li_no_+1;

                if li_no_ = 0  then li_id_ := i_id1_;  li_s_w_id_ := s_w_id1_;  li_qty_ := ol_qty1_; 
                elsif li_no_ = 1  then li_id_ := i_id2_;  li_s_w_id_ := s_w_id2_;  li_qty_ := ol_qty2_;
                elsif li_no_ = 2  then li_id_ := i_id3_;  li_s_w_id_ := s_w_id3_;  li_qty_ := ol_qty3_;
                elsif li_no_ = 3  then li_id_ := i_id4_;  li_s_w_id_ := s_w_id4_;  li_qty_ := ol_qty4_;
                elsif li_no_ = 4  then li_id_ := i_id5_;  li_s_w_id_ := s_w_id5_;  li_qty_ := ol_qty5_;
                elsif li_no_ = 5  then li_id_ := i_id6_;  li_s_w_id_ := s_w_id6_;  li_qty_ := ol_qty6_;
                elsif li_no_ = 6  then li_id_ := i_id7_;  li_s_w_id_ := s_w_id7_;  li_qty_ := ol_qty7_;
                elsif li_no_ = 7  then li_id_ := i_id8_;  li_s_w_id_ := s_w_id8_;  li_qty_ := ol_qty8_;
                elsif li_no_ = 8  then li_id_ := i_id9_;  li_s_w_id_ := s_w_id9_;  li_qty_ := ol_qty9_;
                elsif li_no_ = 9  then li_id_ := i_id10_; li_s_w_id_ := s_w_id10_; li_qty_ := ol_qty10_;
				end if;

         /* get item data (no one updates item) */
         select i_price, i_name, i_data
                into i_price_, i_name_, i_data_
                from item
                where i_id = li_id_ for update;

         /* if there actually is an item with this id, go to work */
         if sql%rowcount > 0 then
          begin
           if li_s_w_id_ = w_id_ then s_cnt_remote_ := 0; 
		      else
				s_cnt_remote_ := 1;
		   end if;

		   select s_quantity into s_s_quantity_ from stock where s_i_id = li_id_ and s_w_id = li_s_w_id_ for update;
		   if s_s_quantity_ - li_qty_ < 10 then dif_qty_ := 91; else dif_qty_ := 0; end if;

           update stock set s_ytd        = s_ytd + li_qty_,
                            s_quantity   = s_quantity - li_qty_ + dif_qty_,
                            s_cnt_order  = s_cnt_order + 1,
                            s_cnt_remote = s_cnt_remote + s_cnt_remote_
                  where s_i_id = li_id_ and s_w_id = li_s_w_id_
				  returning
					s_quantity,
                    s_data,
					s_dist_01,
					s_dist_02,
					s_dist_03,
					s_dist_04,
					s_dist_05,
					s_dist_06,
					s_dist_07,
					s_dist_08,
					s_dist_09,
					s_dist_10
				  into
                    s_quantity_,
					s_data_,
					s_dist_01_,
					s_dist_02_,
					s_dist_03_,
					s_dist_04_,
					s_dist_05_,
					s_dist_06_,
					s_dist_07_,
					s_dist_08_,
					s_dist_09_,
					s_dist_10_;

                    if d_id_ = 1  then s_dist_ := s_dist_01_;
                    elsif d_id_ = 2  then s_dist_ := s_dist_02_;
                    elsif d_id_ = 3  then s_dist_ := s_dist_03_;
                    elsif d_id_ = 4  then s_dist_ := s_dist_04_;
                    elsif d_id_ = 5  then s_dist_ := s_dist_05_;
                    elsif d_id_ = 6  then s_dist_ := s_dist_06_;
                    elsif d_id_ = 7  then s_dist_ := s_dist_07_;
                    elsif d_id_ = 8  then s_dist_ := s_dist_08_;
                    elsif d_id_ = 9  then s_dist_ := s_dist_09_;
                    elsif d_id_ = 10 then s_dist_ := s_dist_10_;
					end if;


           /* insert order_line data (using data from item and stock) */
           insert into order_line
                  values(o_id_,					/* from district update */
                         d_id_,					/* input param          */
                         w_id_,					/* input param          */
                         li_no_,				/* orderline number     */
                         li_id_,				/* lineitem id          */
                         li_s_w_id_,			/* lineitem warehouse   */
                         '31-DEC-80',			/* constant             */
                         li_qty_,				/* lineitem qty         */
                         i_price_ * li_qty_,	/* ol_amount        */
                         s_dist_);				/* from stock           */


           /* send line-item data to client */

/*
           select i_name_, s_quantity_,
                  b_g = if ((instr('ORIGINAL',i_data_) > 0) and
                                   (instr('ORIGINAL',s_data_) > 0))
                        then 'B' else 'G' end if,
                  i_price_,
                  i_price_ * li_qty_;
*/

          end;  -- /* condition: if (@@rowcount > 0) */
         else
           /* no item found - triggers rollback condition */
--           select '', '',0;
           commit_flag_ := 0;
        end if;
       end loop; -- /* of orderlines loop while(@li_no < @o_ol_cnt) */
      /* get customer last name, discount, and credit rating */
      select c_last,
             c_discount,
             c_credit,
             c_id
             into
             c_last_,
             c_discount_,
             c_credit_,
             c_id_local_
          from customer
          where c_id    = c_id_ and
                c_w_id  = w_id_ and
                c_d_id  = d_id_ for update;
      /* insert fresh row into orders table */
      insert into orders values(o_id_, d_id_, w_id_, c_id_local_,
                                o_entry_d_, 0, o_ol_cnt_, o_all_local_);
      /* insert corresponding row into new-order table */
      insert into new_order values (o_id_, d_id_, w_id_);
      /* select warehouse tax */
      select w_tax into w_tax_
             from warehouse
             where w_id = w_id_ for update;

      if commit_flag_ = 1 then
          commit;
      else
          /* all that work for nuthin!!! */
          rollback;
	  end if;

      /* return order data to client */
/*
      select w_tax_,
             d_tax_,
             o_id_,
             c_last_,
             c_discount_,
             c_credit_,
             o_entry_d_,
             commit_flag_ 
*/
end new_order_proc;
/

