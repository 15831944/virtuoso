@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix virtrdf: <http://www.openlinksw.com/schemas/virtrdf#> .
@prefix rdfdf: <http://www.openlinksw.com/virtrdf-data-formats#> .
@prefix bif: <bif:> .
@prefix sql: <sql:> .

virtrdf:loadAs virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:loadAs virtrdf:item virtrdf:jsoTriple .
virtrdf:isSubclassOf virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:version virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:isSpecialPredicate virtrdf:loadAs virtrdf:jsoTriple .

bif:contains virtrdf:isSpecialPredicate bif:contains .
bif:xcontains virtrdf:isSpecialPredicate bif:xcontains .
bif:xpath_contains virtrdf:isSpecialPredicate bif:xpath_contains .
bif:xquery_contains virtrdf:isSpecialPredicate bif:xquery_contains .

# Don't forget to change version, both here and in DB.DBA.SPARQL_RELOAD_QM_GRAPH, to force reload.
<http://www.openlinksw.com/sparql/virtrdf-data-formats.ttl>
  virtrdf:version '2008-01-22 0001' ;
  virtrdf:item
    rdfdf:default-iid ,				rdfdf:default-iid-nullable ,
    rdfdf:default-iid-nonblank ,		rdfdf:default-iid-nonblank-nullable ,
    rdfdf:default ,				rdfdf:default-nullable ,
    rdfdf:sql-varchar ,				rdfdf:sql-varchar-nullable ,
    rdfdf:sql-longvarchar ,			rdfdf:sql-longvarchar-nullable ,
    rdfdf:sql-longvarbinary ,			rdfdf:sql-longvarbinary-nullable ,
    rdfdf:sql-varchar-uri ,			rdfdf:sql-varchar-uri-nullable ,
    rdfdf:sql-integer ,				rdfdf:sql-integer-nullable ,
    rdfdf:sql-integer-uri ,			rdfdf:sql-integer-uri-nullable ,
    rdfdf:sql-doubleprecision ,			rdfdf:sql-doubleprecision-nullable ,
    rdfdf:sql-date ,				rdfdf:sql-date-nullable ,
    rdfdf:sql-datetime ,			rdfdf:sql-datetime-nullable ,
    rdfdf:multipart-uri ,			rdfdf:multipart-uri-nullable ,
    rdfdf:multipart-uri-fn-nullable ,
    rdfdf:multipart-literal-fn-nullable ,
    rdfdf:sql-varchar-uri-fn ,			rdfdf:sql-varchar-uri-fn-nullable ,
    rdfdf:sql-integer-uri-fn ,			rdfdf:sql-integer-uri-fn-nullable ,
    rdfdf:sql-varchar-literal-fn ,		rdfdf:sql-varchar-literal-fn-nullable ,
    rdfdf:sql-integer-literal-fn ,		rdfdf:sql-integer-literal-fn-nullable ,
    virtrdf:DefaultQuadStorage ,		virtrdf:DefaultQuadStorage-UserMaps ,
    virtrdf:DefaultQuadMap
.

rdfdf:default-iid
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "default-iid";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " id_to_iri (^{alias-dot}^^{column}^)";			# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " (^{tree}^ < min_bnode_iri_id ())";			# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " (^{tree}^ >= min_bnode_iri_id ())";			# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
# Templates of 0/1 that tell whether the short is of some sort:
  virtrdf:qmf01uriOfShortTmpl " (lt (^{tree}^, min_bnode_iri_id ()))";		# STRING REQUIRED ... whether the short is uri, returns 0 or 1
  virtrdf:qmf01blankOfShortTmpl " (gte (^{tree}^, min_bnode_iri_id ()))";	# STRING REQUIRED ... whether the short is blank node ref, returns 0 or 1
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^ ";					# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " id_to_iri (^{tree}^)";				# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#anyURI'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " ^{tree}^";
  virtrdf:qmfUriOfShortTmpl " id_to_iri (^{tree}^)";				# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " id_to_iri (^{tree}^)";			# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " NULL";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME_SAFE (^{tree}^)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME_SAFE (^{tree}^)";	# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_IID_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl "NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl "NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:default-iid-SuperFormats
.

rdfdf:default-iid-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-iid-nullable;
      rdf:_2 rdfdf:default;
      rdf:_3 rdfdf:default-nullable;
.

rdfdf:default-iid-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:default-iid;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF;
  virtrdf:qmfName "default-iid-nullable";
  virtrdf:qmfSuperFormats rdfdf:default-iid-nullable-SuperFormats
.

rdfdf:default-iid-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-nullable;
.

rdfdf:default-iid-nonblank
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:default-iid;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_NOT_NULL;
  virtrdf:qmfName "default-iid-nonblank";
  virtrdf:qmfSuperFormats rdfdf:default-iid-nonblank-SuperFormats
.

rdfdf:default-iid-nonblank-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-iid-nonblank-nullable;
      rdf:_2 rdfdf:default-iid;
      rdf:_3 rdfdf:default-iid-nullable;
      rdf:_4 rdfdf:default;
      rdf:_5 rdfdf:default-nullable;
.

rdfdf:default-iid-nonblank-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:default-iid;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "default-iid-nonblank-nullable";
  virtrdf:qmfSuperFormats rdfdf:default-iid-nonblank-nullable-SuperFormats
.

rdfdf:default-iid-nonblank-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-iid-nullable;
      rdf:_2 rdfdf:default-nullable;
.

rdfdf:default
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "default";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RQ_LONG_OF_O (^{alias-dot}^^{column}^)";		# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " DB.DBA.RQ_SQLVAL_OF_O (^{alias-dot}^^{column}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " DB.DBA.RQ_BOOL_OF_O (^{alias-dot}^^{column}^)";		# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " isiri_id (^{tree}^)";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " (case (isiri_id (^{tree}^)) when 0 then 0 else lt (^{tree}^, min_bnode_iri_id ()) end)";	# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " (case (isiri_id (^{tree}^)) when 0 then 0 else gte (^{tree}^, min_bnode_iri_id ()) end)";	# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " DB.DBA.RQ_O_IS_LIT (^{tree}^)";			# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_LONG_OF_OBJ (^{tree}^)";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " DB.DBA.RDF_SQLVAL_OF_OBJ (^{tree}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " DB.DBA.RDF_DATATYPE_OF_OBJ (^{tree}^)";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " DB.DBA.RDF_LANGUAGE_OF_OBJ (^{tree}^)";	# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " DB.DBA.RDF_BOOL_OF_OBJ (^{tree}^)";		# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_LONG (DB.DBA.RDF_LONG_OF_OBJ (^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " id_to_iri (^{tree}^)";				# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " DB.DBA.RDF_STRSQLVAL_OF_OBJ (^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " DB.DBA.RDF_MAKE_OBJ_OF_TYPEDSQLVAL (^{sqlval-of-tree}^, DB.DBA.RDF_MAKE_IID_OF_QNAME(^{datatype-of-tree}^), ^{language-of-tree}^)";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " DB.DBA.RDF_OBJ_OF_SQLVAL (^{tree}^)";		# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " DB.DBA.RDF_OBJ_OF_LONG (^{tree}^)";		# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME_SAFE (^{tree}^)";	# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLongWhenEqToSql 1;
  virtrdf:qmfIsSubformatOfLongWhenRef 1;
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " DB.DBA.RDF_TYPEMIN_OF_OBJ (^{tree}^)";		# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " DB.DBA.RDF_TYPEMAX_OF_OBJ (^{tree}^)";		# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 1;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:default-SuperFormats
.

rdfdf:default-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-nullable;
.

rdfdf:default-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:default;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
#  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
#    no restructions ATM;
  virtrdf:qmfName "default-nullable";
  virtrdf:qmfSuperFormats rdfdf:default-nullable-SuperFormats
.

rdfdf:default-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
.
        
rdfdf:sql-varchar
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{tree}^)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#string'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (^{tree}^)";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^)) when 'http://www.w3.org/2001/XMLSchema#string' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " (case (isstring (^{tree}^)) when 0 then NULL else (^{tree}^) end)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " DB.DBA.RDF_STRSQLVAL_OF_LONG (^{tree}^)" ;	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL" ;						# STRING REQUIRED ... makes short by uri
  virtrdf:qmfShortOfNiceSqlvalTmpl " ^{tree}^" ;	# STRING OPTIONAL
  virtrdf:qmfDtpOfNiceSqlval 182 ;
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_STRCMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#string";	# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-SuperFormats
.

rdfdf:sql-varchar-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-varchar-nullable;
.

rdfdf:sql-varchar-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-varchar-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-nullable-SuperFormats
.

rdfdf:sql-varchar-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-longvarchar
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longvarchar";
  virtrdf:inheritFrom rdfdf:sql-varchar;
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-SuperFormats
.

rdfdf:sql-longvarchar-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-longvarchar-nullable;
.

rdfdf:sql-longvarchar-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longvarchar;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longvarchar-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-nullable-SuperFormats
.

rdfdf:sql-longvarchar-nullable-SuperFormats  
  rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-longvarbinary
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longvarbinary";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " 1";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#octetStream'";  # STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " 1";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " NULL";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^)) when 'http://www.w3.org/2001/XMLSchema#octetStream' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " (case (__tag (^{tree}^)) when 131 then (^{tree}^) else NULL end)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " (case (__tag (^{tree}^)) when 131 then (^{tree}^) else NULL end)";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VARBINARY_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#octetStream";	# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-longvarbinary-SuperFormats
.

rdfdf:sql-longvarbinary-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-longvarbinary-nullable;
.

rdfdf:sql-longvarbinary-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longvarbinary;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longvarbinary-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longvarbinary-nullable-SuperFormats
.

rdfdf:sql-longvarbinary-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
.
  
rdfdf:sql-varchar-uri
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-uri";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf (^{custom-string-1}^, ^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " sprintf (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf (^{custom-string-1}^, ^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " sprintf (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " sprintf (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " sprintf (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " NULL";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " sprintf_inverse (^{tree}^, ^{custom-string-1}^, 2)[0]";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " sprintf_inverse (id_to_iri (^{tree}^), ^{custom-string-1}^), 2)[0]";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " sprintf_inverse (^{tree}^, ^{custom-string-1}^, 2)[0]";	# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#anyURI";	# STRING OPTIONAL Datatype of stored values, if fixed
  virtrdf:qmfValRange-rvrLanguage "NULL";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfCustomString1 "local://%s";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-uri-SuperFormats
.

rdfdf:sql-varchar-uri-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-varchar-uri-nullable;
.

rdfdf:sql-varchar-uri-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " sprintf_or_null (^{custom-string-1}^, ^{alias-dot}^^{column}^)";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " sprintf_or_null (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " sprintf_or_null (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " sprintf_or_null (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "sql-varchar-uri-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-uri-nullable-SuperFormats
.

rdfdf:sql-varchar-uri-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-integer
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-integer";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when 0 then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#integer'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^)) when 'http://www.w3.org/2001/XMLSchema#integer' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -2147483648";					# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 2147483647";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#integer";	# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-integer-SuperFormats
.

rdfdf:sql-integer-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-integer-nullable;
      rdf:_2 rdfdf:default-nullable;
      rdf:_3 rdfdf:default;
.

rdfdf:sql-integer-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-integer;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-integer-nullable";
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfSuperFormats rdfdf:sql-integer-nullable-SuperFormats
.

rdfdf:sql-integer-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-nullable;
.

rdfdf:sql-integer-uri
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-integer-uri";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -2147483648";					# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 2147483647";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
  virtrdf:qmfCustomString1 "local://%d";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-integer-uri-SuperFormats
.

rdfdf:sql-integer-uri-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-integer-uri-nullable;
.

rdfdf:sql-integer-uri-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-integer-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "sql-integer-uri-nullable";
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " sprintf_or_null (^{custom-string-1}^, ^{alias-dot}^^{column}^)";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " sprintf_or_null (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " sprintf_or_null (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " sprintf_or_null (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-integer-uri-nullable-SuperFormats
.

rdfdf:sql-integer-uri-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-doubleprecision
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-doubleprecision";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when 0 then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#double'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " NULL";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^)) when 'http://www.w3.org/2001/XMLSchema#double' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -1.797e308";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 1.797e308";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#double";	# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-doubleprecision-SuperFormats
.

rdfdf:sql-doubleprecision-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-doubleprecision-nullable;
      rdf:_2 rdfdf:default-nullable;
      rdf:_3 rdfdf:default;
.

rdfdf:sql-doubleprecision-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-doubleprecision;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-doubleprecision-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-doubleprecision-nullable-SuperFormats
.

rdfdf:sql-doubleprecision-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-nullable;
.

rdfdf:sql-date
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-date";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when 0 then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#date'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^)) when 'http://www.w3.org/2001/XMLSchema#date' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " cast ('0001-01-01' as date)";			# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " cast ('3000-12-31' as date)";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#date";	# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-date-SuperFormats
.

rdfdf:sql-date-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-date-nullable;
  rdf:_2 rdfdf:sql-datetime;
  rdf:_3 rdfdf:sql-datetime-nullable;
  rdf:_4 rdfdf:default-nullable;
  rdf:_5 rdfdf:default;
.

rdfdf:sql-date-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-date;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-date-nullable";
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfSuperFormats rdfdf:sql-date-nullable-SuperFormats
.

rdfdf:sql-date-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-datetime-nullable;
  rdf:_2 rdfdf:default-nullable;
.

rdfdf:sql-datetime
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-datetime";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when 0 then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#datetime'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " NULL";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^)) when 'http://www.w3.org/2001/XMLSchema#datetime' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " cast ('0001-01-01' as datetime)";			# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " cast ('3000-12-31' as datetime)";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#datetime";	# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-datetime-SuperFormats
.

rdfdf:sql-datetime-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-datetime-nullable;
  rdf:_2 rdfdf:default-nullable;
  rdf:_3 rdfdf:default;
.

rdfdf:sql-datetime-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-datetime;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-datetime-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-datetime-nullable-SuperFormats
.

rdfdf:sql-datetime-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-nullable;
.

rdfdf:multipart-uri
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "multipart-uri";
  virtrdf:qmfShortTmpl "^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{as-name-N}^^{end}^";	# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " sprintf (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " sprintf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfUriOfShortTmpl " sprintf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " sprintf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "^{comma-list-begin}^ sprintf_inverse (^{tree}^, ^{custom-string-1}^, 2)[^{N}^]^{as-name-N}^^{end}^";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "^{comma-list-begin}^ sprintf_inverse (^{tree}^, ^{custom-string-1}^, 2)[^{N}^]^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "^{comma-list-begin}^ sprintf_inverse (id_to_iri_nosignal (^{tree}^), ^{custom-string-1}^, 2)[^{N}^]^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "^{comma-list-begin}^ sprintf_inverse (^{tree}^, ^{custom-string-1}^, 2)[^{N}^]^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:multipart-uri-SuperFormats
.

rdfdf:multipart-uri-SuperFormats  
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:multipart-uri-nullable;
.

rdfdf:multipart-uri-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:multipart-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "multipart-uri-nullable";
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " sprintf_or_null (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " sprintf_or_null (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (sprintf_or_null (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfUriOfShortTmpl " sprintf_or_null (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " sprintf_or_null (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:multipart-uri-nullable-SuperFormats
.

rdfdf:multipart-uri-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:multipart-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "multipart-uri-fn-nullable";
  virtrdf:qmfShortTmpl "^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{as-name-N}^^{end}^";	# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfUriOfShortTmpl " ^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (id_to_iri_nosignal (^{tree}^))^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
#  virtrdf:qmfValRange-rvrDatatype "";						# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:multipart-uri-fn-nullable-SuperFormats
.

rdfdf:multipart-uri-fn-nullable-SuperFormats  
  rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:multipart-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "multipart-literal-fn-nullable";
  virtrdf:qmfShortTmpl "^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{as-name-N}^^{end}^";	# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_LONG_OF_SQLVAL (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " DB.DBA.RDF_DATATYPE_OF_SQLVAL (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " ^{custom-verbatim-1}^ (^{tree}^)";		# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (cast (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^) as varchar))";
  virtrdf:qmfUriOfShortTmpl " cast (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^) as varchar)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (DB.DBA.RDF_SQLVAL_OF_LONG (^{tree}^))^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by literal
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
#  virtrdf:qmfValRange-rvrDatatype "";						# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:multipart-literal-fn-nullable-SuperFormats
.

rdfdf:multipart-literal-fn-nullable-SuperFormats  
  rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-varchar-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-uri-fn";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (^{custom-verbatim-1}^ (^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{custom-verbatim-1}^ (^{alias-dot}^^{column}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (^{custom-verbatim-1}^ (^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " 'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (^{custom-verbatim-1}^ (^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " ^{custom-verbatim-1}^ (^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " NULL";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{custom-verbatim-1}^_INVERSE (^{tree}^)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "  ^{custom-verbatim-1}^_INVERSE (DB.DBA.RDF_QNAME_OF_LONG_SAFE (^{tree}^))";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "  ^{custom-verbatim-1}^_INVERSE (^{tree}^)";		# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#anyURI";	# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfCustomString1 "DB.DBA.RDF_DF_VARCHAR_URI";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-uri-fn-SuperFormats
.

rdfdf:sql-varchar-uri-fn-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-varchar-uri-fn-nullable;
.

rdfdf:sql-varchar-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-uri-fn;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
  virtrdf:qmfName "sql-varchar-uri-fn-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-uri-fn-nullable-SuperFormats
.

rdfdf:sql-varchar-uri-fn-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-integer-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-uri-fn;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-integer-uri-fn";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -2147483648";					# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 2147483647";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
  virtrdf:qmfCustomString1 "DB.DBA.RDF_DF_INTEGER_URI";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-integer-uri-fn-SuperFormats
.

rdfdf:sql-integer-uri-fn-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-integer-uri-fn-nullable;
.

rdfdf:sql-integer-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-integer-uri-fn;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
  virtrdf:qmfName "sql-integer-uri-fn-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-integer-uri-fn-nullable-SuperFormats
.

rdfdf:sql-integer-uri-fn-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-varchar-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-literal-fn";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{custom-verbatim-1}^ (^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{custom-verbatim-1}^ (^{alias-dot}^^{column}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 1";						# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{custom-verbatim-1}^ (^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " DB.DBA.RDF_DATATYPE_OF_SQLVAL (^{custom-verbatim-1}^ (^{tree}^))";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " ^{custom-verbatim-1}^ (^{tree}^)";		# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_QNAME (cast (^{custom-verbatim-1}^ (^{tree}^) as varchar))";
  virtrdf:qmfUriOfShortTmpl " cast (^{custom-verbatim-1}^ (^{tree}^) as varchar)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{custom-verbatim-1}^ (^{tree}^) as varchar)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " NULL";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{custom-verbatim-1}^_INVERSE (^{tree}^)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "  ^{custom-verbatim-1}^_INVERSE (DB.DBA.RDF_SQLVAL_OF_LONG (^{tree}^))";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "  ^{custom-verbatim-1}^_INVERSE (^{tree}^)";		# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#any";	# STRING OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# STRING OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfCustomString1 "DB.DBA.RDF_DF_VARCHAR_LITERAL";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-literal-fn-SuperFormats
.

rdfdf:sql-varchar-literal-fn-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-varchar-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal-fn;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-varchar-literal-fn-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-literal-fn-nullable-SuperFormats
.

rdfdf:sql-varchar-literal-fn-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-varchar-literal-fn-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-integer-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal-fn;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-integer-literal-fn";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
  virtrdf:qmfCustomString1 "DB.DBA.RDF_DF_INTEGER_URI";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-integer-literal-fn-SuperFormats
.

rdfdf:sql-integer-literal-fn-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
.

rdfdf:sql-integer-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal-fn-nullable;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-integer-literal-fn-nullable";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfCustomString1 "DB.DBA.RDF_DF_INTEGER_URI";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-integer-literal-fn-nullable-SuperFormats
.

rdfdf:sql-integer-literal-fn-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
.

virtrdf:DefaultQuadMap
  rdf:type virtrdf:QuadMap;
  virtrdf:qmGraphMap virtrdf:DefaultQuadMap-G;
  virtrdf:qmSubjectMap virtrdf:DefaultQuadMap-S;
  virtrdf:qmPredicateMap virtrdf:DefaultQuadMap-P;
  virtrdf:qmObjectMap virtrdf:DefaultQuadMap-O;
  virtrdf:qmTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmMatchingFlags virtrdf:SPART_QM_OK_FOR_ANY_QUAD;
.

virtrdf:DefaultQuadMap-G      
      rdf:type virtrdf:QuadMapValue;
      virtrdf:qmvTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmvATables virtrdf:DefaultQuadMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultQuadMap-G-cols;
  virtrdf:qmvFormat rdfdf:default-iid-nonblank;
  virtrdf:qmvColumnsFormKey 0;
.

virtrdf:DefaultQuadMap-G-cols      
          rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultQuadMap-G-col-G;
.

virtrdf:DefaultQuadMap-G-col-G  
              rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!pquad";
              virtrdf:qmvcColumnName "G";
.
    
virtrdf:DefaultQuadMap-S  
      rdf:type virtrdf:QuadMapValue;
      virtrdf:qmvTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmvATables virtrdf:DefaultQuadMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultQuadMap-S-cols;
  virtrdf:qmvFormat rdfdf:default-iid;
  virtrdf:qmvColumnsFormKey 0;
.

virtrdf:DefaultQuadMap-S-cols
          rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultQuadMap-S-col-S;
.

virtrdf:DefaultQuadMap-S-col-S
              rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!pquad";
              virtrdf:qmvcColumnName "S";
.

virtrdf:DefaultQuadMap-P  
      rdf:type virtrdf:QuadMapValue;
      virtrdf:qmvTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmvATables virtrdf:DefaultQuadMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultQuadMap-P-cols;
  virtrdf:qmvFormat rdfdf:default-iid-nonblank;
  virtrdf:qmvColumnsFormKey 0;
.

virtrdf:DefaultQuadMap-P-cols
          rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultQuadMap-P-col-P;
.

virtrdf:DefaultQuadMap-P-col-P  
              rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!pquad";
              virtrdf:qmvcColumnName "P";
.

virtrdf:DefaultQuadMap-O  
      rdf:type virtrdf:QuadMapValue;
      virtrdf:qmvTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmvATables virtrdf:DefaultQuadMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultQuadMap-O-cols;
  virtrdf:qmvFText virtrdf:DefaultQuadMap-ft;
  virtrdf:qmvFormat rdfdf:default;
  virtrdf:qmvColumnsFormKey 0;
.

virtrdf:DefaultQuadMap-O-cols
          rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultQuadMap-O-col-O;
.

virtrdf:DefaultQuadMap-O-col-O
              rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!pquad";
              virtrdf:qmvcColumnName "O";
.

virtrdf:DefaultQuadMap-atables
  rdf:type virtrdf:array-of-QuadMapATable;
  rdf:_1 virtrdf:DefaultQuadMap-pquad;
.

virtrdf:DefaultQuadMap-pquad
  rdf:type virtrdf:QuadMapATable;
  virtrdf:qmvaAlias "!pquad";
  virtrdf:qmvaTableName "DB.DBA.RDF_QUAD";
.

virtrdf:DefaultQuadMap-ft
  rdf:type virtrdf:QuadMapFText;
  virtrdf:qmvftAlias "pobj";
  virtrdf:qmvftColumnName "RO_DIGEST";
  virtrdf:qmvftConds virtrdf:DefaultQuadMap-ft-conds;
  virtrdf:qmvftTableName "DB.DBA.RDF_OBJ";
  virtrdf:qmvftXmlIndex 1;
.

virtrdf:DefaultQuadMap-ft-conds
  rdf:type virtrdf:array-of-string;
  rdf:_1 "^{!pquad.}^.O = ^{pobj.}^.RO_DIGEST";
.

