<?vsp 
--  
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--  
--  Copyright (C) 1998-2006 OpenLink Software
--  
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--  
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--  
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--  
--  
?>
<?vsp

if ({?'type'} is not null)
{
  declare _cluster, _clusterwithpoint varchar;
  declare _home varchar;
  declare _base varchar;
  if ({?'cluster'} is null) {
	_cluster := '';
	_clusterwithpoint := '';
  } else {
	_cluster := {?'cluster'};
 	_clusterwithpoint := _cluster || '.'; 
  }
  _base := aref (split_and_decode (http_request_header (lines, 'Host'), 0, '\0\0:'), 0);
  _base := 'http://' || _base || ':' || server_http_port () || '/';
  _home :=  _base || 'wiki/main/';

  declare cr cursor for select 
  		RV_ID as "HistId",
  		a.ClusterName as "ClusterName",
		LocalName as "TopicName",
		RV_CR_TIME as "Date",
		RV_MOD_TIME as "ModDate",
		coalesce (RV_WHO, 'Unknown') as "UserName",
		'changed' as "Action",
		'' as "Context" 
	   from (select top (0, 100) * from  WS.WS.SYS_DAV_RES_VERSION inner join WS.WS.SYS_DAV_RES on (RES_ID = RV_RES_ID)
	     inner join WV.WIKI.TOPIC on (ResId = RES_ID)
             inner join WV.WIKI.CLUSTERS c on (ClusterId = c.ClusterId)
	    where
	     c.ClusterName = _cluster) a;
  declare cr1 cursor for select 
  		RV_ID as "HistId",
  		a.ClusterName as "ClusterName",
		LocalName as "TopicName",
		RV_CR_TIME as "Date",
		RV_MOD_TIME as "ModDate",
		coalesce (RV_WHO, 'Unknown') as "UserName",
		'changed' as "Action",
		'' as "Context" 
	   from (select top (0, 100) * from  WS.WS.SYS_DAV_RES_VERSION inner join WS.WS.SYS_DAV_RES on (RES_ID = RV_RES_ID)
	     inner join WV.WIKI.TOPIC on (ResId = RES_ID)
             inner join WV.WIKI.CLUSTERS c on (ClusterId = c.ClusterId)) a;

  declare _hist_id, _clustername, _topicname, _username, _action, _context varchar;
  declare _date, _mod_date datetime;
  declare author, author_email varchar;
  declare author_id int;

  if (_cluster <> '') {
    open cr;
    select U_ID, U_NAME, U_E_MAIL into author_id, author, author_email from DB.DBA.SYS_USERS, WV.WIKI.CLUSTERS where AdminId = u_id and ClusterName = _cluster;
  } else {
    open cr1;
    _clusterwithpoint := '';
    select U_ID, U_NAME, U_E_MAIL into author_id, author, author_email from DB.DBA.SYS_USERS where U_ID = http_dav_uid ();
  }
  whenever not found goto fin;



   http_header ('Content-Type: text/xml; charset="ISO-8859-1"\r\n');
   http ('<rss version="2.0" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:vi="http://www.openlinksw.com/weblog/">\r\n<channel>\r\n');
   http ('<title>');
   if ({?'cluster'} is null)
     http ('Site Changelog');
   else
     http (_cluster || '\'s Changelog');
   http ('</title>');
   http ('<link><![CDATA[');
   http ('http://'); http(WV.WIKI.GET_HOST ()); http_value (sprintf ('/wiki/main/gems.vsp?type=%U', {?'type'}));
   if (_cluster <> '')
     http (sprintf ('&cluster=%U', _cluster));
   http ('&test=');
   http (']]></link>');
   http ('<pubDate>');
   http_value (WV.WIKI.DATEFORMAT (now (), 'rfc1123'));
   http ('</pubDate>');
   http ('<managingEditor>');
   http_value (charset_recode (author,'UTF-8', '_WIDE_'));   
   http_value (sprintf ('<%s>', coalesce (author_email, '')));
   http ('</managingEditor>');
   http ('<description>About last changes</description>');
again:
  if (_cluster <> '')
    fetch cr into _hist_id, _clustername, _topicname, _date, _mod_date, _username, _action, _context;
  else 
    fetch cr1 into _hist_id, _clustername, _topicname, _date, _mod_date, _username, _action, _context;
  http ('<item>');
  http ('<title>');
  http_value (charset_recode (_clustername || '.' || _topicname, 'UTF-8', '_WIDE_'));
  http ('</title>');
  http (sprintf ('<link>http://%s/wiki/main/%U/%U</link>', WV.WIKI.GET_HOST (), _clustername, _topicname));
  http ('<pubDate>');
  http_value (WV.WIKI.DATEFORMAT (_date, 'rfc1123'));
  http ('</pubDate>');

  http ('<description>');
  http (WV.WIKI.RSSMAKECONTENT (_clustername, _topicname, _action, _username,  _context, _hist_id,
          'http://' ||  WV.WIKI.GET_HOST () || '/wiki/main/'));
  http ('</description>');

  http ('<vi:modified>');
  http_value (WV.WIKI.DATEFORMAT (_mod_date, 'iso8601'));
  http ('</vi:modified>');
  http ('</item>');
  goto again;

fin:
  http ('</channel></rss>');
  if ({?'type'} = 'rdf')
    http_xslt (WV.WIKI.WA_PPATH_URL ('rss2rdf.xsl'));
  else if ({?'type'} = 'atom')
    http_xslt (WV.WIKI.WA_PPATH_URL ('rss2atom.xsl'));  
  else if ({?'type'} <> 'rss20')
   signal ('WV800', 'Feed type [' || {?'type'} || '] is not supported');
}

?>
