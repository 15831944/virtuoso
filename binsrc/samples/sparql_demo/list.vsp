<?vsp 
--  
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--  
--  Copyright (C) 1998-2006 OpenLink Software
--  
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--  
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--  
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--  
--  
?>
<?vsp
  declare _list, _case, _text varchar;
  declare _items any;
  declare _ctr integer;
  declare _case_pattern, _datafile_pattern varchar;
  _list := {?'list'};
  if (_list is null)
    _list := '';
  _case := {?'case'};
  if (_case is null)
    _case := '';
  _text := {?'text'};
  _items := "RQ"."RQ"."LIST_MENU_ITEMS"();
  ?>
<HTML>
<BODY TEXT="#000000" LINK="#0000CC" VISITED="#3300CC" background="bg.jpg" TOPMARGIN=0>
<DIV style="TEXT-ALIGN:center;"><A href="http://www.openlinksw.com/virtuoso/whatis.htm" TARGET="desk">
<IMG SRC="xquerylogo.jpg" ALT="" border="0" ></A></DIV>
<?vsp
  _ctr := 0;
  while (_ctr < length (_items))
    {
      declare _item any;
      declare _type integer;
      _item := aref (_items, _ctr);
      _type := aref (_item, 0);
      _ctr := _ctr + 1;
      if (10 = _type)
	{
          declare _tcases any;
          _tcases := DB.DBA.SPARQL_EVAL_TO_ARRAY ('
PREFIX tq: <http://www.w3.org/2001/sw/DataAccess/tests/test-query#>
PREFIX tm: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?name ?rquri
WHERE {
  ?bn tm:name ?name ;
    tm:action
      [ tq:query ?rquri ] .
  optional {
    ?bn tm:result ?etalonuri 
    }
  }', DB.DBA.SPARQL_DAV_DATA_URI() || _item[2], 10000);
          foreach (any _tcase in _tcases) do
            {
              if (exists (select top 1 1 from DB.DBA.SPARQL_DAWG_STATUS where TEST_URI = _tcase[1] and TEST_STATUS = 'PASSED'))
                goto there_is_passed_test;
            }
          goto skip_failed_group;
there_is_passed_test:
	  ?><FONT SIZE="-1"><?vsp
	  if (aref (_item, 1) = _list)
	    {
              declare _tfiles any;
              _tfiles := DB.DBA.SPARQL_EVAL_TO_ARRAY ('
PREFIX tq: <http://www.w3.org/2001/sw/DataAccess/tests/test-query#>
PREFIX tm: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?name
WHERE {
  [ tq:data ?name ]
  }', DB.DBA.SPARQL_DAV_DATA_URI() || _item[2], 10000); 
	      ?><NOBR><CODE>[-]</CODE>&nbsp;<A HREF="demo.vsp?listmetaonly=<?= aref (_item, 1) ?>&noise=<?= sequence_next('_')?>" TARGET="_top"><?= aref (_item, 1) ?></A></NOBR><BR><?vsp
              foreach (any _tcase in _tcases) do
		{
                  declare _name, _descr, _rquri, _origin varchar;
                  _name := _tcase[0]; _descr := _tcase[0]; _rquri := _tcase[1];
                  if (not exists (select top 1 1 from DB.DBA.SPARQL_DAWG_STATUS where TEST_URI = _rquri and TEST_STATUS = 'PASSED'))
                    goto skip_failed_test;
                  _origin := 'W3C DAWG';
		  _descr := cast (_descr as varchar);
		  _descr := replace (_descr, '\n', ' ');
		  _descr := replace (_descr, '\t', ' ');
		  _descr := replace (_descr, '    ', ' ');
		  _descr := replace (_descr, '  ', ' ');
		  if (_name = _case)
		    {
		      ?><NOBR><CODE>&nbsp;&nbsp;&nbsp;(&nbsp;<A HREF="demo.vsp?list=<?= aref (_item, 1) ?>&case=<?= _name ?>" TITLE="<?= _descr ?>" TARGET="_top"><?= _name ?></A>&nbsp;)</CODE></NOBR><BR><?vsp
		    }
		  else
		    {
		      ?><NOBR><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="demo.vsp?list=<?= aref (_item, 1) ?>&case=<?= _name ?>" TITLE="<?= _descr ?>" TARGET="_top"><?= _name ?></A></CODE></NOBR><BR><?vsp
		    }
skip_failed_test: ;
		}
              foreach (any _tfile in _tfiles) do
		{
                  declare _name, _comment varchar;
                  _name := subseq(_tfile[0], 1 + strrchr (_tfile[0], '/')); _comment := _tfile[0];
		  _comment := cast (_comment as varchar);
		  _comment := replace (_comment, '\n', ' ');
		  _comment := replace (_comment, '\t', ' ');
		  _comment := replace (_comment, '    ', ' ');
		  _comment := replace (_comment, '  ', ' ');
		  if (_name = _case)
		    {
		      ?><NOBR><CODE>&nbsp;&nbsp;&nbsp;(&nbsp;<A HREF="demo.vsp?list=<?= aref (_item, 1) ?>&case=<?= _name ?>&desk=deskdata" TITLE="<?= _comment ?>" TARGET="_top"><?= _name ?></A>&nbsp;)</CODE></NOBR><BR><?vsp
		    }
		  else
		    {
		      ?><NOBR><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="demo.vsp?list=<?= aref (_item, 1) ?>&case=<?= _name ?>&desk=deskdata" TITLE="<?= _comment ?>" TARGET="_top"><?= _name ?></A></CODE></NOBR><BR><?vsp
		    }
		}
	    }
	  else
	    {
	      ?><NOBR><CODE>[+]</CODE>&nbsp;<A HREF="demo.vsp?list=<?= aref (_item, 1) ?>&noise=<?= sequence_next('_')?>" TARGET="_top"><?= aref (_item, 1) ?></A></NOBR><BR><?vsp
	    }
	  ?></FONT><?vsp
skip_failed_group: ;
	}
      if (5 = _type)
	{
	  ?><FONT SIZE="-1"><?vsp
	  ?><NOBR><A HREF="<?= aref (_item, 2) ?>" TARGET="NEW"><?= aref (_item, 1) ?></A></NOBR><BR><?vsp
	  ?></FONT><?vsp
	}
      if (3 = _type)
	{
	  ?><P><NOBR><A HREF="<?= aref (_item, 2) ?>" TARGET="desk"><?= aref (_item, 1) ?></A></NOBR></P><?vsp
	}
      if (2 = _type)
	{
	  ?><P><NOBR><A HREF="<?= aref (_item, 2) ?>" TARGET="_top"><?= aref (_item, 1) ?></A></NOBR></P><?vsp
	}
      if (1 = _type)
	{
	  ?></P><?vsp
	}
      if (0 = _type)
	{
	  ?><P><B><?= aref (_item, 1) ?></B><BR><?vsp
	}
    }
?>
</BODY>
</HTML>
